{"INPUT": "// fix_start\npublic OutputStream create(GridGgfsPath path,int bufSize,boolean overwrite,int replication,long blockSize,@Nullable Map<String,String> props) throws GridException ;\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean hasComment=command.hasProperty(\"comment\");\n// fix_end\n// fix_start\n  if (hasComment) {\n    actions.add(new SQLDatabasePersistAction(\"Comment table\",\"COMMENT ON TABLE \" + view.getFullyQualifiedName(DBPEvaluationContext.DDL) + \" IS '\"+ CommonUtils.notEmpty(view.getComment())+ \"'\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n    mInfo.flags=DisplayDeviceInfo.FLAG_DEFAULT_DISPLAY | DisplayDeviceInfo.FLAG_SECURE | DisplayDeviceInfo.FLAG_SUPPORTS_PROTECTED_BUFFERS;\n// fix_end\n"}
{"INPUT": "// fix_start\n  pw.println(\"  icon views: \" + N);\n// fix_end\n// fix_start\n  super.dump(pw);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.meta.getValue().isEmpty() == false) {\n    builder.field(this.meta.name,this.meta.getValue());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  menuRes.exists();\n// fix_end\n// fix_start\n  confRes.exists();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Step.StepKey realKey=LifecycleExecutionState.getCurrentStepKey(lifecycleState);\n  if (currentStepKey != null && currentStepKey.equals(realKey) == false) {\n    throw new IllegalArgumentException(\"index [\" + indexName + \"] is not on current step [\"+ currentStepKey+ \"], currently: [\"+ realKey+ \"]\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      return !List.class.isAssignableFrom(genericTypes[1].toClass());\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected void overrideServerConf(Configuration configuration){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected PaymentTransactionInfoPlugin doCallSpecificOperationCallback() throws PaymentPluginApiException {\n// fix_end\n"}
{"INPUT": "// fix_start\n  editor.waitActive();\n// fix_end\n// fix_start\n  editor.goToCursorPositionVisible(32,5);\n// fix_end\n"}
{"INPUT": "// fix_start\nApkGenrule(BuildRuleParams params,SourcePathResolver resolver,SourcePathRuleFinder ruleFinder,List<SourcePath> srcs,Optional<Arg> cmd,Optional<Arg> bash,Optional<Arg> cmdExe,Optional<String> type,SourcePath apk){\n  super(params,resolver,srcs,cmd,bash,cmdExe,type,params.getBuildTarget().getShortNameAndFlavorPostfix() + \".apk\");\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate Thread runCacheOperations(Ignite node,TransactionIsolation isolation,long timeout,final int keys){\n// fix_end\n"}
{"INPUT": "// fix_start\n  String nestedPort=placeholderResolved.getResolvePlaceholderText(springZookeeperConfigurationDto.getNestedPort());\n  if (!Strings.isNullOrEmpty(nestedPort)) {\n    getZkConfig().setNestedPort(Integer.parseInt(nestedPort));\n  }\n  String nestedDataDir=placeholderResolved.getResolvePlaceholderText(springZookeeperConfigurationDto.getNestedDataDir());\n  if (!Strings.isNullOrEmpty(nestedDataDir)) {\n    getZkConfig().setNestedDataDir(nestedDataDir);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (state == mState) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(\"ask should be USD 34.39798\",ticker.getAsk().toString(),\"USD 34.39798\");\n  assertEquals(\"buy should be USD 30.98600\",ticker.getBid().toString(),\"USD 30.98600\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      int portSeparatorIdx=hostToUse.lastIndexOf(\":\");\n      if (portSeparatorIdx > hostToUse.lastIndexOf(\"]\")) {\n        host(hostToUse.substring(0,portSeparatorIdx));\n        port(Integer.parseInt(hostToUse.substring(portSeparatorIdx + 1)));\n// fix_end\n"}
{"INPUT": "// fix_start\n    AtomicReader indexReader=tuple.v1();\n// fix_end\n// fix_start\n    if (parentDocId != -1 && (indexReader.getLiveDocs() == null || indexReader.getLiveDocs().get(parentDocId))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    batchMessageAndSend();\n    batchMessageContainer.add(msg,callback);\n    lastSendFuture=callback.getFuture();\n  }\n  finally {\n    payload.release();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    String schema=schemaDataSources.keySet().iterator().next();\n    logicSchemas.put(schema,LogicSchemaFactory.newInstance(schema,schemaDataSources,null,isUsingRegistry));\n// fix_end\n"}
{"INPUT": "// fix_start\npublic Rule answer(InvocationOnMock iom){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return instArg != null ? instArg.equals(fieldArg.instArg) : fieldArg.instArg == null;\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test public void testFrom(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  System.identityHashCode(\" Hello\" + new Object(){\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n,new HumanReadableExceptionAugmentor(ImmutableMap.of())).logException(failure);\n// fix_end\n"}
{"INPUT": "// fix_start\n  navigationMessage.setStatus(parcel.readInt());\n// fix_end\n"}
{"INPUT": "// fix_start\n else {\n      int index=password.indexOf(':');\n      if (index > 0) {\n        password=password.substring(index + 1);\n      }\n    }\n    if (password != null && !password.equals(\"\")) {\n      builder.withPassword(password);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void init(@SuppressWarnings(\"rawtypes\") NamedList args){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void reportStorageEvents(Collection<StatsStorageEvent> events){\n// fix_end\n// fix_start\n      knownSessionIDs.put(sse.getSessionID(),sse.getStatsStorage());\n// fix_end\n"}
{"INPUT": "// fix_start\nprotected static boolean isHex(String input,int length){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override @Deprecated public EpollServerChannelConfig setMaxMessagesPerRead(int maxMessagesPerRead){\n// fix_end\n"}
{"INPUT": "// fix_start\n    deser=ctxt.handleContextualization(deser,property);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ((EverLivingJobEntity)jobEntity).init(Context.getCommandContext(),true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  from(\"pop3://james3@localhost?consumer.delay=1000\").removeHeader(\"to\").to(\"smtp://james4@localhost\");\n  from(\"pop3://james4@localhost?consumer.delay=2000\").convertBodyTo(String.class).to(\"mock:result\");\n// fix_end\n"}
{"INPUT": "// fix_start\n@RequestMapping(value=\"/page\",method=RequestMethod.GET) @ResponseBody public TableResultResponse<User> page(@RequestParam(defaultValue=\"10\") int limit,@RequestParam(defaultValue=\"1\") int offset,String name){\n// fix_end\n// fix_start\n  if (StringUtils.isNotBlank(name)) {\n    example.createCriteria().andLike(\"name\",\"%\" + name + \"%\");\n    example.createCriteria().andLike(\"username\",\"%\" + name + \"%\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<String> list=new ArrayList<>();\n  if (paths != null) {\n    StringTokenizer tokenizer=new StringTokenizer(paths,separator);\n    while (tokenizer.hasMoreTokens()) {\n      list.add(tokenizer.nextToken());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (extractFile.exists()) {\n      if (!extractFile.delete()) {\n        throw new RuntimeException(\"Failed to delete file: \" + extractFile);\n// fix_end\n// fix_start\n    }\n    if (!extractFile.createNewFile()) {\n      throw new RuntimeException(\"Failed to create file: \" + extractFile);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic TestFieldPropIgnoreRequireHashCodeOptionViewModel_ value(@NonNull final OnModelClickListener<TestFieldPropIgnoreRequireHashCodeOptionViewModel_,TestFieldPropIgnoreRequireHashCodeOptionView> value){\n// fix_end\n"}
{"INPUT": "// fix_start\n  Optional<TestSource> customTestSource=node.getTestSourceUri().map(null);\n  TestSource source=customTestSource.orElse(defaultTestSource);\n// fix_end\n"}
{"INPUT": "// fix_start\n@AwaitsFix(bugUrl=\"https://github.com/elastic/elasticsearch/issues/62609\") public void testConcurrentDeleteByQueriesOnDifferentDocs() throws Throwable {\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n      threadPools.addElement(oi.getObjectName());\n// fix_end\n"}
{"INPUT": "// fix_start\n    newService.registerRequestHandler(ClusterSearchShardsAction.NAME,ThreadPool.Names.SAME,null,null);\n    newService.registerRequestHandler(ClusterStateAction.NAME,ThreadPool.Names.SAME,null,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final SearchResponse sizeResponse=client().prepareSearch(indexName).addStoredField(\"_source\").addStoredField(\"_size\").get();\n// fix_end\n"}
{"INPUT": "// fix_start\n@POST @Path(\"private/cancelorder\") GateioBaseResponse cancelOrder(@FormParam(\"orderNumber\") String orderNumber,@FormParam(\"currencyPair\") String currencyPair,@HeaderParam(\"KEY\") String apiKey,@HeaderParam(\"SIGN\") ParamsDigest signer,@FormParam(\"nonce\") SynchronizedValueFactory<Long> nonce) throws IOException ;\n// fix_end\n"}
{"INPUT": "// fix_start\n            menuContent.setFlag(\"active\");\n          }\n          String onlyModuleUrl=JFinal.me().getContextPath() + \"/\" + taxonomy.getContentModule();\n          if (onlyModuleUrl.equals(menuContent.getText())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  partition=clusterMap.getRandomWritablePartition(MockClusterMap.DEFAULT_PARTITION_CLASS,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n    Collection<InternalDistributedMember> suspectMembers=services.getHealthMonitor().getMembersFailingAvailabilityCheck();\n    check.removeAll(suspectMembers);\n    logger.info(\"View with removed and left members removed is {}\\nremoved members: {}\\nleft members: {}\\nsuspect members: {}\",check,removedMembers,leftMembers,suspectMembers);\n// fix_end\n"}
{"INPUT": "// fix_start\n).start();\n// fix_end\n"}
{"INPUT": "// fix_start\n  final PermitAllAuthorizatorPolicy authorizatorPolicy=new PermitAllAuthorizatorPolicy();\n  final Authorizator permitAll=new Authorizator(authorizatorPolicy);\n  sessionRegistry=new SessionRegistry(subscriptions,queueRepository,permitAll);\n  postOffice=new PostOffice(subscriptions,new MemoryRetainedRepository(),sessionRegistry,ConnectionTestUtils.NO_OBSERVERS_INTERCEPTOR,permitAll);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public JavaType constructSpecializedType(JavaType baseType,Class<?> subclass) throws IllegalArgumentException {\n// fix_end\n"}
{"INPUT": "// fix_start\n  indexLimit=(int)Math.pow(partValuesLength,partValuesList.size());\n// fix_end\n"}
{"INPUT": "// fix_start\n  FeedItem selectedItem=listAdapter.getSelectedItem();\n// fix_end\n// fix_start\n    Log.i(TAG,\"Selected item was null, ignoring selection\");\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate void assertDiscoveryCompleted(List<String> nodes) throws Exception {\n// fix_end\n// fix_start\n    assertBusy(null,30,TimeUnit.SECONDS);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.pollingMarketDataService=new EmpoExMarketDataService(this);\n  this.pollingAccountService=new EmpoExAccountService(this);\n  this.pollingTradeService=new EmpoExTradeService(this);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.rowSignature=rowSignature != null ? rowSignature : ImmutableMap.of();\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  ignoresCaption_=new CaptionWithHelp(\"Ignore:\",\"Specifying ignored files\",editor_.getWidget());\n  ignoresCaption_.setIncludeVersionInfo(false);\n  ignoresCaption_.addStyleName(RES.styles().ignoresCaption());\n// fix_end\n"}
{"INPUT": "// fix_start\n    entry.icon.setTag(R.id.icon_is_pre_L,entry.targetSdk < Build.VERSION_CODES.LOLLIPOP);\n// fix_end\n"}
{"INPUT": "// fix_start\n    session.setAttribute(SessionInformations.SESSION_USER_AGENT,userAgent);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (error) {\n      return SocketState.CLOSED;\n    }\n else {\n      return SocketState.OPEN;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (disabled) {\n    attributes.addAttribute(\"disabled\",\"true\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public ImmutableMap<BuildTarget,Optional<TargetNode<?,?>>> filter(Iterable<TargetNode<?,?>> nodes){\n  Optional<TargetNode<?,?>> firstMatchingNode=StreamSupport.stream(nodes.spliterator(),false).filter(null).findFirst();\n// fix_end\n"}
{"INPUT": "// fix_start\n@Specialization protected Object doIntrinsic(long size){\n// fix_end\n"}
{"INPUT": "// fix_start\nprotected void update(Username currentUser,M pluginProfile,LocalizedOperationResult result,PluginProfileCommand command,boolean validatePluginProperties){\n// fix_end\n// fix_start\n    if (validatePluginProperties) {\n      validatePluginProperties(command,pluginProfile);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  bind(SessionManager.class).to(DefaultSessionManager.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.outputMemoryContext=operatorContext.getSystemMemoryContext().newLocalMemoryContext();\n// fix_end\n"}
{"INPUT": "// fix_start\n      Thread.sleep(100);\n// fix_end\n"}
{"INPUT": "// fix_start\n  context.getPropertiesComponent().setLocation(\"classpath:org/apache/camel/component/properties/myproperties.properties\");\n// fix_end\n"}
{"INPUT": "// fix_start\npublic <P>Iterator<P> load(Class<P> service){\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"fallthrough\") protected synchronized void updateCurrentCursor(int sourceAct,int targetAct,int status){\n// fix_end\n"}
{"INPUT": "// fix_start\n  ToolRunner.run(NutchConfiguration.create(),new LinkDbReader(),args);\n// fix_end\n"}
{"INPUT": "// fix_start\n    ResolvedJavaType assertionError=providers.getMetaAccess().lookupJavaType(AssertionError.class);\n// fix_end\n// fix_start\n    ResolvedJavaType declaringClass=methodCallTargetNode.targetMethod().getDeclaringClass();\n    if ((assertionError.isAssignableFrom(declaringClass) || runtimeException.isAssignableFrom(declaringClass)) && !controlFlowException.isAssignableFrom(exceptionType)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  NettyEndpoint e2=(NettyEndpoint)comp.createEndpoint(\"netty4://udp://localhost:8602?sync=false&udpConnectionlessSending=true\");\n// fix_end\n// fix_start\n  assertEquals(false,e1.getConfiguration().isUdpConnectionlessSending());\n  assertEquals(true,e2.getConfiguration().isUdpConnectionlessSending());\n// fix_end\n"}
{"INPUT": "// fix_start\n  vertx.createHttpServer().requestHandler(new VertxRequestHandler(vertx,deployment)).listen(8080,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (referencingEntityName == null && primaryKey == null) {\n          ignoreNotFound=true;\n        }\n else {\n          ignoreNotFound=enversService.getEntitiesConfigurations().getRelationDescription(referencingEntityName,getPropertyData().getName()).isIgnoreNotFound();\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n  String tmpFieldName=NameUtil.upperCaseFirstLetter(field.getSimpleName());\n  return String.format(\"long tmp%s = %s.readLong(); \" + \"%s = tmp%s == %s ? null : new java.util.Date(tmp%s);\",tmpFieldName,parcel,field.getName(),tmpFieldName,NULL_VALUE,tmpFieldName);\n// fix_end\n"}
{"INPUT": "// fix_start\n    String pkgName=configuration.utils.getPackageName(pkg);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (metaClass.getTheClass() != receiver.getClass()) {\n    return new PogoGetPropertySite(this,metaClass.getTheClass());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  TaskContext taskContext=TaskContext.createTaskContext(this,taskStateMachine,notificationExecutor,yieldExecutor,session,verboseStats,cpuTimerEnabled);\n// fix_end\n"}
{"INPUT": "// fix_start\n    }\n else     if (navType == NavType.ReferenceType) {\n      if (value.resourceId != 0) {\n        defaultValue=value.resourceId;\n      }\n else {\n        throw new XmlPullParserException(\"unsupported value '\" + value.string + \"' for \"+ navType.getName()+ \". Must be a reference to a resource.\");\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  ActivityCompat.PermissionCompatDelegate delegate=ActivityCompat.getPermissionCompatDelegate();\n  if (delegate != null && delegate.onActivityResult(this,requestCode,resultCode,data)) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (name.isDefault()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertCorrect(\"Ni siquiera sabe escribir su propio nombre.\");\n  assertCorrect(\"El hechizo solo dura hasta la medianoche.\");\n  assertCorrect(\"Te miras al espejo, no te agrada lo que este refleja.\");\n  assertCorrect(\"Para ser cada día mejores.\");\n  assertCorrect(\"Todo el mundo habla de los niños soldado de África\");\n// fix_end\n"}
{"INPUT": "// fix_start\n        top+=((mCellHeight * spanY) - dragOutline.getHeight()) / 2;\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(fakeJavaCodegen.toVarName(\"uSername\"),\"uSername\");\n  Assert.assertEquals(fakeJavaCodegen.toVarName(\"USERname\"),\"usERname\");\n  Assert.assertEquals(fakeJavaCodegen.toVarName(\"USERNAME\"),\"USERNAME\");\n  Assert.assertEquals(fakeJavaCodegen.toVarName(\"USER123NAME\"),\"USER123NAME\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    DenseOrderedWriter writer=new DenseOrderedWriter();\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.originalMessage=message;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (selectVars.isEmpty())   return Graql.match(pattern.getPatterns()).withGraph(graph);\n else   return Graql.match(pattern.getPatterns()).select(selectVars).withGraph(graph);\n// fix_end\n"}
{"INPUT": "// fix_start\n  getUpdater().transfer(\"minIdle\",\"minimumPoolSize\");\n  getUpdater().transfer(\"minEvictableIdleTimeMillis\",\"idleTimeout\");\n// fix_end\n// fix_start\n  getUpdater().transfer(\"timeBetweenEvictionRunsMillis\",\"maintenanceInterval\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  m_collector.sumReadMessages(metrics.messagesRead());\n  m_collector.sumWroteMessages(metrics.messagesWrote());\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n catch (  IOException ioe) {\n    try {\n      reducer.close();\n    }\n catch (    IOException ignored) {\n    }\n    try {\n      out.close(reporter);\n    }\n catch (    IOException ignored) {\n    }\n    throw ioe;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public int generate(ByteBufferPool.Lease lease,Frame frame){\n// fix_end\n"}
{"INPUT": "// fix_start\n    long t0=System.nanoTime();\n// fix_end\n// fix_start\n    ringBuffer.getPreallocated(sequence).setValue(t0);\n// fix_end\n"}
{"INPUT": "// fix_start\n  getPage().setTitle(getClass().getName());\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (line.toLowerCase().equals(\"bye\")) {\n      channel.getCloseFuture().awaitUninterruptibly();\n      break;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (datePattern.equals(CoreGlobal.ISO8601_STR)) {\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    FileInfo fileInfo=mFileSystemMaster.createFile(new AlluxioURI(path),context);\n// fix_end\n"}
{"INPUT": "// fix_start\n  try (TestWebServer server=new TestWebServer(false,2)){\n// fix_end\n// fix_start\n    Assert.assertThat(server.getInputRead(),CoreMatchers.containsString(\"scope=repository:someimage:pull,push&scope=repository:anotherimage:pull \"));\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"unchecked\") @Override public SQLRouteResult route(final String logicSQL,final List<Object> parameters,final SQLStatement sqlStatement){\n  OptimizedStatement optimizedStatement=ShardingOptimizeEngineFactory.newInstance(sqlStatement).optimize(shardingRule,shardingMetaData.getTable(),logicSQL,parameters,sqlStatement);\n// fix_end\n"}
{"INPUT": "// fix_start\n  StringBuilder buffer=new StringBuilder();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Subscription subscription=createNetworkObservable(repositoryId).subscribeOn(Schedulers.computation()).doOnSubscribe(null).doOnError(doOnError(uri)).doOnCompleted(null).subscribe(null,null);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (outputAdapter instanceof ModelAdapter)     return ((ModelAdapter<T>)outputAdapter).apply(this,new INDArray[]{inputs},new INDArray[]{inputMasks},new INDArray[]{labelMasks});\n else     return outputAdapter.apply(output(inputs,false,inputMasks,labelMasks,ws));\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate MultiTaskSlot(SlotRequestId slotRequestId,@Nullable AbstractID groupId,@Nullable MultiTaskSlot parent,CompletableFuture<? extends SlotContext> slotContextFuture,@Nullable SlotRequestId allocatedSlotRequestId){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (methodSignure.contains(\":\")) {\n    return getMethodSignureWithReturnType(returnTypeWithNumber.substring(returnTypeWithNumber.lastIndexOf(\":\") + 1),methodSignure.substring(0,methodSignure.indexOf(\":\")));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!clusterModel.deadBrokers().isEmpty() && broker.isAlive()) {\n    replicasToMove=replicasToMove.stream().filter(null).collect(Collectors.toList());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      executorService.shutdown();\n      if (!executorService.awaitTermination(15,TimeUnit.SECONDS)) {\n        executorService.shutdownNow();\n        if (!executorService.awaitTermination(15,TimeUnit.SECONDS)) {\n          throw new IOException(\"pool did not terminate\");\n        }\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  NodeEnvironment env=newNodeEnvironment(new String[0],Settings.builder().put(\"node.local_storage\",false).put(\"node.master\",false).put(\"node.data\",false).build());\n// fix_end\n// fix_start\n  final String[] paths=tmpPaths();\n// fix_end\n"}
{"INPUT": "// fix_start\n  final KStream<String,String> filteredJoinStream=joinedStream.filter(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n else     if (randomBoolean()) {\n      op=new Translog.Delete(\"_doc\",id,new Term(\"_id\",Uid.encodeId(id)),seqno++,primaryTerm,0);\n    }\n// fix_end\n// fix_start\n      op=new Translog.NoOp(seqno++,primaryTerm,\"test-\" + i);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic Collection<XSAttributeUse> getAttributeUses(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!optimizedStatement.getOrderBy().getItems().isEmpty()) {\n    return new OrderByStreamMergedResult(queryResults,optimizedStatement.getOrderBy().getItems());\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static AllocationShape buildAllocationShape(DataBuffer buffer){\n// fix_end\n// fix_start\n  shape.setOffset(buffer.originalOffset());\n  shape.setDataType(buffer.dataType());\n  shape.setLength(buffer.length());\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (doLoadingViews.contains(view)) {\n      String url=(String)view.getTag();\n      if (!StringUtils.isEmpty(url)) {\n        cancle(url);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Inject public RestMoreLikeThisAction(Settings settings,RestController controller,RestClientFactory restClientFactory){\n  super(settings,restClientFactory);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public RequestHeadersSpec<?> syncBody(Object body){\n// fix_end\n"}
{"INPUT": "// fix_start\n    Interceptor interceptor=byteCodeInstrumentor.newInterceptor(classLoader,protectedDomain,\"com.profiler.modifier.connector.interceptors.ExecuteMethodInterceptor\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (extensionRegistry == null) {\n    throw new java.lang.NullPointerException();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  ContentResponse response=client.newRequest(\"localhost\",connector.getLocalPort()).method(HttpMethod.POST).path(contextPath + servletPath).headers(null).body(content).onRequestBegin(null).onRequestCommit(null).send();\n// fix_end\n"}
{"INPUT": "// fix_start\n    @SuppressWarnings({\"rawtypes\"}) SolrRequest request=new QueryRequest(params);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (file.exists() && !file.delete()) {\n        log.warn(sm.getString(\"fileMessageFactory.deleteFail\",file));\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  newDash.isPreview=false;\n  newDash.parentId=-1;\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test public void testSumAsGivenValue(){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic String getRootPOM(EnvVars env){\n// fix_end\n// fix_start\n  if (env == null)   return rootPOM;\n  return env.expand(rootPOM);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ScriptEngine engine=Helper.getJsEngine(m);\n  if (engine == null) {\n    System.out.println(\"Warning: No js engine found; test vacuously passes.\");\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ThemeUtils.useDarkTheme()) {\n    setTheme(R.style.DirectoryPickerTheme_Dark);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate byte[] loadImgFromNet(final String imagePath){\n// fix_end\n"}
{"INPUT": "// fix_start\n  hostsToProcess=hostsToProcess.replaceAll(schemaAlterStatus.getHostName(),\"\");\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected synchronized void startInternal() throws LifecycleException {\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (x instanceof Byte || x instanceof Short)   return ((Number)x).longValue();\n else   if (x instanceof Ratio)   return longCast(((Ratio)x).bigIntegerValue());\n else   return longCast(((Number)x).doubleValue());\n// fix_end\n"}
{"INPUT": "// fix_start\n  LOG.warn(\"ByteBuffer {} leaked at: {}\",leakInfo.getResourceDescription(),leakInfo.getStackFrames());\n// fix_end\n"}
{"INPUT": "// fix_start\n            if (maxCrawlDepth == -1 || curURL.getDepth() < maxCrawlDepth) {\n              if (shouldVisit(webURL) && robotstxtServer.allows(webURL)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"RestrictedApi\") @Override public void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (existingApexPkg.getLongVersionCode() > newApexPkg.getLongVersionCode() && existingSigningDetails.checkCapability(signingDetails,PackageParser.SigningDetails.CertCapabilities.INSTALLED_DATA)) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  ShutdownRequest request=new ShutdownRequest(name);\n  invoke(request);\n// fix_end\n"}
{"INPUT": "// fix_start\n  float[] vert=vertices[index];\n  vec.x=vert[X];\n  vec.y=vert[Y];\n  if (vert.length > 2) {\n    vec.z=vert[Z];\n  }\n else {\n    vec.z=0;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  DataTree.ZxidDigest targetZxidDigest=dataTree.getDigestFromLoadedSnapshot();\n  if (targetZxidDigest != null) {\n    System.out.println(String.format(\"Target zxid digest is: %s, %s\",Long.toHexString(targetZxidDigest.zxid),targetZxidDigest.digest));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {\n// fix_end\n// fix_start\n    if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    mb.setMessage(\"Please give this job entry a name!\");\n    mb.setText(\"Specify a name\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  String rawKind=row.getString(\"type\");\n  ColumnDefinition.Kind kind=deserializeKind(rawKind);\n// fix_end\n// fix_start\n  AbstractType<?> comparator=isCQLTable ? UTF8Type.instance : CompactTables.columnDefinitionComparator(rawKind,isSuper,rawComparator,rawSubComparator);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (body instanceof Resource) {\n    outputMessage.getHeaders().setContentDispositionFormData(name,((Resource)body).getFilename());\n  }\n else   if (Resource.class.equals(resolvableType.getRawClass())) {\n    body=(T)Mono.from((Publisher<?>)body).doOnNext(null);\n  }\n else {\n    outputMessage.getHeaders().setContentDispositionFormData(name,null);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (getProperties().requestCacheEnabled().get()) {\n// fix_end\n// fix_start\n  if (getProperties().requestCacheEnabled().get()) {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic boolean saveFile(){\n  try {\n    EngineMetaInterface meta=getActiveMeta();\n    if (meta != null) {\n      return saveToFile(meta);\n    }\n  }\n catch (  Exception e) {\n    new ErrorDialog(shell,BaseMessages.getString(PKG,\"Spoon.File.Save.Fail.Title\"),BaseMessages.getString(PKG,\"Spoon.File.Save.Fail.Message\"),e);\n// fix_end\n"}
{"INPUT": "// fix_start\n  kafkaServer.produceIntoKafka(stream,topic,new KeyedSerializationSchemaWrapper<>(new SimpleStringSchema()),props,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (op.getOperator().equals(Operators.STARTS_WITH.value())) {\n    return QueryBuilders.prefixQuery(name.getName(),value.getUnquotedValue());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    return null;\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  for (  PAgentStat agentStat : agentStats) {\n    if (agentStat.hasDeadlock()) {\n      final long timestamp=agentStat.getTimestamp();\n      final PDeadlock deadlock=agentStat.getDeadlock();\n      if (CollectionUtils.hasLength(deadlock.getThreadDumpList())) {\n        agentEventBoList.add(deadlockEventBoMapper.map(agentId,startTimestamp,timestamp,deadlock));\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\npublic String mergeJavaFile(String newFileSource,String existingFileFullPath,String[] javadocTags,String fileEncoding) throws ShellException {\n  JavaFileMerger merger=new JavaFileMerger(newFileSource,existingFileFullPath,javadocTags,fileEncoding);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public boolean run(int workerId){\n// fix_end\n// fix_start\n    return entry.run(workerId);\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (targetType.isEnumType() && sourceType.equals(typeUtil.getType(stringType))) {\n    targetType=typeUtil.getType(enumType);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (LOGGER.isLoggable(Level.FINER)) {\n          LOGGER.log(FINER,\"when running {0} from {1} we are copying {2} actions whereas the item currently has {3}\",new Object[]{executable,workUnit.context.item,workUnit.context.actions,workUnit.context.item.getAllActions()});\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n@WorkerThread @RequiresPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE) @SystemApi public boolean isIccLockEnabled(){\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"resource\") protected long selectEventId(PreparedStatement insertStatement,Connection connection) throws SQLException, InvocationTargetException {\n// fix_end\n"}
{"INPUT": "// fix_start\n  mHardwareView=findViewById(R.id.hardware_view);\n// fix_end\n"}
{"INPUT": "// fix_start\nGeoHashGridAggregatorFactory(String name,ValuesSourceConfig<GeoPoint> config,int precision,int requiredSize,int shardSize,SearchContext context,AggregatorFactory<?> parent,AggregatorFactories.Builder subFactoriesBuilder,Map<String,Object> metaData) throws IOException {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (operations.containsKey(name)) {\n      List<MethodInfo> methods=operations.get(name);\n      if (methods != null && methods.size() == 1) {\n        methodInfo=methods.get(0);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  final float sr=fixRawHSLValue(s,100f,1 / 100f);\n  final float lr=fixRawHSLValue(s,100f,1 / 100f);\n// fix_end\n"}
{"INPUT": "// fix_start\n      component.pseudoClassStateChanged(PSEUDO_CLASS_EX_SMALL,pseudoClass == PSEUDO_CLASS_EX_SMALL);\n      component.pseudoClassStateChanged(PSEUDO_CLASS_SMALL,pseudoClass == PSEUDO_CLASS_SMALL);\n      component.pseudoClassStateChanged(PSEUDO_CLASS_MEDIUM,pseudoClass == PSEUDO_CLASS_MEDIUM);\n      component.pseudoClassStateChanged(PSEUDO_CLASS_LARGE,pseudoClass == PSEUDO_CLASS_LARGE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Pixmap pixmap=new Pixmap(512,1024,Pixmap.Format.RGBA8888);\n  for (int y=0; y < pixmap.getHeight(); y++) {\n    for (int x=0; x < pixmap.getWidth(); x++) {\n      pixmap.getPixel(x,y);\n    }\n  }\n  pixmap.dispose();\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  try {\n    if (contact.getParentContactGroup() != parentProtoGroup && opSetPresence != null) {\n      opSetPresence.moveContactToGroup(contact,parentProtoGroup);\n    }\n    currentParentMetaContact.removeProtoContact(contact);\n  }\n catch (  OperationFailedException ex) {\n    throw new MetaContactListException(ex.getMessage(),MetaContactListException.CODE_MOVE_CONTACT_ERROR);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Inject public RestCountAction(Settings settings,RestController controller,RestClientFactory restClientFactory){\n  super(settings,restClientFactory);\n// fix_end\n"}
{"INPUT": "// fix_start\n@JsonCreator public IndexingWorkerInfo(@JsonProperty(\"worker\") IndexingWorker worker,@JsonProperty(\"currCapacityUsed\") int currCapacityUsed,@JsonProperty(\"availabilityGroups\") Set<String> availabilityGroups,@JsonProperty(\"runningTasks\") Collection<String> runningTasks,@JsonProperty(\"lastCompletedTaskTime\") DateTime lastCompletedTaskTime,@JsonProperty(\"blacklistedUntil\") @Nullable DateTime blacklistedUntil){\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (request.getDisplayOptions().isEnableDiskCache()) {\n// fix_end\n// fix_start\n      if (HttpBitmapLoadTask.isAvailableOfFile(cacheFile,request.getDisplayOptions().getDiskCachePeriodOfValidity(),configuration,request.getName())) {\n// fix_end\n"}
{"INPUT": "// fix_start\nprotected static StringBuilder getWrappedQuery(DatabaseAdapter dbAdapter,String sqlQuery,String tableName){\n  return new StringBuilder(\"SELECT * FROM (\" + sqlQuery + \") \"+ dbAdapter.getTableAliasClause(tableName));\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (classDepth == 1 && checkClassName() && checkName(method) && checkModifiers(method) && checkType(method) && checkParams(method)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings({\"unchecked\"}) public SnapshotClusterStateProvider(Map<String,Object> snapshot){\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (matcherEntry.getName().getParameterStyle() != null && matcherEntry.getName().getParameterStyle().isExploded()) {\n// fix_end\n// fix_start\n          if (matcherEntry.getName().getValue().equals(matchedEntry.getName().getValue()) || matchedEntry.getName().getValue().matches(matcherEntry.getName().getValue())) {\n            matchedEntry.replaceValues(new ExpandedParameterDecoder(mockServerLogger).splitOnDelimiter(matcherEntry.getName().getParameterStyle(),matcherEntry.getName().getValue(),matchedEntry.getValues()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (logger.isInfoEnabled())   logger.info(\"setting image \" + image);\n// fix_end\n"}
{"INPUT": "// fix_start\n  hasProx=src.hasProx;\n// fix_end\n"}
{"INPUT": "// fix_start\n  Predicate<String> predicate=userRoles.allowedIndicesMatcher(action);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertNotNull(\"Acceptable tokens should not be null\",check.getAcceptableTokens());\n  Assert.assertNotNull(\"Default tokens should not be null\",check.getDefaultTokens());\n  Assert.assertNotNull(\"Required tokens should not be null\",check.getRequiredTokens());\n// fix_end\n"}
{"INPUT": "// fix_start\n  String address=doc.field(\"address\");\n  assertEquals(\"401 Congress Ave, Suite 2450\",address);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected SimpleDecoder<VideoDecoderInputBuffer,? extends VideoDecoderOutputBuffer,? extends VideoDecoderException> createDecoder(Format format,@Nullable ExoMediaCrypto mediaCrypto) throws VideoDecoderException {\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        if (cursor != null && cursor.getCount() == 1) {\n          cursor.moveToFirst();\n          return cursor.getString(2);\n        }\n else {\n          title=uri.getLastPathSegment();\n        }\n// fix_end\n// fix_start\n  finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\npublic DataConnectionCreator(BootStrapContext context,BufferAllocator allocator,WorkEventBus workBus,WorkerBee bee,boolean allowPortHunting){\n// fix_end\n// fix_start\n  this.dataAllocator=allocator;\n// fix_end\n"}
{"INPUT": "// fix_start\n    Transaction preparedBurnFeeTx=bsqWalletService.getPreparedBurnFeeTxForAssetListing(Coin.valueOf(listingFee));\n// fix_end\n// fix_start\n    Transaction txWithBtcFee=btcWalletService.completePreparedBurnBsqTx(preparedBurnFeeTx,opReturnData);\n// fix_end\n"}
{"INPUT": "// fix_start\n  tree.getRenderableNodes(behaviorNodeFactory).forEach(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected ExitStatus run(OptionSet options) throws Exception {\n// fix_end\n// fix_start\n  return ExitStatus.OK;\n// fix_end\n"}
{"INPUT": "// fix_start\n  }\n catch (  IOException ioe) {\n    if (!incomingFile.delete() && incomingFile.exists()) {\n      LOG.warn(\"Could not delete the staging file {} for job {}.\",incomingFile,jobId);\n    }\n    throw ioe;\n  }\n  try {\n// fix_end\n"}
{"INPUT": "// fix_start\n  final long duration=MusicPlayerRemote.getQueueDurationMillis(MusicPlayerRemote.getPosition());\n  return MusicUtil.buildInfoString(getResources().getString(R.string.up_next),MusicUtil.getReadableDurationString(duration));\n// fix_end\n"}
{"INPUT": "// fix_start\n    Long currentCount=0L;\n    if (bucketNameToCount.containsKey(bucketName)) {\n      currentCount=bucketNameToCount.get(bucketName);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static Condition ruleItem2Condition(RuleItem ruleItem){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (arg() == null)   throw new ND4JIllegalStateException(\"No arg found for op!\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (keyframe.startValue == null || keyframe.endValue == null) {\n    throw new IllegalStateException(\"Missing values for keyframe.\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    Resource number=getResource(graph,streetAddress,Label.of(\"number\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n      String type=doc.getType();\n      String id=doc.getId();\n// fix_end\n// fix_start\n      logger.error(\"no resolver found for monitoring document [class={}]\",doc.getClass().getName());\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static void registerAggregators(ValuesSourceRegistry.Builder builder){\n  builder.registerAny(ValueCountAggregationBuilder.NAME,new ValueCountAggregatorSupplier(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  Handler handler=getHandler();\n  if (handler != null) {\n    handler.postAtTime(mTicker,next);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (parent == null) {\n    criteria.andIsNull(FeedCategory_.parent.getName());\n  }\n else {\n    criteria.andEquals(FeedCategory_.parent.getName(),parent);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n        recordId.setClusterPosition(newRid.getClusterPosition());\n        recordId.setClusterId(newRid.getClusterId());\n// fix_end\n"}
{"INPUT": "// fix_start\npublic OrchestrationListenerManager(final String name,final RegistryRepository registryRepository,final ConfigurationRepository configurationRepository,final Collection<String> schemaNames){\n  configurationListenerManager=new ConfigurationListenerManager(name,configurationRepository,schemaNames);\n// fix_end\n// fix_start\n  metaDataListenerManager=new MetaDataListenerManager(name,configurationRepository,schemaNames);\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (isJson(o))   return createJsonNode(o.toString());\n else   if (o instanceof String)   return createStringNode(o.toString(),true);\n// fix_end\n"}
{"INPUT": "// fix_start\n    }\n else     if (expr instanceof SQLVariantRefExpr) {\n      SQLMethodInvokeExpr concat=new SQLMethodInvokeExpr(\"CONCAT\");\n      concat.addArgument(expr);\n      concat.addArgument(this.primary());\n      expr=concat;\n      return primaryRest(expr);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.getParent() == null && this.getXulDomContainer().getOuterContext() instanceof Shell) {\n    ((Shell)this.getXulDomContainer().getOuterContext()).setFocus();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (number instanceof BigInteger) {\n      return new BigInteger(number.toString());\n    }\n// fix_end\n// fix_start\n    if (number instanceof BigDecimal) {\n      return new BigDecimal(number.toString());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate static float measurePara(TextPaint paint,CharSequence text,int start,int end,TextDirectionHeuristic textDir){\n// fix_end\n"}
{"INPUT": "// fix_start\n  testSame(CompilerTestCase.ACTIVE_X_OBJECT_DEF,\"var x = new ActiveXObject();\",null);\n// fix_end\n"}
{"INPUT": "// fix_start\n      }\ncatch (      IllegalArgumentException e) {\n        throw new UnrecoverableHttpException(e.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  appendOptionalHandlerBody(w,Message.KEY_INFO);\n// fix_end\n"}
{"INPUT": "// fix_start\n  keyStoreFile.setLastModified(System.currentTimeMillis() + 15000);\n  sslFactory.validateReconfiguration(sslConfig);\n  sslFactory.reconfigure(sslConfig);\n  assertNotSame(\"SSL context not recreated\",sslContext,sslFactory.sslContext());\n  sslContext=sslFactory.sslContext();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (height > reqHeight || width > reqWidth) {\n    final int heightRatio=Math.round((float)height / (float)reqHeight);\n    final int widthRatio=Math.round((float)width / (float)reqWidth);\n    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (boundary.hasAttribute(\"duration\")) {\n// fix_end\n// fix_start\n      return Float.parseFloat(boundary.getAttribute(\"duration\")) * 0.001f;\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static long randomNonNegativeLong(){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static synchronized DeviceTypeLoader s_instance(){\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (i > 0)     buf.append(\", \");\n// fix_end\n// fix_start\n      buf.append(' ');\n// fix_end\n"}
{"INPUT": "// fix_start\n  mPrivateAddressCoordinator=mDeps.getPrivateAddressCoordinator(mContext,mConfig);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mView != null && mView.getParent() != null && mView.getParent() != parent) {\n    detach(mView,true);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  mLastVisibleRowIndex=-1;\n// fix_end\n"}
{"INPUT": "// fix_start\npublic boolean apply(@Nullable ItemStack input){\n  if (input == null)   return false;\n  for (  ItemStack target : this.ores)   if (OreDictionary.itemMatches(target,input,false))   return true;\n// fix_end\n"}
{"INPUT": "// fix_start\n      XContentParserUtils.parseTypedKeysObject(parser,Aggregation.TYPED_KEYS_DELIMITER,Aggregation.class,null);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static void main(String[] args){\n// fix_end\n"}
{"INPUT": "// fix_start\n  InterpreterResult result=(InterpreterResult)job.getReturn();\n  if (result == null) {\n    result=new InterpreterResult(Code.KEEP_PREVIOUS_RESULT);\n// fix_end\n"}
{"INPUT": "// fix_start\n  for (Iterator<ClassPath.Entry> it=l.iterator(); it.hasNext(); ) {\n    ClassPath.Entry e=it.next();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (classname == null || classname.isEmpty()) {\n    return \"\";\n  }\n  String allowed=classname.replaceAll(\"[^\\\\w.]\",\"\");\n  int len=allowed.length();\n  while (allowed.charAt(--len) == '.')   ;\n  String parts[]=allowed.substring(0,len + 1).split(\"\\\\.\");\n// fix_end\n// fix_start\n    String part=parts[i].trim();\n    if (!part.isEmpty()) {\n      dense.append(part.charAt(0));\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  ComplexMetrics.registerSerde(TYPE_NAME,new HllSketchMergeComplexMetricSerde());\n  ComplexMetrics.registerSerde(BUILD_TYPE_NAME,new HllSketchBuildComplexMetricSerde());\n  ComplexMetrics.registerSerde(MERGE_TYPE_NAME,new HllSketchMergeComplexMetricSerde());\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void onSuccess(String contentType,Object result){\n// fix_end\n// fix_start\n    JsonObject version=new JsonParser().parse((String)result).getAsJsonObject();\n// fix_end\n"}
{"INPUT": "// fix_start\n    final Class<T> clazz=AccessController.doPrivileged((PrivilegedAction<Class<T>>)null);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void onOpenIssueInitialization(Component component,DefaultIssue issue){\n// fix_end\n// fix_start\n    listener.onOpenIssueInitialization(component,issue);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(stage1.mappers().smartNameFieldMapper(\"age\"),nullValue());\n  assertThat(stage1.mappers().smartNameFieldMapper(\"obj1.prop1\"),nullValue());\n// fix_end\n// fix_start\n  assertThat(stage1.mappers().smartNameFieldMapper(\"age\"),notNullValue());\n  assertThat(stage1.mappers().smartNameFieldMapper(\"obj1.prop1\"),notNullValue());\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (existingApp != null) {\n          logger.debug(\"Deleted instance {} to the existing apps \",instance.getId());\n          existingApp.removeInstance(instance);\n          if (existingApp.getInstancesAsIsFromEureka().isEmpty()) {\n            applications.removeApplication(existingApp);\n          }\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected void messageReceived(ChannelHandlerContext ctx,FullHttpRequest request) throws Exception {\n// fix_end\n// fix_start\n  super.messageReceived(ctx,request);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.error(e.getMessage(),e);\n    }\n else {\n      LOGGER.error(e.getMessage());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (fut != null) {\n      Thread curTh=Thread.currentThread();\n      String threadName=curTh.getName();\n      try {\n        curTh.setName(threadName + \" (waiting \" + topVer+ \")\");\n        fut.get();\n      }\n  finally {\n        curTh.setName(threadName);\n      }\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static Process establishSSHTunnelProcess(String tunnelHost,int tunnelPort,String destHost,int destPort,boolean verbose){\n// fix_end\n"}
{"INPUT": "// fix_start\n  int pos=path.indexOf(\"repository\" + File.separator) + 11;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!classHasAnnotations(clazz)) {\n// fix_end\n// fix_start\n    }\n    for (    Class<?> innerClazz : clazz.getDeclaredClasses()) {\n      if (!classHasAnnotations(innerClazz)) {\n        writeConfigForTable(writer,innerClazz);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    LOG.warn(\"Failed to create \" + znode + \" -- check quorum servers, currenty=\"+ this.quorumServers,e);\n// fix_end\n// fix_start\n    LOG.warn(\"Failed to create \" + znode + \" -- check quorum servers, currenty=\"+ this.quorumServers,e);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n@Support({ASE,CUBRID,DB2,DERBY,FIREBIRD,H2,HSQLDB,INGRES,MYSQL,ORACLE,POSTGRES,SQLSERVER,SYBASE}) public static Field<String> currentUser(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  eventWriter.channelId(123).event(BUFFER,1,BUFFER.capacity() - 1).eventType(EventType.RAFT_EVENT).longKey(123L).position(546L).topicId(876).subscriberKey(4L).subscriptionType(SubscriptionType.TOPIC_SUBSCRIPTION);\n// fix_end\n// fix_start\n  assertThat(bodyDecoder.subscriberKey()).isEqualTo(4L);\n// fix_end\n"}
{"INPUT": "// fix_start\ndefault :\n// fix_end\n"}
{"INPUT": "// fix_start\n  Memory toLong=StringMemory.toLong(arrayKey);\n  if (toLong != null) {\n    memory.arrayKey=toLong.toLong();\n  }\n else {\n    memory.arrayKey=arrayKey;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test public void testGSI(){\n// fix_end\n"}
{"INPUT": "// fix_start\n    float tX=texture.getIconWidth() / (texture.getMaxU() - texture.getMinU());\n    float tY=texture.getIconHeight() / (texture.getMaxV() - texture.getMinV());\n// fix_end\n"}
{"INPUT": "// fix_start\n    String collectorKey=\"-XX:+UseConcMarkSweepGC\";\n    if (!commandLine.contains(collectorKey)) {\n      commandLine.add(collectorKey);\n    }\n    String occupancyFractionKey=\"-XX:CMSInitiatingOccupancyFraction=\";\n    if (commandLine.stream().noneMatch(null)) {\n      commandLine.add(occupancyFractionKey + CMS_INITIAL_OCCUPANCY_FRACTION);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    MavenEngine engine=new MavenEngine(null,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!fs.exists(taskStateStoreRootDir)) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\nif (vertex.getExecutionState() == ExecutionState.FAILED) {\nif (!vertex.hasRetriesLeft()) {\n  System.out.println(\" Vertex failed finally\");\n  this.jobStatus=InternalJobStatus.FAILING;\n  return;\n// fix_end\n// fix_start\n  this.jobStatus=InternalJobStatus.RECOVERING;\n  return;\n}\n// fix_end\n"}
{"INPUT": "// fix_start\n@Inject public RestActivateWatchAction(Settings settings,RestController controller,Client client){\n// fix_end\n"}
{"INPUT": "// fix_start\nstatic void runDMNModelInvokingPMML(final DMNRuntime runtime){\n// fix_end\n"}
{"INPUT": "// fix_start\n      String ourUserID=listener.getAccountID().getUserID();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Channel sc=sb.bind(newSocketAddress()).sync().channel();\n  InetSocketAddress addr=(InetSocketAddress)sc.localAddress();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void cleanFiles(int totalTranslogOps,long globalCheckpoint,Store.MetadataSnapshot sourceMetaData) throws IOException {\n  target.cleanFiles(totalTranslogOps,globalCheckpoint,sourceMetaData);\n// fix_end\n"}
{"INPUT": "// fix_start\n else {\n    LOGGER.debug(\"Transaction ignored since there are no credentials to authenticate\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (cfm.isSuper() && cfm.isDense()) {\n      defs.add(cfm.superColumnValueColumn());\n    }\n else {\n      for (      ColumnDefinition def : columnsWithConditions)       defs.add(def);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (httpSolrClientBuilder != null) {\n    return new LBHttpSolrClient(httpSolrClientBuilder,httpClient,solrServerUrls);\n  }\n else {\n    return new LBHttpSolrClient(httpClient,responseParser,solrServerUrls);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (json == null) {\n        throw new RestApiConnectionException(\"Failed on authentication with the following HTTP response received:\\n\" + EntityUtils.toString(httpEntity));\n      }\n// fix_end\n// fix_start\n        throw new RestApiConnectionException(\"Failed on authentication with the following HTTP response received:\\n\" + json);\n// fix_end\n"}
{"INPUT": "// fix_start\nmetadata.put(STATUS_KEY,status.name());\n// fix_end\n// fix_start\nmetadata.put(Container.STATUS_KEY,status.name());\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (startingChild instanceof ExpandableNotificationRow) {\n      ExpandableNotificationRow row=(ExpandableNotificationRow)startingChild;\n      row.onExpandedByGesture(true);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected void initializeSplit(FileInputSplit split,Long offset) throws IOException {\n  super.initializeSplit(split,offset);\n// fix_end\n"}
{"INPUT": "// fix_start\n          String.CASE_INSENSITIVE_ORDER.equals(\"Violation!\");\n// fix_end\n// fix_start\n    String.CASE_INSENSITIVE_ORDER.equals(\"Violation!\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (name.length() > 3 && name.startsWith(\"set\") && Modifier.isPublic(method.getModifiers()) && method.getParameterTypes().length == 1 && isPrimitive(method.getParameterTypes()[0])) {\n        String key=name.substring(3,4).toLowerCase() + name.substring(4);\n// fix_end\n"}
{"INPUT": "// fix_start\nForwardingRuleKeyHasher(RuleKeyHasher<HASH> firstHasher,RuleKeyHasher<HASH2> secondHasher){\n// fix_end\n"}
{"INPUT": "// fix_start\n  int xOffset=mCellLayout.getLeft() + mCellLayout.getPaddingLeft() + mDragLayer.getPaddingLeft() - mWorkspace.getScrollX();\n  int yOffset=mCellLayout.getTop() + mCellLayout.getPaddingTop() + mDragLayer.getPaddingTop() - mWorkspace.getScrollY();\n// fix_end\n"}
{"INPUT": "// fix_start\n  redefineClasses.put(\"java.util.concurrent.AbstractExecutorService\");\n  redefineClasses.put(\"java.util.concurrent.ThreadPoolExecutor\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  HTTP.Response okResource=HTTP.GET(server.baseUri().resolve(\"/webadmin/index.html\").toString());\n  HTTP.Response illegalResource=HTTP.GET(server.baseUri().resolve(\"/webadmin/css/\").toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void writeString(int fieldNumber,CharSequence value,boolean repeated) throws IOException {\n  generator.pushValue(schema,fieldNumber,new ImmutableStringValueImpl(value.toString()),repeated);\n// fix_end\n"}
{"INPUT": "// fix_start\n        sb.append(StringUtils.jsonEncodingAsString(field.toString()));\n// fix_end\n// fix_start\n      sb.append(StringUtils.jsonEncodingAsString(object.toString()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  final int activityType=getActivityType();\n// fix_end\n// fix_start\n    r.setActivityType(activityType);\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"NullAway\") public static List<Rule> compose(Collection<ExternalDependency> dependencies){\n// fix_end\n"}
{"INPUT": "// fix_start\n      trOpen=(i < t.length - 2);\n      if (trOpen)       sb.append(\"\\t<tr>\\n\");\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void addCellValue(int row,int column,String content,boolean _escapeQuotesFlag){\n  if (_escapeQuotesFlag) {\n    int idx=content.indexOf(\"\\\"\");\n    if (idx > 0 && content.indexOf(\"\\\"\",idx) > -1) {\n      content=content.replace(\"\\\"\",\"\\\\\\\"\");\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (sslSocketFactory != null) {\n    Platform.get().configureSslSocketFactory(sslSocketFactory);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<String> matchingObjects=pageSpecHandler.findAllObjectsMatchingStatements(sequenceStatement);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void loadSystems(String moduleName,Reflections reflections,NetworkMode netMode){\n// fix_end\n// fix_start\n      String id=moduleName + \":\" + system.getSimpleName();\n// fix_end\n"}
{"INPUT": "// fix_start\n  KerberosProfile profile=new KerberosProfile(ticketValidation.getGssContext());\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  while (mMapView.getZoomLevelDouble() < mMapView.getMaxZoomLevel()) {\n// fix_end\n// fix_start\n  while (mMapView.getZoomLevelDouble() < mMapView.getMaxZoomLevel()) {\n// fix_end\n"}
{"INPUT": "// fix_start\nstatic ActivityScenario<JumpToPluginActivity> launch(String partKey,Intent pluginIntent){\n// fix_end\n// fix_start\n  intent.putExtra(Constant.KEY_PLUGIN_PART_KEY,partKey);\n// fix_end\n"}
{"INPUT": "// fix_start\n    settings.insertIntermediatePoint(lat,lon,name,sz,true);\n    settings.setPointToNavigate(pt.getLatitude(),pt.getLongitude(),true,settings.getPointNavigateDescription());\n// fix_end\n"}
{"INPUT": "// fix_start\n  final int numMemoryPages=memManager.computeNumberOfPages(this.config.getMemoryDriver());\n// fix_end\n// fix_start\n  final List<MemorySegment> memory=this.memManager.allocatePages(this.parent,numMemoryPages);\n// fix_end\n"}
{"INPUT": "// fix_start\n      final Object copy=session.getEntityPersister(associatedEntityName,original).instantiate(null,session);\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (!ni.isUp()) {\n// fix_end\n// fix_start\n          if (ni.isLoopback()) {\n            return NetworkUtils.getFirstAddress(ni,stackType);\n          }\n else {\n            return NetworkUtils.getFirstNonLoopbackAddress(ni,stackType);\n          }\n// fix_end\n"}
{"INPUT": "// fix_start\n  @SuppressWarnings({\"unchecked\"}) final SolrCache<PerSegCacheKey,Shape> cache=SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void testUnfollowInjectedBeforeShrink() throws Exception {\n// fix_end\n"}
{"INPUT": "// fix_start\n  mediaButtonIntent.putExtra(RECEIVER_EXTRA_CLASS,mediaServiceClass.getName());\n  return PendingIntent.getBroadcast(context,0,mediaButtonIntent,PendingIntent.FLAG_CANCEL_CURRENT);\n// fix_end\n"}
{"INPUT": "// fix_start\n      log.error(\"DecoderException. Pipeline : {}.\",ctx.pipeline().names(),cause);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertTrue(rse.getMessage(),rse.getMessage().contains(\"Problem accessing /solr/corex/select\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void methodReached(DependencyAgent agent,MethodDependency method,CallLocation location){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  ExcelAnalysisException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (distance > mMaxDistanceForFolderCreation) {\n    if (mDragMode != DRAG_MODE_NONE) {\n      setDragMode(DRAG_MODE_NONE);\n    }\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      HttpEngine retryEngine=engine.recover(e.getLastConnectException(),null);\n// fix_end\n"}
{"INPUT": "// fix_start\n      flow=InternalLifecycleIntegration.require(activity).flow;\n// fix_end\n// fix_start\n      keyManager=InternalLifecycleIntegration.require(activity).keyManager;\n// fix_end\n"}
{"INPUT": "// fix_start\n  ConfigServerTestUtils.assertConfigEnabled(environment);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return new RegistryClient(null,serverUrl,repository).getRegistryAuthenticator();\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(DefaultGroovyMethods.toBoolean(Boolean.FALSE),Boolean.FALSE);\n  assertEquals(DefaultGroovyMethods.toBoolean(Boolean.TRUE),Boolean.TRUE);\n// fix_end\n"}
{"INPUT": "// fix_start\n    FileUtils.writeStringToFile(new File(home,\"solr.xml\"),\"<solr></solr>\",\"UTF-8\");\n// fix_end\n// fix_start\n    FileUtils.writeStringToFile(new File(coll,\"core.properties\"),\"name=SOLR_5459\",\"UTF-8\");\n// fix_end\n"}
{"INPUT": "// fix_start\n@Nullable public Typeface getFont(@StyleableRes int index,int style){\n// fix_end\n// fix_start\n  return ResourcesCompat.getFont(mContext,resourceId,mTypedValue,style);\n// fix_end\n"}
{"INPUT": "// fix_start\n            bexp.setSourcePosition(entryExpression);\n// fix_end\n// fix_start\n          cl.setSourcePosition(call);\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate static CachedConstructor findDefaultConstructor(CachedClass mixinClass){\n// fix_end\n"}
{"INPUT": "// fix_start\n  messages.add(new ViolationMessage(Rules.MULTIPLE_IMPORTS,inputFile.getCanonicalPath(),1,0,Severity.WARNING,WARNING_MSG));\n  messages.add(new ViolationMessage(Rules.TERMINATING_SEMICOLON,inputFile.getCanonicalPath(),1,18,Severity.ERROR,ERROR_MSG));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Map<String,Object> newConfigs=new HashMap<>(configs);\n// fix_end\n"}
{"INPUT": "// fix_start\n  String dataStream=\"datastream\";\n// fix_end\n// fix_start\n    assertThat(e.getMessage(),containsString(\"Cannot delete data streams that are being snapshotted: [\" + dataStream));\n// fix_end\n"}
{"INPUT": "// fix_start\n  GTreeNode viewNode=convertToViewNode(changedNode);\n  if (viewNode == null) {\n    return;\n  }\n  TreeModelEvent event=new TreeModelEvent(this,viewNode.getTreePath());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (excludes != null && includes != null) {\n    excludes=null;\n    annotation.setWarning(\"exclude\",\"exclude and of are mutually exclusive; the 'exclude' parameter will be ignored.\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  verify(logger).info(marker,\"type=COUNTER, name=us-nw.test-counter, count=100\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  gfshConnector.executeAndAssertThat(\"create disk-store --name=diskStore1 --dir=testStore\").statusIsSuccess().doesNotContainOutput(\"Did not complete waiting\");\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void testDiscoveryUsesNodesFromLastClusterState(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  GridTransactionsConfiguration tCfg=new GridTransactionsConfiguration();\n  tCfg.setTxSerializableEnabled(true);\n  c.setTransactionsConfiguration(tCfg);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n        return new DefaultOperationQuota(this.rsServices.getConfiguration(),userLimiter);\n// fix_end\n// fix_start\n        return new DefaultOperationQuota(this.rsServices.getConfiguration(),userLimiter,tableLimiter,nsLimiter);\n// fix_end\n"}
{"INPUT": "// fix_start\n  topicId=ExecuteCommandResponseEncoder.topicIdNullValue();\n// fix_end\n"}
{"INPUT": "// fix_start\n    List<VolumeConfiguration> volumes=getVolumes();\n    if (!bindMounts.isEmpty() && volumes != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  final Holder<Object> holder=getOrCreateHolder(name);\n// fix_end\n"}
{"INPUT": "// fix_start\n  IndexInput delegateInput=delegate.openInput(name,LuceneTestCase.newIOContext(randomState,context));\n  final IndexInput ii;\n  if (randomState.nextInt(500) == 0) {\n    ii=new SlowClosingMockIndexInputWrapper(this,name,delegateInput);\n  }\n else {\n    ii=new MockIndexInputWrapper(this,name,delegateInput);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  supportingFiles.add(new SupportingFile(\"pom.mustache\",\"\",\"pom.xml\").doNotOverwrite());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (value.isEmpty()) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n else {\n    parameters=new HashMap<String,String>(parameters);\n  }\n// fix_end\n// fix_start\n  this.parameters=Collections.unmodifiableMap(parameters);\n// fix_end\n"}
{"INPUT": "// fix_start\n            System.arraycopy(as,0,rs,0,n);\n// fix_end\n"}
{"INPUT": "// fix_start\n            Integer iFlags=(flags > 0) ? Integer.valueOf(flags) : null;\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void onConnectionClose(final Connection connection){\n// fix_end\n"}
{"INPUT": "// fix_start\n  final AccumuloProperties storeProperties=new AccumuloProperties();\n// fix_end\n"}
{"INPUT": "// fix_start\n  String uniqueIdxName=\"[cacheGroup=\" + ctx.group().name() + \", cache=\"+ ctx.name()+ \", idx=\"+ idx.getName()+ \"]\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!latch.await(timeout,unit) || !isDone()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    List<String> content=converter((List<String>)event.getData());\n    analysisContext.setCurrentRowAnalysisResult(content);\n// fix_end\n// fix_start\n      analysisContext.setCurrentRowAnalysisResult(content);\n// fix_end\n"}
{"INPUT": "// fix_start\n{\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (miniKeyboardObject instanceof AnyPopupKeyboard)         ((AnyPopupKeyboard)miniKeyboardObject).setIsOneKeyEventPopup(!AnyApplication.getConfig().isStickyExtensionKeyboard());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(0.0,row.getMetric(\"double\").doubleValue(),0.0);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (index != -1) {\n        return processStore(store,store.object(),location,index,accessKind,overflowAccess,store.value(),state,effects);\n      }\n else {\n        state.killReadCache(location,index);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    CustomerServiceV1 customerService=clientContext.getBean(\"org.apache.camel.itest.customerrelations.CustomerServiceV1\",CustomerServiceV1.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n      for (      String metadataStr : medadataStrings) {\n        String[] propertes=metadataStr.split(\":\");\n        Metadata md=new Metadata();\n        md.setId(new BigInteger(propertes[0]));\n        md.setObjectType(METADATA_TYPE);\n        md.setMetaKey(propertes[1]);\n        md.setMetaValue(propertes[2]);\n        metadatas.add(md);\n// fix_end\n"}
{"INPUT": "// fix_start\n  HeapMonitor.sampleEverything();\n// fix_end\n"}
{"INPUT": "// fix_start\ncatch (  IllegalStateException e) {\n    if (isRunning) {\n      throw new RuntimeException(\"Could not read next record due to: \" + StringUtils.stringifyException(e));\n    }\n else {\n      return null;\n    }\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    String browserVersionStr=optionalBrowserVersion.isPresent() ? \" \" + optionalBrowserVersion.get() : \"\";\n    log.debug(\"The driver version for {}{} is unknown ... trying with latest\",getDriverManagerType(),browserVersionStr);\n// fix_end\n"}
{"INPUT": "// fix_start\n        upgradeCatalog.updateDatabaseSchemaVersion();\n// fix_end\n"}
{"INPUT": "// fix_start\nprotected void handleGBDeviceEvent(GBDeviceEventMusicControl musicEvent){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (buffer[offset + 4] == zrtpMagic[0]) && (buffer[offset + 5] == zrtpMagic[1]) && (buffer[offset + 6] == zrtpMagic[2])&& (buffer[offset + 7] == zrtpMagic[3]);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Node parameter=null;\n  Node argument=null;\n  while (arguments.hasNext() && (parameters.hasNext() || parameter != null && parameter.isVarArgs())) {\n    if (parameters.hasNext()) {\n      parameter=parameters.next();\n    }\n    argument=arguments.next();\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"deprecation\") private static Bitmap.Config getConfig(InputStream is,DecodeFormat format){\n// fix_end\n"}
{"INPUT": "// fix_start\ndefault :\nbreak;\n// fix_end\n"}
{"INPUT": "// fix_start\n          final ConditionCol52FieldConstraintAdaptor sfcAdaptor=new ConditionCol52FieldConstraintAdaptor(cc);\n          sfcAdaptor.setFactType(p.getFactType());\n          return sfcAdaptor;\n// fix_end\n"}
{"INPUT": "// fix_start\n        @SuppressWarnings({\"rawtypes\"}) List results=new ArrayList();\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public FragmentTransaction runOnCommit(Runnable runnable){\n// fix_end\n"}
{"INPUT": "// fix_start\n      replace(BeanContext.editBean(\"editor\",bean,excludedProperties,true));\n// fix_end\n// fix_start\n  form.add(BeanContext.editBean(\"editor\",bean,excludedProperties,true));\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (mHeaderViewWrapper != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  int lineNumber=throwable.getStackTrace()[0].getLineNumber();\n  threadBoundEntity.get().view.begin(\"throw:\" + throwable.getClass().getName() + \"()\"+ \" #\"+ lineNumber).end().end();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (value.contains(\"\\n\") || value.contains(\"\\r\")) {\n    throw new IllegalArgumentException(\"Illegal literal expression: newlines (line feed or carriage return) have to be escaped\");\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public void testPersistDatafeedTimingStats(){\n// fix_end\n"}
{"INPUT": "// fix_start\n          LOG.warn(\"SpaceReserver failed to free tier {} to {} bytes used for high watermarks: \" + \"{}\",tierAlias,reservedSpace,e.getMessage());\n// fix_end\n// fix_start\n        LOG.warn(\"SpaceReserver failed to free tier {} to {} bytes used: {}\",tierAlias,reservedSpace,e.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test(enabled=false) public void geomFromTextRectangleTest(){\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  int paramCount=parameterTypes.length;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ag != null)   ag.remove();\n// fix_end\n"}
{"INPUT": "// fix_start\n  brokerConfig.setMsgTraceTopicName(\"RMQ_SYS_TRACE_TOPIC4\");\n// fix_end\n// fix_start\n  assertThat(brokerConfig.getMsgTraceTopicName()).isEqualTo(\"RMQ_SYS_TRACE_TOPIC4\");\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings(\"unchecked\") public <A>SimplePath<A> get(Path<A> path){\n// fix_end\n"}
{"INPUT": "// fix_start\n      DataType dt=update.getFieldPath().getResultingDataType();\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals((Double)10d,score);\n// fix_end\n// fix_start\n  assertEquals((Double)0.1d,score);\n// fix_end\n"}
{"INPUT": "// fix_start\n  validationFailures=ImmutableList.copyOf(in.readStringArray());\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (HyperlinkEntity.TYPE.isType(urn)) {\n    return HyperlinkEntity.fromURL(urn,score);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\ncase BLOB_ID_V5:\n// fix_end\n"}
{"INPUT": "// fix_start\n      byte new_params_bound_flag=mm.read();\n      if (new_params_bound_flag == (byte)1) {\n        for (int i=0; i < parameterSize; i++) {\n          byte[] typeArray=mm.readBytes(2);\n        }\n        for (int i=0; i < parameterSize; i++) {\n          byte length=mm.read();\n          byte[] value=mm.readBytes(length);\n          parameters.add(new String(value));\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (icon == null) {\n    return bitmap;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    serverAdmin=new OServerAdmin(dbURL).connect(iUserName,iUserPassword);\n    serverAdmin.deleteDatabase();\n// fix_end\n"}
{"INPUT": "// fix_start\n  ODistributedServerLog.info(this,getDistributedServerManager().getLocalNodeId(),getNodeSource(),DIRECTION.IN,\"delete record %s/%s v.%s oper=%d.%d\",databaseName,rid.toString(),version.toString(),runId,operationSerial);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new MultiLineStringBuilder();\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (Types.PRIMITIVES.containsKey(p.getType())) {\n        Type primitive=Types.PRIMITIVES.get(p.getType());\n        writer.append(primitive.getFullName() + \".class\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  TypeUtils.cast(json,method.getGenericParameterTypes()[0],ParserConfig.getGlobalInstance());\n// fix_end\n"}
{"INPUT": "// fix_start\n  params.x=UIUtils.getWidthPixels() / 2;\n  params.y=UIUtils.getHeightPixels() / 2;\n// fix_end\n"}
{"INPUT": "// fix_start\n@RequestMapping(\"publish\") public String publish(String path,String _csrf,HttpServletRequest request,ModelMap model){\n// fix_end\n"}
{"INPUT": "// fix_start\n  Config config=Config.embeddedDefaults(params);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void testSingleNumericFeatureAndMixedTrainingAndNonTrainingRows() throws Exception {\n// fix_end\n// fix_start\n    @SuppressWarnings(\"unchecked\") List<Map<String,Object>> importanceArray=(List<Map<String,Object>>)resultsObject.get(\"feature_importance\");\n    assertThat(importanceArray,hasSize(greaterThan(0)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  mouseListener=null;\n// fix_end\n"}
{"INPUT": "// fix_start\n else     if (culprit.functionName().equals(SkyFunctions.TRANSITIVE_TARGET)) {\n      return (Label)culprit.argument();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    return Observable.unsafeCreate(new OnSubscribeScalarFlattenIterable<T,R>(scalar,mapper));\n// fix_end\n// fix_start\n  return Observable.unsafeCreate(new OnSubscribeFlattenIterable<T,R>(source,mapper,prefetch));\n// fix_end\n"}
{"INPUT": "// fix_start\n      String classToLoad=parser.nextText();\n      if (disabledSmackClasses.contains(classToLoad)) {\n        LOGGER.info(\"Not loading disabled Smack class \" + classToLoad);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    final GeoPoint missing=new GeoPoint(missing().toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n    ContextManager.activeSpan().log(throwable);\n// fix_end\n"}
{"INPUT": "// fix_start\n  context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",STRING_FIELD_NAME,STRING_FIELD_NAME_2 + \"^5\").build()));\n// fix_end\n// fix_start\n  context.getIndexSettings().updateIndexMetaData(newIndexMeta(\"index\",context.getIndexSettings().getSettings(),Settings.builder().putList(\"index.query.default_field\",\"*\").build()));\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public ValueFetcher valueFetcher(QueryShardContext context,SearchLookup lookup,String format){\n// fix_end\n"}
{"INPUT": "// fix_start\nprivate static OptionalInt toBucketNumber(ConnectorPartitionHandle partitionHandle){\n// fix_end\n"}
{"INPUT": "// fix_start\n  writer.println(\"<tr>\");\n  writer.println(\"<td>\" + indentElement(structIndent,docType()));\n  writer.println(\"<th scope=\\\"row\\\"><i>\" + name() + \"</i>\");\n  writer.println(\"<td>\" + comment() + \"&nbsp;\");\n  writer.println(\"</tr>\");\n// fix_end\n"}
{"INPUT": "// fix_start\npublic Client testClassname(Client body) throws RestClientException {\n  Object postBody=body;\n  if (body == null) {\n    throw new HttpClientErrorException(HttpStatus.BAD_REQUEST,\"Missing the required parameter 'body' when calling testClassname\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!Bytes.equals(keyValue.getFamily(),HBaseTables.MAP_STATISTICS_SELF_CF_COUNTER)) {\n      continue;\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void writeString(int fieldNumber,CharSequence value,boolean repeated) throws IOException {\n  byte[] strbytes=value.toString().getBytes(\"UTF-8\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      builtTargets.add(((TargetCompletionValue.TargetCompletionKey)skyKey).actionLookupKey());\n// fix_end\n// fix_start\n      builtAspects.add(((AspectCompletionValue.AspectCompletionKey)skyKey).actionLookupKey());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ioc.get(Animal.class,\"f1\",ic);\n// fix_end\n"}
{"INPUT": "// fix_start\n@AwaitsFix(bugUrl=\"https://github.com/elastic/elasticsearch/issues/65089\") public void testTimeFields() throws Exception {\n// fix_end\n"}
{"INPUT": "// fix_start\nstatic <M extends Map<String,Double>>double getValFromUpperTriangularMatrix(Map<String,M> map,String fieldX,String fieldY){\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(master.getRegionNormalizerManager().getSplitPlanCount(),info.getSplitPlanCount(),0);\n  assertEquals(master.getRegionNormalizerManager().getMergePlanCount(),info.getMergePlanCount(),0);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (fileName.endsWith(COMPOUND_FILE_STORE_EXTENSION))   return true;\n// fix_end\n"}
{"INPUT": "// fix_start\n  String[] types={\"map\",\"multiMap\",\"replicatedMap\",\"queue\",\"topic\",\"set\",\"list\",\"executorService\",\"durableExecutorService\",\"scheduledExecutorService\",\"ringbuffer\",\"cardinalityEstimator\",\"idGenerator\",\"flakeIdGenerator\",\"atomicLong\",\"atomicReference\",\"countDownLatch\",\"semaphore\",\"lock\",\"reliableTopic\"};\n// fix_end\n"}
{"INPUT": "// fix_start\ncase MediaPlayer2.CALL_COMPLETED_SKIP_TO_NEXT:\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test @SuppressWarnings(\"unchecked\") public void testFindByClusterAndCommandCriteriaNoCriteria(){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public Object evaluate(final Object... args){\n// fix_end\n"}
{"INPUT": "// fix_start\n        url=Application.class.getClassLoader().getResource(assetCfg);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.mutableList=Lists.mutable.of(METALLICA,\"Bon Jovi\",\"Europe\",\"Scorpions\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  myFixture.configureByFile(pathSuffix + getTestName(true) + \".java\");\n// fix_end\n// fix_start\n  myFixture.checkResultByFile(pathSuffix + getTestName(true) + \"_after.java\",true);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test public void nonAsciiPasswordHasCorrectHash() throws Exception {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!configurationMap.containsKey(CONFIG_DATABASE_PREFIX + databaseName)) {\n    updateCachedDatabaseConfiguration(databaseName,cfg.getDocument(),false,true);\n    setDatabaseStatus(nodeName,databaseName,DB_STATUS.SYNCHRONIZING);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  capturingFuncRefNode.setCapturedName(captured.name);\n// fix_end\n"}
{"INPUT": "// fix_start\n    assertThat(outer).hasCauseThat().hasMessageThat().isEqualTo(\"failure message\");\n    assertThat(outer).hasMessageThat().isEqualTo(\"Call failed after 1 retry attempts: \" + \"Call failed after 1 retry attempts: \" + \"Call failed after 1 retry attempts: failure message\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (o instanceof JsFunction) {\n    return ((JsFunction)o).value;\n  }\n else   if (o instanceof Function) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mUpdateApp.isHideDialog()) {\n      onBackPressed();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  double[] ret=new double[arr.length()];\n  for (int i=0; i < arr.length(); i++) {\n    ret[i]=arr.getDouble(i);\n  }\n  return Vectors.dense(ret);\n// fix_end\n"}
{"INPUT": "// fix_start\n  for (int i=0; i < mFilterTypes.size(); i++) {\n    mWeakBitmaps.add(i,null);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static Object typeConvert(String columnName,String value,int sqlType,String mysqlType){\n// fix_end\n// fix_start\nlogger.error(\"table: {} column: {}, failed convert type {} to {}\",columnName,value,sqlType);\n// fix_end\n"}
{"INPUT": "// fix_start\n    String protocol=(sslField != null) ? \"https\" : \"http\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  String authorMod=AuthorList.fixAuthor_lastNameFirst(author,false);\n// fix_end\n// fix_start\n  authorMod=xmlChars.format(authorMod).replace(\"&#44;\",\",\");\n  int endOfLastName=authorMod.indexOf(\",\");\n  WSITools.tokenize(v,authorMod.substring(endOfLastName + 1).trim(),\" \\n\\r\");\n  if (endOfLastName >= 0)   v.add(authorMod.substring(0,endOfLastName));\n// fix_end\n"}
{"INPUT": "// fix_start\n@CheckForNull public PermissionTemplateDto selectTemplateByKey(String templateKey){\n// fix_end\n// fix_start\n    return mapper.selectByKey(templateKey);\n// fix_end\n"}
{"INPUT": "// fix_start\n      instructions.addAll(memberBytecode.getInstructions());\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (    IllegalAccessException iae) {\n      getLogger().error(sm.getString(\"standardContext.applicationListenerIAE\",listeners[i]),iae);\n      ok=false;\n    }\ncatch (    Throwable t) {\n// fix_end\n"}
{"INPUT": "// fix_start\n).retry(1).blockingSingle();\n// fix_end\n"}
{"INPUT": "// fix_start\n      sReminderDialog=null;\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static List<InclusiveByteRange> satisfiableRanges(Enumeration<String> headers,long size){\n// fix_end\n// fix_start\n    String header=headers.nextElement();\n// fix_end\n"}
{"INPUT": "// fix_start\n          if (STATUS.equals(key)) {\n            sb.append(participantData.get(key));\n// fix_end\n// fix_start\n            sb.append(Rlog.pii(TAG,participantData.get(key)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(healthResponse.isTimedOut(),equalTo(true));\n  assertThat(healthResponse.getStatus(),equalTo(ClusterHealthStatus.RED));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Objects.requireNonNull(settings);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(Layout.TEXT_SELECTION_LAYOUT_LEFT_TO_RIGHT,(long)layouts.get(0));\n  assertEquals(Layout.TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT,(long)layouts.get(1));\n// fix_end\n"}
{"INPUT": "// fix_start\n          descriptor.stopForMigration();\n// fix_end\n"}
{"INPUT": "// fix_start\n  SoftMax softmax=new SoftMax(linspace.dup());\n  Nd4j.getExecutioner().exec(softmax);\n  assertEquals(linspace.rows(),softmax.z().sum(Integer.MAX_VALUE).getDouble(0),1e-1);\n  assertFalse(softmax.z().equals(softmax.x()));\n  assertFalse(softmax.z().equals(linspace));\n// fix_end\n"}
{"INPUT": "// fix_start\n    return fluxReturnValue.transformDeferred(io.github.resilience4j.reactor.circuitbreaker.operator.CircuitBreakerOperator.of(circuitBreaker));\n// fix_end\n// fix_start\n    return monoReturnValue.transformDeferred(CircuitBreakerOperator.of(circuitBreaker));\n// fix_end\n"}
{"INPUT": "// fix_start\nbreak;\ncase Closed:\nLOG.debug(prefix(\"ZooKeeper client closed, ignoring\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    if (!this.masterPasswordProviderHelper.loadConfig(this.masterPasswordConfig.getProviderName()).isLoginEnabled()) {\n      return false;\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Unable to load master password provider config\",e);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  @QMUICommonListItemOrientation int orientation=array.getInt(R.styleable.QMUICommonListItemView_qmui_orientation,HORIZONTAL);\n  @QMUICommonListItemAccessoryType int accessoryType=array.getInt(R.styleable.QMUICommonListItemView_qmui_accessory_type,ACCESSORY_TYPE_NONE);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    sessionCallback.reset();\n    sendMediaKeyInputToController(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE);\n    sendMediaKeyInputToController(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE);\n    mWaitLock.wait(TIME_OUT_MS);\n    assertTrue(sessionCallback.mOnSkipToNextCalled);\n// fix_end\n"}
{"INPUT": "// fix_start\nbreak;\ncase R.id.btn_observable:\nintent=new Intent(MainActivity.this,ObservableActivity.class);\nbreak;\ncase R.id.btn_double_binding:\nintent=new Intent(MainActivity.this,DoubleBindingActivity.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n    handleInboundMessage(ctx,msg);\n// fix_end\n"}
{"INPUT": "// fix_start\n    mouseSelection=false;\n// fix_end\n"}
{"INPUT": "// fix_start\n  connection=wrapConnection(connection);\n// fix_end\n"}
{"INPUT": "// fix_start\n      flushInterval=Integer.parseInt(var);\n// fix_end\n"}
{"INPUT": "// fix_start\n    innerHitsBuilder=new InnerHitsBuilder(in);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (Const.isEmpty(wStepname.getText()))   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  adjustIndicator(getMyApplication(),groupPosition,isExpanded,convertView,!nightMode);\n// fix_end\n"}
{"INPUT": "// fix_start\n  builder.addLiteralSchema(\"\\nALTER TABLE A USING TTL 20 MINUTES ON COLUMN C2 BATCH_SIZE 10 MAX_FREQUENCY 3;\");\n// fix_end\n// fix_start\n  builder.addLiteralSchema(\"\\nALTER TABLE A USING TTL 20 MINUTES ON COLUMN C2 BATCH_SIZE 10 MAX_FREQUENCY 3 MIGRATION TO TARGET X;\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  final int expectedRetryCount=taskDefinition == null ? 0 : Optional.ofNullable(workflowTask).map(null).orElse(taskDefinition.getRetryCount());\n  if (!task.getStatus().isRetriable() || SystemTaskType.isBuiltIn(task.getTaskType()) || expectedRetryCount <= retryCount) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(zeroBytes,diskThresholdSettings.getFreeBytesThresholdFloodStage());\n  assertEquals(5.0D,diskThresholdSettings.getFreeDiskThresholdFloodStage(),0.0D);\n  assertTrue(diskThresholdSettings.isAutoReleaseIndexEnabled());\n// fix_end\n"}
{"INPUT": "// fix_start\n  serializer.writeReference(object);\n// fix_end\n"}
{"INPUT": "// fix_start\npublic GroupingProjector(List<? extends Symbol> keys,List<Input<?>> keyInputs,CollectExpression<Row,?>[] collectExpressions,AggregateMode mode,AggregationContext[] aggregations,RamAccounting ramAccounting,MemoryManager memoryManager,Version minNodeVersion,Version indexVersionCreated){\n// fix_end\n"}
{"INPUT": "// fix_start\ncase OFFSET_FOR_LEADER_EPOCH:\nreturn new OffsetsForLeaderEpochResponse(struct);\n// fix_end\n"}
{"INPUT": "// fix_start\n  short refContainerId=(short)(TestUtils.RANDOM.nextInt(Short.MAX_VALUE - 1) + 2);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final Map<String,Analyzer> fieldAnalyzers=new HashMap<String,Analyzer>();\n// fix_end\n"}
{"INPUT": "// fix_start\n      final String keyStoreType=keystorePath.endsWith(\".p12\") ? \"PKCS12\" : \"jks\";\n      KeyStore keyStore=KeyStore.getInstance(keyStoreType);\n// fix_end\n"}
{"INPUT": "// fix_start\n else {\n    mPacFileUrl=Uri.EMPTY;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  super();\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void jobFinished(JobParameters params,boolean needsReschedule){\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean includeTypeName=request.paramAsBoolean(INCLUDE_TYPE_NAME_PARAMETER,true);\n  if (includeTypeName == false && types.length > 0) {\n    throw new IllegalArgumentException(\"Cannot set include_type_name=false and specify\" + \" types at the same time.\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean useAggregationPipeline=query.hasAggregations() || query.distinct() || query.count() && query.limit().isPresent();\n// fix_end\n"}
{"INPUT": "// fix_start\n        System.err.println(upe.getMessage());\n// fix_end\n// fix_start\n        System.err.println(re.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((names == null))   throw new java.lang.NullPointerException(\"names cannot be null\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertArrayEquals(backward[0].shape(),in1.shape());\n  assertArrayEquals(backward[1].shape(),in2.shape());\n// fix_end\n"}
{"INPUT": "// fix_start\n  shardId=new ShardId(in);\n// fix_end\n"}
{"INPUT": "// fix_start\n    }\n    if (BindingUtil.hasAnnotation(binding,Nonnull.class)) {\n      return \" __nonnull\";\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (pinnedBounds != null && tempPinnedTaskBounds == null) {\n      stack.onPipAnimationEndResize();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  typeCheck(\"var x = {}; x.y - 3; x.y = 5;\",TypeCheck.INEXISTENT_PROPERTY);\n// fix_end\n"}
{"INPUT": "// fix_start\n    params.put(\"osm_image\",imageValue);\n// fix_end\n// fix_start\n    params.put(\"osm_mapillary_key\",mapillaryValue);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Bitmap mainBitmap=(composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(),bounds.height(),Bitmap.Config.ARGB_8888) : null;\n// fix_end\n"}
{"INPUT": "// fix_start\n    showMessage(R.string.press_again_to_exit,R.string.press_again_to_exit);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final DefaultMapResultHandler<K,V> mapResultHandler=new DefaultMapResultHandler<K,V>(mapKey);\n// fix_end\n// fix_start\n  Map<K,V> selectedMap=mapResultHandler.getMappedResults();\n// fix_end\n"}
{"INPUT": "// fix_start\n  mInfoWindow=null;\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    if (prefixKey.isNested(key)) {\n      String suffixKey=key.substring(prefixKey.length() + 1);\n// fix_end\n"}
{"INPUT": "// fix_start\n  for (  CFURLFileSystemProperty o : l) {\n    array.add(o.value());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (getIsUnitTest()) {\n    throw new SecurityException(\"attempted to render plaintext ‘\" + o + \"’ in password field; use a getter of type Secret instead\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\nvoid startPreview(TransferImage targetImage,File source,String imgUrl,TransferConfig config,int position){\n// fix_end\n// fix_start\n    File cache=source == null ? config.getImageLoader().getCache(imgUrl) : source;\n    if (cache != null) {\n      try {\n        targetImage.setImageDrawable(new GifDrawable(cache.getPath()));\n      }\n catch (      IOException ignored) {\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (discoveryNode != null) {\n      InetAddress inetAddress=discoveryNode.getPrivateAddress().getInetAddress();\n      if (!inetAddress.isLoopbackAddress()) {\n        multicastSocket.setInterface(inetAddress);\n      }\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    instanceResponse=new DataTable();\n    instanceResponse.addException(QueryException.getException(QueryException.INTERNAL_ERROR,e));\n// fix_end\n"}
{"INPUT": "// fix_start\n  result=null;\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressWarnings({\"unchecked\"}) public HeatmapJsonFacet(NamedList<Object> heatmapNL){\n// fix_end\n"}
{"INPUT": "// fix_start\n    }\n  }\n  Series<Header> series=(Series<Header>)request.getAttributes().get(HeaderConstants.ATTRIBUTE_HEADERS);\n  if (series != null) {\n    String type=series.getFirstValue(Exchange.CONTENT_TYPE);\n    if (type != null) {\n      inMessage.setHeader(Exchange.CONTENT_TYPE,type);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(ReflectionUtils.findNestedClasses(OuterClass.class,null)).isEmpty();\n  assertThat(ReflectionUtils.findNestedClasses(RecursiveInnerInnerClass.class,null)).isEmpty();\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    if (includeSchema) {\n      includeClusterDefinitions=true;\n      includeInfo=true;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    TestMgr.check(408,e.getStatus().getStatusCode());\n    TestMgr.check(true,e.getErrorData().toString().contains(\"CommonExceptionData [message=Request Timeout. Details:\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (schemaLanguage == null) {\n    throw new NullPointerException(\"schemaLanguage == null\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (LOGGER.isDebugEnabled()) {\n          LOGGER.error(e.getMessage(),e);\n        }\n else {\n          LOGGER.error(e.getMessage());\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n    final Class<?> mgmtFactory=Class.forName(\"java.lang.management.ManagementFactory\",true,cl);\n    final Class<?> runtimeClass=Class.forName(\"java.lang.management.RuntimeMXBean\",true,cl);\n    final Class<?>[] noParams=new Class<?>[0];\n    final Method mxBeanMethod=mgmtFactory.getMethod(\"getRuntimeMXBean\",noParams);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (entriesToSort == null) {\n      result.addAll(bibDatabaseContext.getDatabase().getEntries());\n    }\n else {\n      result.addAll(entriesToSort);\n    }\n// fix_end\n// fix_start\n  if (entriesToSort == null) {\n    sorted.addAll(bibDatabaseContext.getDatabase().getEntries());\n  }\n else {\n    sorted.addAll(entriesToSort);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  shadowNewBitmap.createdFromBitmap=src;\n  shadowNewBitmap.createdFromX=x;\n  shadowNewBitmap.createdFromY=y;\n  shadowNewBitmap.createdFromWidth=width;\n  shadowNewBitmap.createdFromHeight=height;\n  shadowNewBitmap.createdFromMatrix=matrix;\n  shadowNewBitmap.createdFromFilter=filter;\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  final BufferedImage img=new BufferedImage(20,20,BufferedImage.TYPE_INT_ARGB_PRE);\n// fix_end\n// fix_start\n  g.dispose();\n// fix_end\n"}
{"INPUT": "// fix_start\n  main.addRoutesBuilder(new BarRouteBuilder());\n  main.addRoutesBuilder(new FooRouteBuilder());\n// fix_end\n"}
{"INPUT": "// fix_start\n    NetworkKey key=NetworkKey.createFromScanResult(scanResult);\n    if (key != null) {\n      mScanResultKeys.add(key);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try (InputStream privKey=this.location.getInputStream()){\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (checkPseudoHeader(header,_status))       _status=staticField.getIntValue();\n// fix_end\n// fix_start\nif (checkPseudoHeader(header,_status)) _status=field.getIntValue();\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean force=restRequest.paramAsBoolean(DataFrameField.FORCE.getPreferredName(),false);\n  StartDataFrameTransformAction.Request request=new StartDataFrameTransformAction.Request(id,force);\n// fix_end\n"}
{"INPUT": "// fix_start\n    lang=lang.getDefaultCountry();\n// fix_end\n"}
{"INPUT": "// fix_start\n    PostingsEnum termPostingsEnum=slowR.postings(new Term(\"id\",entry.getKey()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(proto.get(0)).isSameInstanceAs(existingProto);\n// fix_end\n"}
{"INPUT": "// fix_start\n  variants.add(createLookupElement(goPsi,name,goChildPsi).withTypeText(\"builtin\",true));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(conf,(Configuration)serializeDeserialize(conf));\n// fix_end\n"}
{"INPUT": "// fix_start\n  filter=new ShieldActionFilter(Settings.EMPTY,authcService,authzService,cryptoService,auditTrail,shieldLicenseState,new ShieldActionMapper(),new HashSet<>(),threadPool);\n// fix_end\n"}
{"INPUT": "// fix_start\n    final Set<String> supportedProtocols=ImmutableSet.copyOf(SSLContext.getDefault().createSSLEngine().getSupportedProtocols());\n// fix_end\n"}
{"INPUT": "// fix_start\nconnected(downloaderEvent.getDownloader(),downloaderEvent.getDownloader().getEtag(),downloaderEvent.getDownloader().isResuming(),downloaderEvent.getDownloader().getSmallFileSoFarBytes(),downloaderEvent.getDownloader().getSmallFileTotalBytes());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return !new ProtoSourceFileBlacklist(ruleContext,getProtoToolchainProvider().blacklistedProtos()).checkSrcs(protoInfo.getOriginalTransitiveProtoSources(),\"cc_proto_library\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (batch.getSchema() != null && batch.getSchema().getSelectionVectorMode() != SelectionVectorMode.NONE)   throw new UnsupportedOperationException(\"Only batches without selections vectors are writable.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  p.apply(BigQueryIO.read().from(options.getInput())).apply(new MaxMeanTemp()).apply(BigQueryIO.writeTableRows().to(options.getOutput()).withSchema(schema).withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_IF_NEEDED).withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_TRUNCATE));\n// fix_end\n"}
{"INPUT": "// fix_start\n      e.handleCause();\n// fix_end\n"}
{"INPUT": "// fix_start\n      List<List<String>> checkList=new ArrayList<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n    Errors.fatal(handlerClass,LocalizationMessages.NON_INSTANTIABLE_COMPONENT(handlerClass));\n// fix_end\n"}
{"INPUT": "// fix_start\n).ignoreElement();\n// fix_end\n"}
{"INPUT": "// fix_start\n  createAndStartJetty(legacyExampleCollection1SolrHome(),jettyConfig);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return ImmutableList.of(new MkdirStep(getProjectFilesystem(),outputPrefix.getParent()),new RmStep(getProjectFilesystem(),getHeaderOutputPath(outputPrefix),true),new RmStep(getProjectFilesystem(),getSourceOutputPath(outputPrefix),true),new YaccStep(getProjectFilesystem(),yacc.getCommandPrefix(getResolver()),flags,outputPrefix,getResolver().deprecatedGetPath(input)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\"){\n// fix_end\n"}
{"INPUT": "// fix_start\n  final URLCollection urls=new URLCollection(new ArrayList<>());\n// fix_end\n"}
{"INPUT": "// fix_start\n  record.setRecordKey(generateKey(record));\n// fix_end\n"}
{"INPUT": "// fix_start\n  chunk=new byte[buffer.remaining() - 10];\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(makeResourceFilter(\"en\",\"hdpi\",FilterBehavior.FILTER_IN_ANALYSIS_WITH_DYNAMIC_CONFIGURATION).filterDependencyContainers(errorConsumer,resourceContainers)).isSameAs(resourceContainers);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ImageReference targetImage=ConfigurationPropertyValidator.getGeneratedTargetDockerTag(jibExtension.getTargetImage(),gradleProjectProperties.getEventDispatcher(),getProject().getName(),getProject().getVersion().toString(),gradleHelpfulSuggestionsBuilder.build());\n// fix_end\n"}
{"INPUT": "// fix_start\n      basicBundleInfo.setIsMBundle(baseBasicBundleInfo.getIsMBundle());\n// fix_end\n"}
{"INPUT": "// fix_start\n    code.startLine(\"/* \").addMultiLine(comment).add(\" */\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  String ballerinaVersion=RepoUtils.getBallerinaPackVersion();\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (method.getDeclaringClass().isAssignableFrom(XAConnection.class)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    count=countItems();\n// fix_end\n"}
{"INPUT": "// fix_start\n  AgentInformation agentInfo=new DefaultAgentInformation(\"agentId\",\"appName\",System.currentTimeMillis(),1111,\"hostname\",\"127.0.0.1\",ServiceType.USER,JvmUtils.getSystemProperty(SystemPropertyKey.JAVA_VERSION),Version.VERSION);\n// fix_end\n"}
{"INPUT": "// fix_start\n    lc.stop();\n// fix_end\n"}
{"INPUT": "// fix_start\n  bashCommand.runInBackground();\n// fix_end\n"}
{"INPUT": "// fix_start\n    RxHelper.safeObservable(Notification.save(notificationThreadModels)).subscribe();\n// fix_end\n"}
{"INPUT": "// fix_start\n    final String reason=randomAlphaOfLength(16);\n// fix_end\n"}
{"INPUT": "// fix_start\n        value=((NonTXEntry)entry).getRegionEntry().getValueRetain(region,true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super.guardStmtByLogLevel=new HashMap<>(1);\n// fix_end\n"}
{"INPUT": "// fix_start\n    lc.reset();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Collection<BeanRegistration<RedisClient>> registrations=beanContext.getActiveBeanRegistrations(RedisClient.class);\n// fix_end\n"}
{"INPUT": "// fix_start\napiType=userEV.getApiEventType();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (ServerName.isSameAddress(favoredNodes.get(p.ordinal()),server)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      throw new IllegalStateException(\"cannot use driverClassName and dataSourceClassName together.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  defaultCredentialRetrievers.setCredentialHelper(jibExtension.getTo().getCredHelper());\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.annotations=Collections.unmodifiableSet(new LinkedHashSet<>(asList(method.getAnnotations())));\n// fix_end\n"}
{"INPUT": "// fix_start\n  task.createTask(onTop,true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  SqlMetaDataBo sqlMetaDataBo=new SqlMetaDataBo(sqlMetaData.getAgentId(),sqlMetaData.getAgentStartTime(),sqlMetaData.getSqlId());\n// fix_end\n"}
{"INPUT": "// fix_start\n        source=new StoredScriptSource(id.substring(0,split),source.getSource(),Collections.emptyMap());\n// fix_end\n"}
{"INPUT": "// fix_start\n  TraceContext parent=newTraceContext(SamplingFlags.SAMPLED);\n// fix_end\n"}
{"INPUT": "// fix_start\n    newSnapshot.seekForward(memorySnapshot.position());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertTrue(objFromJson.equalsNoSubscriptionIdNoStartDateNoCTD(input));\n// fix_end\n"}
{"INPUT": "// fix_start\n      ticket.notifyAll();\n// fix_end\n"}
{"INPUT": "// fix_start\n  String fname=getFileContents().getFileName();\n// fix_end\n"}
{"INPUT": "// fix_start\n  AsyncHttpClientConfig config=new AsyncHttpClientConfig.Builder().setCompressionEnabled(true).setFollowRedirect(false).setConnectionTimeoutInMs(15000).setRequestTimeoutInMs(15000).setAllowPoolingConnection(false).setDisableUrlEncodingForBoundRequests(true).setIOThreadMultiplier(2).build();\n// fix_end\n"}
{"INPUT": "// fix_start\n    List<ParseGeoPoint> coordinates=new ArrayList<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!newMetaInfo.canRestoreFrom(stateTable.getMetaInfo())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    Graql.parser().parseReader(queryReader).forEach(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  message.add(new ClientMessage.Frame(new byte[100],UNFRAGMENTED_MESSAGE | FINAL));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Spider.create(diaoyuwengProcessor).pipeline(new FilePipeline()).pipeline(pipeline).scheduler(new FileCacheQueueScheduler(\"/data/temp/webmagic/cache/\")).run();\n// fix_end\n"}
{"INPUT": "// fix_start\n).subscribeOn(getScheduler()).observeOn(getScheduler()).subscribe(new DefaultSubscriber<Long>(){\n// fix_end\n"}
{"INPUT": "// fix_start\n      return new NamedEnumValueMapper();\n// fix_end\n"}
{"INPUT": "// fix_start\n  getSupportFragmentManager().beginTransaction().addToBackStack(this.toString()).replace(R.id.activity_main,new MainFragment(),this.toString()).commit();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new DocFreqValueSource.ConstIntDocValues(ReaderUtil.getTopLevelContext(readerContext).reader().numDocs(),this);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (searchBookAdapter.getSearchBooks().get(index).getIsAdd()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  String fieldName=rarely() ? FieldSortBuilder.DOC_FIELD_NAME : randomAlphaOfLengthBetween(1,10);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (dontBother.containsKey(name)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"Unknown parameter [\" + propertyName + \"] ; did you mean \"+ StringUtils.findSimilar(propertyName,knownOptions);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!group.hasOperationPermissionDefined()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    user.setAdministrator(isAdmin(accountName));\n// fix_end\n"}
{"INPUT": "// fix_start\n    return ImageTool.getNormalBitmap(data);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final String table=Iterables.getOnlyElement(dataSource.getTableNames());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Optional.ofNullable(ItemTags.getContainer().get(new Identifier(category))).map(null).orElse(Collections.emptyList()).stream().map(null).collect(Collectors.toSet());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ObjectMapper mapper=jsonMapperBuilder().withConfigOverride(String[].class,null).build();\n// fix_end\n"}
{"INPUT": "// fix_start\n  mTestCarContext.getCarService(TestAppManager.class).addTemplateReturned(top,top.onGetTemplate());\n// fix_end\n"}
{"INPUT": "// fix_start\n  FileObject noteDir=rootDir.resolveFile(note.getId(),NameScope.CHILD);\n// fix_end\n"}
{"INPUT": "// fix_start\n  cache=this.context.cache();\n// fix_end\n"}
{"INPUT": "// fix_start\n),value.getSegmentId(),value.getInterval()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  EasyMock.expect(requestMock.getService()).andReturn(configurationMock);\n// fix_end\n"}
{"INPUT": "// fix_start\n  executor.getExecRoot().createDirectoryAndParents();\n// fix_end\n"}
{"INPUT": "// fix_start\n  project.addProcedure(ArbitraryDurationProc.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  SearchResponse searchResponse=client().prepareSearch(\"test\").setTypes(\"type\").setSource(new SearchSourceBuilder().query(QueryBuilders.matchAllQuery()).docValueField(\"test_field\")).get();\n// fix_end\n"}
{"INPUT": "// fix_start\n    _optimizationResult=new OptimizationResult(_removeBrokersRunnable.computeResult(),null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final File[] stateDirs=taskCreator.stateDirectory().listNonEmptyTaskDirectories();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Long categoryId=getParaToLong(\"categoryId\",scope,0L);\n// fix_end\n"}
{"INPUT": "// fix_start\n  N nodeV=nodeConnections.get(nodeU).adjacentNode(edge);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final SettableListenableFuture<WebSocketSession> future=new SettableListenableFuture<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n      resourcesMap.put(parentFolderName,new HashSet<>());\n// fix_end\n"}
{"INPUT": "// fix_start\n      LOGGER.trace(\"Successfully decoded value. Result in Base64-encoding is [{}]\",payload);\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<AbstractExpression> exprs=ExpressionUtil.uncombinePredicate(filters);\n// fix_end\n"}
{"INPUT": "// fix_start\n    topicName=ParserUtil.getQualifiedNameCaseSensitive(context.qualifiedName());\n// fix_end\n"}
{"INPUT": "// fix_start\n    assertTrue(requestedCluster.satisfies(nodeCluster));\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<Element> elements=elementBiz.getAllElementPermissions();\n// fix_end\n"}
{"INPUT": "// fix_start\n    Utils.writeUtf8File(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML());\n// fix_end\n"}
{"INPUT": "// fix_start\n  solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button));\n// fix_end\n"}
{"INPUT": "// fix_start\n    return new RandomScoreFunction(seed,salt,context.getForField(context.getFieldType(fieldName)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  asyncResult.whenCompleteWithContext(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  processorTarget.addDeploymentProcessor(JSFExtension.SUBSYSTEM_NAME,Phase.PARSE,Phase.PARSE_JSF_MANAGED_BEANS,new JSFManagedBeanProcessor());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ctx.log().whenAvailable(RequestLogProperty.REQUEST_START_TIME,RequestLogProperty.REQUEST_HEADERS,RequestLogProperty.NAME,RequestLogProperty.SESSION).thenAccept(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final HandlerResult result=this.authenticationHandler.authenticate(CoreAuthenticationTestUtils.getCredentialsWithDifferentUsernameAndPassword(\"u1\",\"p1\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(DriverStrategy.COLLECTOR_MAP,mapper.getDriverStrategy());\n// fix_end\n"}
{"INPUT": "// fix_start\n  QueryMutability.test(query,cat.id,cat.name);\n// fix_end\n"}
{"INPUT": "// fix_start\n  intsScratch.values[0]=ordinal;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (SimpleBlobStoreFactory.isRemoteCacheOptions(options) || GrpcActionCache.isRemoteCacheOptions(options)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  add(new TypeAnnotation(expectedType)).describe(TypeAnnotation.EXPECTED_ROLE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  paint.setColor(ContextCompat.getColor(SeatModeActivity.this,R.color.seat_y_bg));\n// fix_end\n"}
{"INPUT": "// fix_start\n  lp.height=lp.MATCH_PARENT;\n// fix_end\n"}
{"INPUT": "// fix_start\n  final RefreshLayout refreshLayout=(RefreshLayout)findViewById(R.id.refreshLayout);\n// fix_end\n"}
{"INPUT": "// fix_start\n    this.yearMatchers.add(new AlwaysTrueValueMatcher());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ByteBuffer buff=ByteBuffer.allocate(WebSocketImpl.RCVBUF);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.version.onOrAfter(Version.LUCENE_43)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (MapRouteInfoMenu.isVisible()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n else     if (combinedSchema.getCriterion() == CombinedSchema.ANY_CRITERION || combinedSchema.getCriterion() == CombinedSchema.ONE_CRITERION) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    type=BVM.resolveMatchingTypeForUnion(this,type);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Loggers.RPC.info(\"client disconnected,clear config listen context, connetionId is {}\",connect.getConnectionId());\n// fix_end\n"}
{"INPUT": "// fix_start\n    return (HFileBlock)HFileBlock.BLOCK_DESERIALIZER.deserialize(buf,true,MemoryType.EXCLUSIVE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  debugPanel.clickOnButton(DebugPanel.DebuggerActionButtons.STEP_OUT);\n// fix_end\n"}
{"INPUT": "// fix_start\n      hRef=new HistoryReference(Model.getSingleton().getSession(),HistoryReference.TYPE_SCANNER_TEMPORARY,msg);\n// fix_end\n"}
{"INPUT": "// fix_start\n  maxSetupTime=2000;\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (Setting.showVideo && type.contains(Type.VIDEO)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  span.a(context.getSessionsPageLink(folder),Styles.EL_SESSION).text(\"Sessions\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    OGlobalConfiguration.CACHE_LOCAL_ENABLED.setValue(false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ensureGreen(ReindexIndexClient.REINDEX_ALIAS);\n// fix_end\n"}
{"INPUT": "// fix_start\n  transportService.registerRequestHandler(ACTION_NAME,null,ThreadPool.Names.SNAPSHOT,new VerifyNodeRepositoryRequestHandler());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Collections.addAll(reservedWords,SQLConstants.SQL2003_KEYWORDS);\n// fix_end\n"}
{"INPUT": "// fix_start\n    MutableSpan processorSpan=testSpanHandler.takeLocalSpan();\n// fix_end\n"}
{"INPUT": "// fix_start\n  mSignatureAction.setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.ic_vpn_key_grey_24dp,0);\n// fix_end\n"}
{"INPUT": "// fix_start\n          if (version.before(Version.V_2_0_0_beta1)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  game.setMode(Mode.PLAYER);\n// fix_end\n"}
{"INPUT": "// fix_start\n      logger.debug(\"Failed to obtain file icon from JFileChooser.\",e1);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ((TextView)(holder.itemView)).setText(item.mText + \"(\" + item.mId+ \")\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  for (  Collector queryCollector : percolateCollector.facetAndAggregatorCollector) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    File testingJar=TestUtils.findFile(\"..\",new TestUtils.TestJarFinder(\"flink-yarn-tests\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  StringReader sr=new StringReader(prefs.get(JabRefPreferences.IMPORT_FILENAMEPATTERN));\n// fix_end\n"}
{"INPUT": "// fix_start\n    callback.onPulseFinished();\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!r.finishing && r.okToShowLocked() && r.visibleIgnoringKeyguard) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      ClientMessage request=CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.timeDefinition=timeDefinition == null ? TimeDefinitions.RecordTimeDefinition.instance() : timeDefinition;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (output.ordering() != 'f' || !Shape.hasDefaultStridesForShape(output))   output=workspaceMgr.dup(ArrayType.ACTIVATION_GRAD,output,'f');\n// fix_end\n"}
{"INPUT": "// fix_start\n        tasksQueue.removeNode(org.apache.dolphinscheduler.common.Constants.DOLPHINSCHEDULER_TASKS_QUEUE,nodeValueSb.toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n  data.putInt(KeychainIntentService.TARGET,KeychainIntentService.IO_FILE);\n// fix_end\n"}
{"INPUT": "// fix_start\ncase ClusterMapConfig.OLD_STATE_MODEL_DEF:\n// fix_end\n"}
{"INPUT": "// fix_start\n  double gamma=Math.max(dgg / gg,0.0);\n// fix_end\n"}
{"INPUT": "// fix_start\n      data.dimensionUpdateRowMeta.addValueMeta(rowMeta.getValueMeta(data.fieldnrs[i]));\n// fix_end\n"}
{"INPUT": "// fix_start\n    logger.error(\"/exists service error\",throwable.getMessage(),throwable);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return subscriberContext(Operators.discardLocalAdapter(type,discardHook));\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.description.setText(getContext().getString(R.string.ConversationListItemAction_archived_conversations_d,thread.getCount()));\n// fix_end\n"}
{"INPUT": "// fix_start\n      DBCSession session=dataSource.openSession(monitor,DBCExecutionPurpose.UTIL,\"Set session defaults ...\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (isRunningAgainstOldCluster() && getOldClusterVersion().before(Version.V_7_0_0)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return to(failed,uri(id),\"some payload\").setHeader(Message.HEADER_CONVERSATION_ID,\"some id\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (isCentreButtonIconColorFilterEnabled || isCentreButtonSelectable)   centreButton.getDrawable().setColorFilter(inActiveCentreButtonIconColor,PorterDuff.Mode.SRC_IN);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Configuration config=new Configuration.Overridden(Configuration.COMMAS){\n// fix_end\n"}
{"INPUT": "// fix_start\n    attributes.setSize(a.getDimensionPixelSize(com.cengalabs.flatui.R.styleable.FlatSeekBar_size,Attributes.DEFAULT_SIZE_PX));\n// fix_end\n"}
{"INPUT": "// fix_start\n  context.sendOrderedBroadcastAsUser(intent,UserHandle.SYSTEM,android.Manifest.permission.MASTER_CLEAR,new BroadcastReceiver(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (o == null)   throw new ServiceException.NotFoundException(String.format(\"Organization %s not found\",name));\n// fix_end\n"}
{"INPUT": "// fix_start\n      SubProcess subProcess=(SubProcess)bpmnModel.getFlowElement(executionEntity.getActivityId());\n// fix_end\n"}
{"INPUT": "// fix_start\n    byte[] b2=new byte[readLength];\n// fix_end\n"}
{"INPUT": "// fix_start\ntype=TypeInfo.TYPE_STRING;\n// fix_end\n"}
{"INPUT": "// fix_start\n  String sqlScript=table.getAllSqlWhere(false,true,WRAPPER_ENTITY_DOT);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (BVM.checkIsLikeType(this,memberType)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    long timeout=mService.mAmInternal.inputDispatchingTimedOut(windowState.mSession.mPid,aboveSystem,reason);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final RefreshLayout refreshLayout=(RefreshLayout)findViewById(R.id.refreshLayout);\n// fix_end\n"}
{"INPUT": "// fix_start\n    contactList.setShowOffline(!ConfigurationManager.isShowOffline());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return ResponseUtils.buildURL(base,rest,null,URLType.SERVICE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  RoutedCollectPhase collectNode=getCollectNode(Arrays.asList(new Reference(new ReferenceIdent(relationName,\"id\"),RowGranularity.DOC,DataTypes.INTEGER,null),new Reference(new ReferenceIdent(relationName,\"date\"),RowGranularity.SHARD,DataTypes.TIMESTAMPZ,null)),routing,WhereClause.MATCH_ALL);\n// fix_end\n"}
{"INPUT": "// fix_start\n  jdbcTemplate.update(INSERT_PERSON,1,firstName,\"Blair\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  ingestDocument.setFieldValue(IngestDocument.Metadata.INDEX.getFieldName(),dynamicIndexName);\n// fix_end\n"}
{"INPUT": "// fix_start\n  mActionBarProgressView=getLayoutInflater().inflate(R.layout.actionbar_indeterminate_progress_actionview,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (newInstance instanceof InvocationSubstitute<?> == false) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    System.out.println(\"10-CV RMSE = \" + Math.sqrt(rss / n));\n// fix_end\n"}
{"INPUT": "// fix_start\nitem.url=soundMessageContent.remoteUrl;\n// fix_end\n"}
{"INPUT": "// fix_start\n      LOG.info(\"Saved output of task '\" + attemptId + \"' to \"+ jobOutputPath);\n// fix_end\n"}
{"INPUT": "// fix_start\n      return new TaskResult(TaskResult.Status.FATAL_FAILED,\"Exit code: \" + exitCode);\n// fix_end\n"}
{"INPUT": "// fix_start\n  PostingsEnum postingsEnum=TestUtil.docs(random(),reader,term.field,term.bytes,null,null,PostingsEnum.NONE);\n// fix_end\n"}
{"INPUT": "// fix_start\n    metadata.put(DiscoveryConstant.SPRING_APPLICATION_UUID,UUID.randomUUID().toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n  bind(HttpRequestTemplate.Parser.class).asEagerSingleton();\n// fix_end\n"}
{"INPUT": "// fix_start\n  UiObject2 shortcut=deepShortcutsContainer.getChildren().get(0).findObject(getSelectorForId(R.id.bubble_text));\n// fix_end\n"}
{"INPUT": "// fix_start\n        childWidthMeasureSpec=getChildMeasureSpec(widthMeasureSpec,getPaddingStart() + getPaddingEnd() + width,childParams.width);\n// fix_end\n"}
{"INPUT": "// fix_start\n  StepKey actualKey=LifecycleExecutionState.getCurrentStepKey(lifecycleState);\n// fix_end\n"}
{"INPUT": "// fix_start\n      ShardSearchRequest request=new ShardSearchRequest(indexShard.shardId().index().name(),indexShard.shardId().id(),indexMetaData.numberOfShards(),SearchType.QUERY_THEN_FETCH).source(entry.source()).types(entry.types());\n// fix_end\n"}
{"INPUT": "// fix_start\n        getFutils().openFile(OTGUtil.getDocumentFile(encryptBaseFile.getPath(),MainActivity.this,false),MainActivity.this);\n// fix_end\n"}
{"INPUT": "// fix_start\n        SubProcess subProcess=(SubProcess)bpmnModel.getFlowElement(executionEntity.getActivityId());\n// fix_end\n"}
{"INPUT": "// fix_start\n  conf.set(HADOOP_SECURITY_AUTHENTICATION,SIMPLE.toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(name,indexed,stored,hasDocValues,TextSearchInfo.SIMPLE_MATCH_WITHOUT_TERMS,meta);\n// fix_end\n"}
{"INPUT": "// fix_start\n    shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.shortcuts_menu_with_notifications_description),KeyEvent.KEYCODE_S,KeyEvent.META_CTRL_ON));\n// fix_end\n"}
{"INPUT": "// fix_start\n      PostingsEnum positions=tis.postings(reader.getLiveDocs(),null,PostingsEnum.POSITIONS);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (params.height == LayoutParams.MATCH_PARENT) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(200,statusCode);\n// fix_end\n"}
{"INPUT": "// fix_start\n  zipkin.setHostName(\"localhost\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    Log.d(TAG,\"Starting new prediction on word '%s'.\",word);\n// fix_end\n"}
{"INPUT": "// fix_start\n      throw new RuntimeException(\"Could not retrieve generatedKeys\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    return CryptoUtils.createCryptoError(\"Invalid uninitialized key\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(subject.execute(parse),is(2));\n// fix_end\n"}
{"INPUT": "// fix_start\n  TimedTransRunner timedTransRunner=new TimedTransRunner(\"test/org/pentaho/di/run/denormaliser/DenormaliserMultiKey.ktr\",LogWriter.LOG_LEVEL_ERROR,AllRunTests.getOldTargetDatabase(),AllRunTests.getNewTargetDatabase(),rowCount * 1000);\n// fix_end\n"}
{"INPUT": "// fix_start\n  defaultTextured=Assets.getMaterial(\"engine:prog.defaultTextured\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  testBalanceWithCrossValidation(\"smalldata/weather.csv\",23,ari(0,1,22),2,10);\n// fix_end\n"}
{"INPUT": "// fix_start\n  databaseDocumentTx.command(new OCommandSQL(\"CREATE CLASS TestRenameClusterNew extends TestRenameClusterOriginal clusters 2\")).execute();\n// fix_end\n"}
{"INPUT": "// fix_start\n            String.CASE_INSENSITIVE_ORDER.equals(\"My number is greater than yours\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  tester.checkScalarExact(\"ASCII(_UTF8'\\u03a9')\",\"937\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  String queryString=\"match (father: $x) isa parentship; $x has gender $g; $g == 'female'; get;\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  throw new NacosException(exception.getErrCode(),\"failed to req API:\" + api + \" after all servers(\"+ servers+ \") tried: \"+ exception.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n  final String[] dirs=dirName.split(\"\\\\/|\\\\\\\\\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  cfg.setDataStorageConfiguration(new DataStorageConfiguration().setWalMode(WALMode.LOG_ONLY).setDefaultDataRegionConfiguration(new DataRegionConfiguration().setPersistenceEnabled(true).setMaxSize(300L * 1024 * 1024)));\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new NotFoundException(String.format(\"The results for paged traverser with id [%s] have been fully enumerated\",traverserId));\n// fix_end\n"}
{"INPUT": "// fix_start\n  instances.add(serviceInstance(serviceName,true,host,port,map));\n// fix_end\n"}
{"INPUT": "// fix_start\n  rvCertificate.setHasFixedSize(true);\n// fix_end\n"}
{"INPUT": "// fix_start\n    scene.getStylesheets().setAll(\"/io/bitsquare/gui/bitsquare.css\",\"/io/bitsquare/gui/images.css\",\"/io/bitsquare/gui/CandleStickChart.css\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return false;\n// fix_end\n"}
{"INPUT": "// fix_start\n  Pattern pattern=Pattern.compile(\"(?:bolt(?:\\\\+routing)?|neo4j(?:\\\\+s|\\\\+ssc)?)://([^-]+)(-(.+))?.databases.neo4j.io$\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(2,settings.size());\n// fix_end\n"}
{"INPUT": "// fix_start\n@GET(\"/post/{disscussionId}/comment\") Observable<CommentList> getDisscussionComments(@Path(\"disscussionId\") String disscussionId,@Query(\"start\") String start,@Query(\"limit\") String limit);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!log.contains(\"C.java:1:1: compiler.err.not.in.module.on.module.source.path\"))   throw new Exception(\"expected output not found\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (cs.matches(\"(com|java|javax|jdk|sun)\\\\.[A-Za-z.]+\"))       continue;\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.inMemoryFormat=isNotNull(inMemoryFormat,\"inMemoryFormat\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(al.sizeInMemory()).isEqualTo(54);\n// fix_end\n"}
{"INPUT": "// fix_start\n  dataSource.setUrl(\"jdbc:mock:TraceFilterTest_commit_error\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return html.replaceAll(\"(?i)<(br[\\\\s/]*|/*p.*?|/*div.*?)>\",\"\\n\").replaceAll(\"<[script>]*.*?>|&nbsp;\",\"\").replaceAll(\"\\\\s*\\\\n+\\\\s*\",\"\\n　　\").replaceAll(\"^[\\\\n\\\\s]+\",\"　　\").replaceAll(\"[\\\\n\\\\s]+$\",\"\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(flowEdge.getId(),Joiner.on(\"_\").join(node1,node2,edgeName));\n// fix_end\n"}
{"INPUT": "// fix_start\n else     if (oldVersion < 49) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  DataStorageConfiguration memCfg=new DataStorageConfiguration().setDefaultDataRegionConfiguration(new DataRegionConfiguration().setMaxSize(200L * 1024 * 1024).setPersistenceEnabled(true)).setWalMode(WALMode.LOG_ONLY).setWalSegmentSize(512 * 1024);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return new DatabaseDataType(\"[float](53)\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  perfRule.assertDurationAround(Long.valueOf(prof.getProperty(\"Xoo Highlighting Sensor\")),8900L);\n// fix_end\n"}
{"INPUT": "// fix_start\n    String structuredContentTypeId=persistencePackage.getCustomCriteria()[3];\n// fix_end\n"}
{"INPUT": "// fix_start\n    cpuLoadBoBuilder.jvmCpuLoad(0.6);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertTrue(latch.await(10,TimeUnit.SECONDS));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(statsDTO.size()).isEqualTo(2);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new IllegalStateException(\"Unable to configure Redis to keyspace notifications. See https://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent\",ex);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (reader == null)   throw new IllegalArgumentException(\"reader must not be null\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Thread.sleep(15000);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return DECIMAL_COMMA_PATTERN.matcher(text).replaceAll(\"$1\" + DECIMAL_COMMA_SUBST + \"$2\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  String authorizeUrl=getAuthorizeUrl(\"my-less-trusted-client\",\"https://anywhere.com\",\"read\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(NAME,ImmutableList.of(comparableTypeParameter(\"K\"),typeParameter(\"V\")),\"map(K,array(V))\",ImmutableList.of(\"K\",\"V\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  String queryStr=\"CREATE TABLE users (usertime bigint, userid varchar, regionid varchar, gender varchar) \" + \"WITH (kafka_topic = 'users_topic', value_format='json', key = 'userid');\";\n// fix_end\n"}
{"INPUT": "// fix_start\n          Log.warn(\"Client acknowledges stanzas that we didn't send! Client Ack h: {}, our last stanza: {}\",h,unacknowledgedServerStanzas.getLast().x);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(\"DELETE gc FROM guide_category AS gc LEFT JOIN guide AS g ON g.id_guide = gc.id_guide WHERE gc.tenant_id = 1000 AND g.title IS NULL LIMIT 5\",sqlInfo.getSql());\n// fix_end\n"}
{"INPUT": "// fix_start\n).setPlaySource(list).setChargeTie(true,60).startPlay();\n// fix_end\n"}
{"INPUT": "// fix_start\n  from(\"mina:tcp://127.0.0.1:\" + getPort() + \"?sync=true&codec=#hl7codec\").unmarshal().hl7().process(new Processor(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  kafkaProducer.setSyncSend(false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final Arbitrary<Object> failingGen=Gen.fail(\"yay! (this is a negative test)\").arbitrary();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!(mDatas.get(0) instanceof Integer) && mDatas.size() > 4) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new HiveClientException(\"H200 Unable to get table columns\",e);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(\"We have all the items via GameData\",392,Item.REGISTRY.getKeys().size());\n// fix_end\n"}
{"INPUT": "// fix_start\n    System.out.println(\"Nothing to delete, user does not exist.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(\"failed to parse field [field] of type [boolean] in document with id '1'\",ex.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n  request.addParameter(\"Version\",\"2011-01-01\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(2,consumerCounter.size());\n// fix_end\n"}
{"INPUT": "// fix_start\n        out.write(\" style=\\\"font-weight: normal; text-align:left;\\\" \");\n// fix_end\n"}
{"INPUT": "// fix_start\n        ymlFileWriter.append(String.format(\"%s:%n  '%s'%n\",key,StringEscapeUtils.escapeHtml(metricKey.getDescription().replace(\"'\",\"''\"))));\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(\"%nExpecting elements:%n<%s>%n to be at least %s times <%s>\",actual,times,condition);\n// fix_end\n"}
{"INPUT": "// fix_start\n  context.getAccessTokenRequest().set(\"redirect_uri\",\"https://nowhere.com\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(map.size(),is(3));\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new FlinkHiveUDFException(\"Failed to instantiate java constant object inspector\",e);\n// fix_end\n"}
{"INPUT": "// fix_start\n  fieldMetaModels.add(new FieldMetaModel(this,\"getCommentedNode\",\"setCommentedNode\",\"commentedNode\",int.class,null,true,true,false,false));\n// fix_end\n"}
{"INPUT": "// fix_start\n  selenium.open(\"test_type_page1.html\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  fromF(\"netty4:tcp://localhost:%s?sync=true&textline=true\",port1).to(\"mock:before\").toF(\"netty4:tcp://localhost:%s?sync=true&textline=true\",port2).to(\"mock:after\");\n// fix_end\n"}
{"INPUT": "// fix_start\n@Test(timeout=9000) public void testDeadlockDetected_ThreeThreadsInVector() throws InterruptedException {\n// fix_end\n"}
{"INPUT": "// fix_start\n  String exp=\"{list1:[\\\"aaa\\\"],list2:[\\\"aaa\\\"]}\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  String usage=\"java org.apache.lucene.demo.IndexFiles\" + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\" + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  int STORAGE_PERIOD=10;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (Functions.isWindows() && String.valueOf(x2).contains(\"java.nio.file.FileSystemException\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(\"size\",\"Size metrics\",\"/org/sonar/plugins/core/widgets/size.html.erb\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    numDocs=atLeast(546);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new InvalidModificationException(\"Invalid put operation. $ is not a map\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  exchangeSpecification.setPlainTextUri(\"http://api.bitcoincharts.com\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  database.execSQL(\"CREATE TABLE IF NOT EXISTS \" + MigrationDb.Entity4.TABLE_NAME + \" (`id` INTEGER NOT NULL, `name` TEXT COLLATE NOCASE, PRIMARY KEY(`id`),\"+ \" FOREIGN KEY(`name`) REFERENCES `Entity1`(`name`)\"+ \" ON UPDATE NO ACTION ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED)\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (path.length() > 1 && path.charAt(0) == '/') {\n// fix_end\n"}
{"INPUT": "// fix_start\n  String url=\"https://y.qq.com/download/import/QQMusic-import-1.2.1.zip1\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.setBlockFords(properties.getBool(\"block_fords\",false));\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.showImageFromFlag=preferences.getBoolean(PREFERENCE_SHOW_IMAGE_FROM_FLAG,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  conf.set(\"dfs.secondary.http.address\",infoBindAddress + \":\" + infoPort);\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean terminated=group.awaitTermination(20,TimeUnit.SECONDS);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (0 == current ? \"\" : \"-\" + current);\n// fix_end\n"}
{"INPUT": "// fix_start\n  BlockingReadHandler<ChannelBuffer> reader=new BlockingReadHandler<>(new ArrayBlockingQueue<ChannelEvent>(100,false));\n// fix_end\n"}
{"INPUT": "// fix_start\n  InputStream is=WalletJSONTest.class.getResourceAsStream(\"/org/knowm/xchange/taurus/dto/account/example-accountinfo-data.json\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    return CryptoUtils.createCryptoError(\"Invalid uninitialized key\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  JsonNode json=assertResponse(client.get(\"/management/experimental/api-docs\")).hasStatusCode(200).getJsonObject();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Verify.notNull(namespaceName,\"applicableNamespace\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    out.println(\"def %s(): %s = get(%s).asInstanceOf[%s]\",getter,type,index,type);\n// fix_end\n"}
{"INPUT": "// fix_start\n,SQLException.class,\"Table \\\"INTEGER\\\" not found\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  String ldapUrl=\"ldap://54.200.235.244:389\";\n// fix_end\n"}
{"INPUT": "// fix_start\ngetDriver().notifyConnected();\n// fix_end\n"}
{"INPUT": "// fix_start\n  verify(renormalizer).shutdown();\n// fix_end\n"}
{"INPUT": "// fix_start\n  setExceptionListener(conf.getExceptionListener());\n// fix_end\n"}
{"INPUT": "// fix_start\n  getConfigurators().addFirst(EJBValidationConfigurator.INSTANCE);\n// fix_end\n"}
{"INPUT": "// fix_start\n    Log.d(\"ASH\",\"import: \" + key + \":\"+ value);\n// fix_end\n"}
{"INPUT": "// fix_start\n  TestRobot.testStatic(getActivity(),\"Tests/TrimPathFill.json\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  mAppsCustomizePane.requestFocus();\n// fix_end\n"}
{"INPUT": "// fix_start\n    builder.setSockets(new ArrayList<WithLogId>(transports));\n// fix_end\n"}
{"INPUT": "// fix_start\n  throwExceptionIfClosed();\n// fix_end\n"}
{"INPUT": "// fix_start\n    subscriber.ifPresent(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(2,comparator.compare(\"/hotels/{hotel}\",\"/hotels/{hotel}.*\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n    mOnionServer.setPassword(\"foobar\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.setBorder(null);\n// fix_end\n"}
{"INPUT": "// fix_start\n      canalDestination.setDynamicTopicPartitionNum(mqConfig.getDynamicTopicPartitionNum());\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.protonTransport.setEmitFlowEventOnSend(false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  provider.setPreviousDataTableVariables(Arrays.asList(metadata.previousDataTableVariables()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  args.expandSystemProperties();\n// fix_end\n"}
{"INPUT": "// fix_start\n  assumeTrue(\"test runs only when at least a type is registered\",getCurrentTypes().length > 0);\n// fix_end\n"}
{"INPUT": "// fix_start\n    onChangeListener.onChange(view.generateJs());\n// fix_end\n"}
{"INPUT": "// fix_start\n    LogUtil.e(httpException.toString() + \", url: \" + queryUrl);\n// fix_end\n"}
{"INPUT": "// fix_start\n  CommitLog.instance.resetUnsafe();\n// fix_end\n"}
{"INPUT": "// fix_start\n  byteCodeInstrumentor.checkLibrary(classLoader,className);\n// fix_end\n"}
{"INPUT": "// fix_start\n    device.executeShellCommand(\"monkey \" + \"-p \" + appPackageName + \" -c android.intent.category.LAUNCHER 1\",new MultiLineReceiver(){\n      @Override public void processNewLines(      String[] lines){\n      }\n      @Override public boolean isCancelled(){\n        return false;\n      }\n    }\n);\n// fix_end\n"}
{"INPUT": "// fix_start\n      s.destroy();\n// fix_end\n"}
{"INPUT": "// fix_start\n    nc.values(0,nc.len());\n// fix_end\n"}
{"INPUT": "// fix_start\n  mods.add(minecraft);\n// fix_end\n"}
{"INPUT": "// fix_start\n  suite.addTest(new JUnit4TestAdapter(LoggerSerializationTest.class));\n// fix_end\n"}
{"INPUT": "// fix_start\n  addListener(new CloseListener(){\n    public void windowClose(    CloseEvent e){\n      if (getMainWindow() != SamplerWindow.this) {\n        SamplerApplication.this.removeWindow(SamplerWindow.this);\n      }\n    }\n  }\n);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertQuery(\"(SELECT * FROM (VALUES 1) EXCEPT SELECT * FROM (VALUES 0))\" + \"EXCEPT (SELECT * FROM (VALUES 1) EXCEPT SELECT * FROM (VALUES 1))\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  ackDBCompleteness(query);\n// fix_end\n"}
{"INPUT": "// fix_start\n  poller.close();\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.scheduler.getListenerManager().addJobListener(new CronJobListener());\n// fix_end\n"}
{"INPUT": "// fix_start\n        ConcurrentLog.logException(e);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertTrue(\"We should get the data from the DataHandle\",data.getDataSource().getInputStream().available() > 0);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(1,request.getHeaders().values(\"Content-Length\").size());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ref.close();\n// fix_end\n"}
{"INPUT": "// fix_start\n    parseContext.combineNamedFilters(context);\n// fix_end\n"}
{"INPUT": "// fix_start\n        getSherlockActivity().removeStickyBroadcast(intent);\n// fix_end\n"}
{"INPUT": "// fix_start\n    log.info(\"Var received: id: [{}:{}/<{}>];\",var.id().first(),var.id().second(),var.name());\n// fix_end\n"}
{"INPUT": "// fix_start\n  checkArgument(rest.length <= Integer.MAX_VALUE - 1,\"the total number of elements must fit in an int\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  transactionEngine.redo(map);\n// fix_end\n"}
{"INPUT": "// fix_start\n  initializeCompiler(compilable);\n// fix_end\n"}
{"INPUT": "// fix_start\n  overScrollAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationEnd(    Animator animation){\n      if (onTop) {\n        mTopOverScrollAnimator=null;\n      }\n else {\n        mBottomOverScrollAnimator=null;\n      }\n    }\n  }\n);\n// fix_end\n"}
{"INPUT": "// fix_start\n  bind(WorkspaceProjectsSyncer.class).asEagerSingleton();\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.server.registerProcessor(CommandType.REMOVE_TAK_LOG_REQUEST,requestProcessor,requestProcessor.getExecutor());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ViewUtils.computeFitSystemWindows(this,mBaseInnerInsets,mBaseContentInsets);\n// fix_end\n"}
{"INPUT": "// fix_start\n    translog.trimUnreferencedReaders();\n// fix_end\n"}
{"INPUT": "// fix_start\n  tokenFiltersBindings.processTokenFilter(\"hunspell\",HunspellTokenFilterFactory.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  internalRequest.extraSource(request.extraSource());\n// fix_end\n"}
{"INPUT": "// fix_start\n    tryAndUpdatePredictedApps();\n// fix_end\n"}
{"INPUT": "// fix_start\n  updateDiffstate(\"resolutions\",Json.createObject());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assertions.assertNotEquals(0,transfer.min_transfer_time);\n// fix_end\n"}
{"INPUT": "// fix_start\n      recoveringEngine.initializeMaxSeqNoOfUpdatesOrDeletes();\n// fix_end\n"}
{"INPUT": "// fix_start\n  instancesListTable.getTree().setLargeModel(true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  addMigration(V20200722110800_AddBuiltinRoles.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  updateDensity(r);\n// fix_end\n"}
{"INPUT": "// fix_start\n    commandContext.getAttachmentManager().deleteAttachmentsByTaskId(taskId);\n// fix_end\n"}
{"INPUT": "// fix_start\n  sqlSessionFactory.setTypeHandlersPackage(\"com.baomidou.mybatisplus.test.base.type\");\n// fix_end\n"}
{"INPUT": "// fix_start\n        context.nextToken();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertTrue(driver.getPageSource().contains(\"servlet logout ok\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  resultReceiver.onReceive(spiedContext,intent);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.setHideable(false);\n// fix_end\n"}
{"INPUT": "// fix_start\n    METRICS_HELPER.assertCounter(MetricsAssignmentManagerSource.ASSIGN_METRIC_PREFIX + \"SubmittedCount\",2,amSource);\n// fix_end\n"}
{"INPUT": "// fix_start\n      controller.getOperandStack().doGroovyCast(ClassHelper.boolean_TYPE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  newconfig.setPassword(cfg.getPassword());\n// fix_end\n"}
{"INPUT": "// fix_start\n  NDArrays.factory().setOrder('f');\n// fix_end\n"}
{"INPUT": "// fix_start\n  buildParams.add(\"-D_TARGET_IMAGE=ignored\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  icon.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);\n// fix_end\n"}
{"INPUT": "// fix_start\n    currVariable.setArr(op.z());\n// fix_end\n"}
{"INPUT": "// fix_start\n  rootView.findViewById(R.id.gridView).setVisibility(View.GONE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  createTransactionCheck(optionsGroup);\n// fix_end\n"}
{"INPUT": "// fix_start\n      shardingItemFutureTask.setExecutorService(executorService);\n// fix_end\n"}
{"INPUT": "// fix_start\n  contentView.setClickable(true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  builder.allowBlockingCallsInside(\"io.netty.util.concurrent.GlobalEventExecutor\",\"addTask\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertWarnings(\"Should clauses in the filter context will no longer automatically set the minimum should\" + \" match to 1 in the next major version. You should group them in a [filter] clause or explicitly set\" + \" [minimum_should_match] to 1 to restore this behavior in the next major version.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      installedApp.setPermissions(appFromMarket.getPermissions());\n// fix_end\n"}
{"INPUT": "// fix_start\n  overlay.put(\"oryx.serving.api.key-alias\",\"oryxtest\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    msgLog.logMessage(\"Exception in MasterImpl\",t);\n// fix_end\n"}
{"INPUT": "// fix_start\n      conn.setRequestProperty(\"Content-Type\",\"application/octet-stream\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    Locale.setDefault(locale);\n// fix_end\n"}
{"INPUT": "// fix_start\n    dismiss();\n// fix_end\n"}
{"INPUT": "// fix_start\n  deployment.setDelegateBearerErrorResponseSending(true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  target.add(parent.getFeedbackPanel());\n// fix_end\n"}
{"INPUT": "// fix_start\n  ((TextView)getView().findViewById(android.R.id.empty)).setText(R.string.contact_selection_group_activity__no_contacts);\n// fix_end\n"}
{"INPUT": "// fix_start\n  test.setI16OptionalField((short)14);\n// fix_end\n"}
{"INPUT": "// fix_start\n  OLogManager.instance().info(this,\"Storage '%s' is created under OrientDB distribution : %s\",getURL(),OConstants.getVersion());\n// fix_end\n"}
{"INPUT": "// fix_start\n  packageLoader.notifyListeners(p);\n// fix_end\n"}
{"INPUT": "// fix_start\n  bind(RequestProcessor.AcceptingContext.class).to(DefaultAcceptingContext.class).in(RequestScope.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n      pds.getDriverProperties().put(\"currentSchema\",dsProps.getProperty(\"defaultSchema\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEqualsNoOrder(messages.toArray(),resultMessages.toArray(),\"arrays are different: \" + toString(messages) + \" - \"+ toString(resultMessages));\n// fix_end\n"}
{"INPUT": "// fix_start\n  getSelectionActionModeHelper().onSelectionAction();\n// fix_end\n"}
{"INPUT": "// fix_start\n  queryMixin.getMetadata().setValidate(false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  mNotificationIconAreaController.dozeTimeTick();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (updateActor != null) {\n    updateActor.send(new SequenceActor.PushSeq(seq));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (outMessageRefElement != null) {\n      String outMessageRef=this.resolveName(outMessageRefElement.getText());\n      if (this.messages.containsKey(outMessageRef)) {\n        MessageDefinition outMessage=this.messages.get(outMessageRef);\n        operation.setOutMessage(outMessage);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (queryInfo != null) {\n    cancelLeafStage(queryInfo.getOutputStage());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (queue != null) {\n    queue.close();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (filter != null) {\n      if (filter.include(dependencyArtifact)) {\n        artifacts.add(dependencyArtifact);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (renderer.batch != null) {\n    renderer.batch.begin();\n    renderer.batch.drawText(renderer.font,\"Keys: (d) dynamic, (s) static, (k) kinematic\",0,app.getGraphics().getHeight(),Color.WHITE);\n    renderer.batch.end();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (acl != null) {\n    for (    ACL a : acl) {\n      if (!retval.contains(a)) {\n        retval.add(a);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (objectTypeNode.initFunction != null) {\n    this.visit(objectTypeNode.initFunction);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (disposables != null) {\n    disposables.dispose();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (context != null) {\n        context.setResult(succeed);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.queue != null) {\n    this.queue.dequeue(this.index);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (focusedDay != null) {\n      focusDay(focusedDay.getDay());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (activity != null) {\n    activity.hideConversationsOverview();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (mLoginWebView != null) {\n        mLoginWebView.setVisibility(View.GONE);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (dataSource != null) {\n      dataSource.subscribe(listDataSource.new InternalDataSubscriber(),CallerThreadExecutor.getInstance());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (invalidateListener != null) {\n    invalidateListener.reDraw();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (originMsgIndex != null) {\n      originMsgIndex.put(new String(msg.getBody()),msg);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (cluster != null) {\n      final int clusterId=cluster.getId();\n      if (!sbTreeCollectionManager.isComponentPresent(operation,clusterId)) {\n        OLogManager.instance().info(this,\"Cluster with id %d does not have associated rid bag, fixing ...\");\n        sbTreeCollectionManager.createComponent(operation,clusterId);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mBagOfTags != null) {\n    for (    Object value : mBagOfTags.values()) {\n      closeWithRuntimeException(value);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (pojos != null)   this.addResult(pojos.toArray(new Pojo[0]));\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (dis != null) {\n      dis.emit();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (rrs != null) {\n    RenderingRuleSearchRequest req=new RenderingRuleSearchRequest(rrs);\n    req.setBooleanFilter(rrs.PROPS.R_NIGHT_MODE,nightMode);\n    if (req.searchRenderingAttribute(RenderingRuleStorageProperties.A_DEFAULT_COLOR)) {\n      color=req.getIntPropertyValue(req.ALL.R_ATTR_COLOR_VALUE);\n      defaultColor=color;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (key != null) {\n    key.cancel();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (selectionProvider != null) {\n    selectionProvider.dispose();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (wEnv != null) {\n    for (int i=0; i < wEnv.getHandlerCount(); i++) {\n      if (wEnv.getHandler(i) != null) {\n        wEnv.getHandler(i).pause();\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (this.theLogger != null)     this.theLogger.logInfo(\"ps2ascii not found. Switching to java parser mode.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (sqlRequest.getBackdoorToggles() != null)   BackdoorToggles.addToggles(sqlRequest.getBackdoorToggles());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (buffer != null) {\n    buffer.position(0);\n    buffer.limit(0);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mService != null)     mService.removeTracks(0,Integer.MAX_VALUE);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (holder != null) {\n      holder.uid=newUid;\n      holder.message.setUid(newUid);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (focusTimeSpanBo != null) {\n    recordSet.setAgentId(focusTimeSpanBo.getAgentId());\n    recordSet.setApplicationId(focusTimeSpanBo.getApplicationId());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (executor != null) {\n      executor.release();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (sortItem != null) {\n    if (position < 3) {\n      sortItem.setVisible(true);\n    }\n// fix_end\n// fix_start\n      sortItem.setVisible(false);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (rosterGroup != null)   this.id=rosterGroup.getName();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (roleInfoList != null) {\n    for (    RoleInfo roleInfo : roleInfoList) {\n      if (roleInfo.getRole().equals(NacosRoleServiceImpl.GLOBAL_ADMIN_ROLE)) {\n        user.setGlobalAdmin(true);\n        break;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (parsePhase != null) {\n          List<Tag> parseTags=parsePhase.getNamedChildren(TAG_PARSE);\n          for (          Tag parseTag : parseTags) {\n            processParseTag(parseTag,mm);\n          }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (indicatorText != null) {\n    indicatorText.setText(R.string.ConversationItem_click_for_details);\n    indicatorText.setVisibility(View.VISIBLE);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (scheduler != null) {\n    scheduler.shutdownNow();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (query != null) {\n    namedQueries.put(name,query);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (context != null) {\n    contexts.add(context);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (obj != null) {\n        request.setArguments(new Object[]{obj});\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (splits.left != null)     ranges.add(splits.left);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (storageReport != null) {\n    model.setOriginalReport(storageReport);\n    rawReport=filterReport(payload,model,storageReport);\n    storageReport=mergeReport(payload,rawReport);\n    model.setReport(storageReport);\n    buildDepartments(payload,model,storageReport);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (webView != null) {\n    webView.removeAllViews();\n    webView.destroy();\n    webView=null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (layoutUI.getDescription() != null) {\n      description=layoutUI.getDescription();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (updates != null) {\n      for (      Facet facet : updates.value()) {\n        facets.add(facet.value());\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (kafkaServer != null) {\n    kafkaServer.shutdown();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (view != null) {\n      float half=getHeight() / 2.0f;\n      state.proportion=-(y - half - view.getTop()) / half;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (playbackInfo != null)       this.savePlaybackInfo(order,playbackInfo);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (colorState != null) {\n    mSecurityMessageDisplay.setNextMessageColor(colorState);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (allPackages != null) {\n      for (      String aPackage : allPackages) {\n        ApplicationInfo ai=mPackageManager.getApplicationInfo(aPackage,PackageManager.GET_META_DATA);\n        Bundle b=ai.metaData;\n        if (b == null) {\n          return;\n        }\n        interestedPackages=b.getString(\"android.accounts.SupportedLoginTypes\");\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (packages != null) {\n    for (    String name : packages) {\n      try {\n        PackageInfo packageInfo=mContext.getPackageManager().getPackageInfo(name,0);\n        if ((packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {\n          return true;\n        }\n// fix_end\n// fix_start\n catch (      PackageManager.NameNotFoundException e) {\n        return false;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ringtoneUri != null) {\n    final ContentResolver cr=context.getContentResolver();\n    final Uri cacheUri=getCacheForType(type);\n    try (InputStream in=cr.openInputStream(ringtoneUri);OutputStream out=cr.openOutputStream(cacheUri)){\n      Streams.copy(in,out);\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Failed to cache ringtone: \" + e);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mListener != null) {\n    mListener.onClosed();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (listener != null) {\n    downloadTask.listenerMap.put(listener.tag,listener);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (config.getClassName() != null) {\n    super.setClassName(config.getClassName());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (pscan != null) {\n    dialog.addPolicyPanel(pscan.getPolicyPanel());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (inflatedView != null)     return inflatedView.findViewById(viewId);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (result.getProducts() != null) {\n        model.addAttribute(ALL_PRODUCTS_ATTRIBUTE_NAME,new HashSet<Product>(result.getProducts()));\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mUpdateStatus != null) {\n      if (NetworkInfo.State.CONNECTING.equals(info.getState()))       mUpdateStatus.setText(\"Connecting to WiFi access point ...\");\n else       if (NetworkInfo.State.CONNECTED.equals(info.getState())) {\n        ((DSploitApplication)getApplication()).onCreate();\n        onCreate(null);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n          if (dynamicChildView != null) {\n            views.add(dynamicChildView);\n            viewGroup.addView(dynamicChildView);\n          }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (corePlugin != null)   result.add(corePlugin);\n// fix_end\n"}
{"INPUT": "// fix_start\n      return skyframeExecutor.getConfigurationForTesting(reporter,fromConfig.fragmentClasses(),transition.patch(fromConfig.getOptions(),eventCollector));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new StupidPool<>(new OffheapBufferGenerator(\"intermediate processing\",config.intermediateComputeSizeBytes()),config.getNumThreads(),config.poolCacheMaxCount());\n// fix_end\n"}
{"INPUT": "// fix_start\n    goPublisher.taggedConsumeLineWithPrefix(DefaultGoPublisher.TASK_START,fetchMsg);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return JiraIssue.responded(name,fields,request,response);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final KsqlTopic ksqlTopic=new KsqlTopic(\"FOO\",\"TEST_TOPIC1\",new KsqlJsonTopicSerDe(),true);\n// fix_end\n"}
{"INPUT": "// fix_start\n    final String cmpOptsStr=JavacParser.validateCompilerOptions(compilerOptions.getArguments(),null).stream().collect(Collectors.joining(\" \"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  ActiveMQXAConnection connection=new ActiveMQXAConnection(transport,getClientIdGenerator(),getConnectionIdGenerator(),stats);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new Handle(null,new ConfigRegistry(),null,new LocalTransactionHandler(),new DefaultStatementBuilder(),fakeConnection);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ShowTables s=new ShowTables(EMPTY,null,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  QueryRunner<Result<TopNResultValue>> runner=QueryRunnerTestHelper.makeQueryRunner(factory,new QueryableIndexSegment(\"sid1\",queryableIndex),null);\n// fix_end\n"}
{"INPUT": "// fix_start\n    sink.error(Operators.onOperatorError(ex,actual.currentContext()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new SequentialCubeTupleIterator(scanners,request.getCuboid(),request.getDimensions(),request.getMetrics(),returnTupleInfo,request.getContext(),sqlDigest);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final YubiKeyAuthenticationHandler handler=new YubiKeyAuthenticationHandler(\"\",CLIENT_ID,SECRET_KEY,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  String popupStyleNames=getStyleNameFromUIDL(VPopupCalendar.POPUP_PRIMARY_STYLE_NAME,uidl,getState(),false);\n// fix_end\n"}
{"INPUT": "// fix_start\n    factory=config.getResourceLoader().newInstance(info.className,IndexSchemaFactory.class,\"schema.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  String[] itemConfig=StringUtils.split(bindingConfig,zibaseBindingConfig.CONFIG_SEPARATOR);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new InternalStringTermsFacet(facetName,comparatorType,size,Sets.newHashSet(new InternalStringTermsFacet.StringEntry(indexName,count)),0,count);\n// fix_end\n"}
{"INPUT": "// fix_start\n  myWhatToTestForm.resetFrom(myBCCombo.getModule(),myBCCombo.getBC(),params);\n// fix_end\n"}
{"INPUT": "// fix_start\n,buildQuery.withOrder(),buildQuery.withCurrentUserCriteria(),buildQuery.withUnfinishedCriteria()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertNull(map.getFirst(new LeftTuple(h1,null,true),null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  TransactionBroadcast broadcast=new TransactionBroadcast(peerGroup,blockChain.getContext(),tx);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(descriptor,PluginConstants.PACKAGE_MATERIAL_EXTENSION,pluginSettings,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n        final SearchHit hit=new SearchHit(scoreDoc.doc,visitor.id(),Map.of(),Map.of());\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<String> moduleSymbols=asList(\"xml\",\"foo\",\"object\",\"error\",\"boolean\",\"decimal\",\"typedesc\",\"float\",\"future\",\"int\",\"map\",\"stream\",\"string\",\"table\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return QueryStateMachine.begin(query,Optional.empty(),session,URI.create(\"fake://uri\"),new ResourceGroupId(\"test\"),true,transactionManager,new AccessControlManager(transactionManager,emptyEventListenerManager(),new AccessControlConfig()),executor,metadata,WarningCollector.NOOP,Optional.empty());\n// fix_end\n"}
{"INPUT": "// fix_start\n  RecordUtil.modifyTaskRecord(oldFile.getPath(),newPath,mEntity.getTaskType());\n// fix_end\n"}
{"INPUT": "// fix_start\n  summary=new IndexSummaryBuilder(keyCount,metadata.getIndexInterval(),Downsampling.BASE_SAMPLING_LEVEL);\n// fix_end\n"}
{"INPUT": "// fix_start\n  schema.makeVertexLabel(\"author\").properties(\"id\",\"name\",\"age\",\"lived\").primaryKeys(\"id\").create();\n// fix_end\n"}
{"INPUT": "// fix_start\n  mPrintManager.addPrintServiceRecommendationsChangeListener(mListener,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n      CoIotDescrSen d=fixDescription(sensorMap.getOrDefault(update.id,new CoIotDescrSen()),blkMap);\n// fix_end\n"}
{"INPUT": "// fix_start\n  KafkaAssemblyOperator op=new KafkaAssemblyOperator(vertx,new PlatformFeaturesAvailability(false,KubernetesVersion.V1_9),certManager,new ResourceOperatorSupplier(null,null,null,null,null,secretOps,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),ResourceUtils.dummyClusterOperatorConfig(1L));\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (dateLexer.scanISO8601DateIfMatch(false)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    playable=DemoApp.Companion.getExoCreator().createPlayable(video,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  addDaysAndCheckForCompletion(33,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new ProgramInvocationException(e.getMessage(),e);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new FlowableException(\"could not get byte array from resource '\" + resourceName + \"'\",e);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final Cas30ResponseView view=new Cas30ResponseView(\"attribute\",true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  httpClient=new NettyHttpClient(new MockServerLogger(),clientEventLoopGroup,null,false,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  try (CommandThreadManager pool=new CommandThreadManager(\"Audit\",getConcurrencyLimit(params.getBuckConfig()));PerBuildState parserState=new PerBuildState(params.getParser(),params.getBuckEventBus(),params.getExecutableFinder(),pool.getListeningExecutorService(),params.getCell(),params.getKnownBuildRuleTypesProvider(),getEnableParserProfiling(),PerBuildState.SpeculativeParsing.ENABLED)){\n// fix_end\n"}
{"INPUT": "// fix_start\n      var=CodeVar.fromMthArg(mthArg,classGen.isFallbackMode());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Assert.assertEquals(null,LongDeserializer.instance.deserialze(parser,null,null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return appenderatorsManager.createRealtimeAppenderatorForTask(getId(),dataSchema,tuningConfig.withBasePersistDirectory(toolbox.getPersistDir()),metrics,toolbox.getSegmentPusher(),toolbox.getJsonMapper(),toolbox.getIndexIO(),toolbox.getIndexMergerV9(),toolbox.getQueryRunnerFactoryConglomerate(),toolbox.getSegmentAnnouncer(),toolbox.getEmitter(),toolbox.getQueryExecutorService(),toolbox.getJoinableFactory(),toolbox.getCache(),toolbox.getCacheConfig(),toolbox.getCachePopulatorStats());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Set<Setting<?>> registeredSettings=Sets.newHashSet(CcrSettings.INDICES_RECOVERY_ACTIVITY_TIMEOUT_SETTING,CcrSettings.RECOVERY_MAX_BYTES_PER_SECOND,CcrSettings.INDICES_RECOVERY_ACTION_TIMEOUT_SETTING,CcrSettings.RECOVERY_CHUNK_SIZE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Spawn spawn=new SimpleSpawn(action,ImmutableList.copyOf(action.getArguments()),ImmutableMap.copyOf(action.getEnvironment(actionExecutionContext.getClientEnv())),ImmutableMap.copyOf(action.getExecutionInfo()),EmptyRunfilesSupplier.INSTANCE,ImmutableMap.of(),ImmutableList.copyOf(inputs),ImmutableList.of(),action.getOutputs().asList(),action.estimateResourceConsumptionLocal());\n// fix_end\n"}
{"INPUT": "// fix_start\n    this.dexFile=DexFileFactory.loadDexFile(inputDexFile,api,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertTrue(checker.isErrorFree(0));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertNotNull(\"Namespace not created: \" + name,ns);\n// fix_end\n"}
{"INPUT": "// fix_start\n    IndicesOptions indicesOptions=IndicesOptions.fromOptions(randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean());\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<Dialect> dialects=Arrays.asList(Dialect.H2,Dialect.MYSQL,Dialect.ORACLE,Dialect.POSTGRES,Dialect.MSSQL);\n// fix_end\n"}
{"INPUT": "// fix_start\n    MetaClass metaClass=MetaClass.forClass(parameterType,configuration.getReflectorFactory());\n// fix_end\n"}
{"INPUT": "// fix_start\n  schemaChangedListener.watch(ChangedType.UPDATED,ChangedType.DELETED,ChangedType.ADDED);\n// fix_end\n"}
{"INPUT": "// fix_start\n  injector.state.parent().blacklist(key,binding.getSource());\n// fix_end\n"}
{"INPUT": "// fix_start\n  mManagerView=Preconditions.checkNotNull(view,\"view\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(new Names(name,indexName,indexName,name),Defaults.BOOST,new FieldType(Defaults.FIELD_TYPE),docValues,Lucene.KEYWORD_ANALYZER,Lucene.KEYWORD_ANALYZER,postingsFormat,docValuesFormat,null,null,fieldDataSettings,indexSettings);\n// fix_end\n"}
{"INPUT": "// fix_start\n    assertThat(e).hasMessage(shouldHaveSameSizeAs(actual,actual.length,other.length).create(null,info.representation()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  DBManager dbManager=new DBManager(\"db-test.properties\",new BlockingIOProcessor(1,100,null),true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(settings,ACTION_NAME,transportService,clusterService,indicesService,threadPool,shardStateAction,actionFilters,indexNameExpressionResolver,null,null,ThreadPool.Names.WRITE,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  IntrospectionSupport.getProperties(configuration,params,null,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n    try (Engine e=createEngine(defaultSettings,store,primaryTranslogDir,newMergePolicy(),null,null,null)){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new PackageRollbackInfo(new VersionedPackage(packageName,fromVersion),new VersionedPackage(packageName,toVersion),new IntArray(),new ArrayList<>(),isApex,false,new IntArray(),new SparseLongArray());\n// fix_end\n"}
{"INPUT": "// fix_start\n    setValue(DesignAttributeHandler.readAttribute(\"value\",design.attributes(),Float.class),false,true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  SearchContext s=new TestSearchContext(new QueryShardContext(0,new IndexSettings(EMPTY_INDEX_METADATA,Settings.EMPTY),BigArrays.NON_RECYCLING_INSTANCE,null,null,null,null,null,xContentRegistry(),writableRegistry(),null,null,null,null,null)){\n// fix_end\n"}
{"INPUT": "// fix_start\n  mWifiSignalController=new WifiSignalController(mContext,mHasMobileDataFeature,mCallbackHandler,this,mWifiManager);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(holder.props.getProperty(\"listen.address\"),holder.props.getIntProperty(\"hardware.default.port\"),holder.transportTypeHolder);\n// fix_end\n"}
{"INPUT": "// fix_start\n  WorkManager.getInstance(getApplicationContext()).enqueue(newRequest);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (DartServerErrorsAnnotator.shouldIgnoreMessageFromDartAnalyzer(file.getPath(),analysisError))   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  long localWrittenBytes=file.transferTo(ch,writtenBytes);\n// fix_end\n"}
{"INPUT": "// fix_start\n  state.parent().blacklist(key,state,binding.getSource());\n// fix_end\n"}
{"INPUT": "// fix_start\n    final FixedExecutorBuilder fixed=new FixedExecutorBuilder(Settings.EMPTY,\"my_pool2\",1,1,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  TaskManagerServices taskManagerServices=TaskManagerServices.fromConfiguration(taskManagerServicesConfiguration,resourceID,EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag(),EnvironmentInformation.getMaxJvmHeapMemory());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new SortedSetOrdinalsIndexFieldData.Builder(name(),CoreValuesSourceType.BYTES);\n// fix_end\n"}
{"INPUT": "// fix_start\n    deprecationLogger.deprecatedAndMaybeLog(\"pending_watches\",\"The pending_watches parameter is deprecated, use queued_watches instead\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.trackerDistributerdCacheManager=new TrackerDistributedCacheManager(conf,new DefaultTaskController());\n// fix_end\n"}
{"INPUT": "// fix_start\n,NSparkCubingEngine.NSparkCubingStorage.class).getFrom(PathManager.getParquetStoragePath(segment.getConfig(),segment.getCubeInstance().getName(),segment.getName(),segment.getCreateTimeUTC(),String.valueOf(cuboid.getId())),ss);\n// fix_end\n"}
{"INPUT": "// fix_start\n  mThemeManager=new ThemeOverlayManager(mContext.getSystemService(OverlayManager.class),AsyncTask.THREAD_POOL_EXECUTOR,mContext.getString(R.string.launcher_overlayable_package),mContext.getString(R.string.themepicker_overlayable_package));\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(workspaceStartTimeout,ingressStartTimeout,urlRewriter,unrecoverablePodEventListenerFactory,bootstrapperFactory,serverCheckerFactory,volumesStrategy,probeScheduler,probesFactory,eventPublisher,sharedPool,runtimesStatusesCache,machinesCache,startSynchronizerFactory,internalEnvironmentProvisioners,kubernetesEnvironmentProvisioner,toolingProvisioner,null,runtimeHangingDetector,tracer,context,project);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return new NoteCreateCommand(diagramPart,(ERDNote)newObject,location,request.getSize());\n// fix_end\n"}
{"INPUT": "// fix_start\n  setNode(context,node);\n// fix_end\n"}
{"INPUT": "// fix_start\n    value=parseTimestampWithTimeZone(timeZoneKey,node.getValue());\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(Defaults.NAME,true,false,false,TextSearchInfo.SIMPLE_MATCH_ONLY,Collections.emptyMap());\n// fix_end\n"}
{"INPUT": "// fix_start\n  context=new InterpreterContext(\"note\",\"id\",\"title\",\"text\",null,null,null,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  TerminalPresenter newTerminal=terminalFactory.create(machine,this);\n// fix_end\n"}
{"INPUT": "// fix_start\n    String tableName=RouterUtil.getShowTableName(schema,stmt,repPos);\n// fix_end\n"}
{"INPUT": "// fix_start\n    val=(byte[])DiskStoreImpl.convertBytesAndBitsIntoObject(dr.getBytesAndBitsWithoutLock(entry.getDiskId(),true,false),(InternalCache)cache);\n// fix_end\n"}
{"INPUT": "// fix_start\n      writer.visitSetterValue(modelUtils.resolveTypeReference(declaringClass),modelUtils.resolveTypeReference(method.getReturnType()),annotationMetadata,requiresReflection,fieldType,setterName,genericTypes,annotationUtils.getAnnotationMetadata(method.getParameters().get(0)),true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(\"FakeDownloadAction\",0,isRemoveAction,mediaId);\n// fix_end\n"}
{"INPUT": "// fix_start\n    int endIndexOfCountryCode=localeString.indexOf(country,language.length()) + country.length();\n// fix_end\n"}
{"INPUT": "// fix_start\n  CacheConfiguration cfg=new CacheConfiguration(DEFAULT_CACHE_NAME);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final SearchSourceBuilder searchSourceBuilder=queryContext.searchSourceBuilder(searchType.id());\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(name,false,false,hasDocValues,TextSearchInfo.SIMPLE_MATCH_ONLY,meta);\n// fix_end\n"}
{"INPUT": "// fix_start\n      cmp=WritableComparator.get(keyclass,conf);\n// fix_end\n"}
{"INPUT": "// fix_start\n  calendar.setTime(d.get(false));\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  assertThat(\"numeric value for property '\" + resultParser.currentName() + \"' must be identical\",resultParser.numberValue(),Matchers.equalTo(expectedParser.numberValue()));\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    queryResults.add(new StreamQueryResult(resultSet,shardingRule,shardingRule.getShardingEncryptorEngine()));\n// fix_end\n"}
{"INPUT": "// fix_start\n      columns=ImmutableList.of(new Column(\"result\",\"boolean\",new ClientTypeSignature(StandardTypes.BOOLEAN,ImmutableList.of(),ImmutableList.of())));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return exec(dup ? new OldIdentity(ndArray,ndArray.dup()) : new OldIdentity(ndArray));\n// fix_end\n"}
{"INPUT": "// fix_start\n  hashCode=hashCode * 31 + ObjectUtils.nullSafeHashCode(this.variableResolver == null ? null : this.variableResolver.getSource());\n// fix_end\n"}
{"INPUT": "// fix_start\n  application.apolloClient().newCall(FeedQuery.builder().limit(10).type(FeedType.HOT).build()).enqueue(new ApolloCall.Callback<FeedQuery.Data>(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  Log.i(TAG,\"onItemSelected: \" + item + \" row \"+ row);\n// fix_end\n"}
{"INPUT": "// fix_start\n      Shape inputShape=new Shape(1,Mnist.IMAGE_HEIGHT * Mnist.IMAGE_WIDTH);\n// fix_end\n"}
{"INPUT": "// fix_start\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n// fix_end\n// fix_start\n      return new Worker(node.getServiceScheme(),node.getHostAndPortToUse(),config.getIp(),config.getCapacity(),config.getVersion());\n// fix_end\n"}
{"INPUT": "// fix_start\n  final MemorySize networkBuffersMemory=MemorySize.parse(memorySegmentSizeKb * 6 + \"kb\");\n// fix_end\n"}
{"INPUT": "// fix_start\n        ModelRequest request=new ModelRequest(temp,ModelPeriod.CURRENT.getStartTime()).setProperty(\"date\",String.valueOf(currentHour));\n// fix_end\n"}
{"INPUT": "// fix_start\nthrow new BLangCompilerException(\"error creating test_json_cache \" + \"dir for module(s): \" + targetTestJsonCacheDir);\n// fix_end\n"}
{"INPUT": "// fix_start\nthrow new UnsupportedKerasConfigurationException(\"Unknown keras weight initializer \\\"\" + kerasInit + \"\\\"\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    trappingNullCheck=graph.add(NullCheckNode.create(value,deoptReasonAndAction,deoptSpeculation));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Glide.with(holder.mImage.getContext().getApplicationContext()).load(actress.getImageUrl()).placeholder(R.drawable.ic_movie_actresses).diskCacheStrategy(SOURCE).skipMemoryCache(true).transform(new SquareTopCrop(holder.mImage.getContext())).dontAnimate().into(holder.mImage);\n// fix_end\n"}
{"INPUT": "// fix_start\n  thrown.expectMessage(\"%nExpecting:%n\" + \" <[0x02, 0x03]>%n\" + \"to contain:%n\"+ \" <[0x01]>%n\"+ \"but could not find:%n\"+ \" <[0x01]>%n\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  when(spansFactory.get(any(Class.class))).thenReturn(new SpanFactory(){\n// fix_end\n"}
{"INPUT": "// fix_start\n    Engine.Index engineIndex=IndexShard.prepareIndex(docMapper(index.type()),source(shardId.getIndexName(),index.type(),index.id(),index.source()).routing(index.routing()).parent(index.parent()),index.seqNo(),index.version(),index.versionType().versionTypeForReplicationAndRecovery(),origin,index.getAutoGeneratedIdTimestamp(),true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  expected.add(new EnvVarBuilder().withName(KafkaConnectCluster.ENV_VAR_STRIMZI_KAFKA_GC_LOG_ENABLED).withValue(Boolean.toString(AbstractModel.DEFAULT_JVM_GC_LOGGING_ENABLED)).build());\n// fix_end\n"}
{"INPUT": "// fix_start\n  final CacheManagerBuilder<PersistentCacheManager> clusteredCacheManagerBuilder=CacheManagerBuilder.newCacheManagerBuilder().with(ClusteringServiceConfigurationBuilder.cluster(CLUSTER.getConnectionURI().resolve(\"/crud-cm-replication\")).timeouts(TimeoutsBuilder.timeouts().read(Duration.ofSeconds(20)).write(Duration.ofSeconds(20))).autoCreate(null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(fqns,Matchers.<List<String>>is(ImmutableList.of(\"_id\",\"_score\",\"_source\",\"_uid\",\"_version\",\"content\",\"datum\",\"id\",\"nested\",\"nested.inner_nested\",\"person\",\"person.birthday\",\"person.first_name\",\"title\")));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new jedd.internal.RelationContainer(new Attribute[]{var.v(),obj.v()},new PhysicalDomain[]{V1.v(),H1.v()},(\"return ret; at /home/research/ccl/olhota/soot-trunk/src/soot\" + \"/jimple/paddle/queue/Rvar_objIter.jedd:50,8-14\"),ret);\n// fix_end\n"}
{"INPUT": "// fix_start\n          repairLogger.debug(m_whoami + \"repairing \" + CoreUtils.hsIdToString(entry.getKey())+ \". Max seen \"+ TxnEgo.txnIdToString(entry.getValue().m_maxSpHandleSeen)+ \". Repairing with \"+ TxnEgo.txnIdToString(li.getHandle()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  OsStats.Cgroup cgroup=new OsStats.Cgroup(randomAsciiOfLength(8),randomNonNegativeLong(),randomAsciiOfLength(8),randomNonNegativeLong(),randomNonNegativeLong(),new OsStats.Cgroup.CpuStat(randomNonNegativeLong(),randomNonNegativeLong(),randomNonNegativeLong()));\n// fix_end\n"}
{"INPUT": "// fix_start\n      throw new EvalException(loc,Printer.format(\"Incompatible variable types, \" + \"trying to assign %r (type of %s) to variable %s which is already %s\",result,EvalUtils.getDataTypeName(result),ident.getName(),EvalUtils.getDataTypeNameFromClass(variableType)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Option[] options=combine(getDefaultCamelKarafOptions(),loadCamelFeatures(\"camel-blueprint\"),bundle(newBundle().add(\"OSGI-INF/blueprint/test.xml\",XsltBlueprintRouteTest.class.getResource(\"XsltBlueprintRouter.xml\")).add(\"transform.xsl\",XsltBlueprintRouteTest.class.getResource(\"transform.xsl\")).set(Constants.BUNDLE_SYMBOLICNAME,\"XsltBlueprintRouteTest\").set(Constants.DYNAMICIMPORT_PACKAGE,\"*\").build(withBnd())).noStart());\n// fix_end\n"}
{"INPUT": "// fix_start\n  transportService.sendRequest(node,PingRequestHandler.ACTION,new PingRequest(node.id()),options().withType(TransportRequestOptions.Type.PING).withTimeout(pingRetryTimeout),new BaseTransportResponseHandler<PingResponse>(){\n// fix_end\n// fix_start\n          transportService.sendRequest(node,PingRequestHandler.ACTION,new PingRequest(node.id()),options().withType(TransportRequestOptions.Type.PING).withTimeout(pingRetryTimeout),this);\n// fix_end\n"}
{"INPUT": "// fix_start\n  model.setConfig(removeEmptyString(rep.getConfig()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  eventStore.appendEvents(Arrays.asList(new GenericDomainEventMessage<>(\"id1\",0,\"Payload1\",type),new GenericDomainEventMessage<>(\"id1\",1,\"Payload2\",type)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  outState.putParcelableArrayList(CHECKED_STATE_MAP,new ArrayList(expandableList.groups));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(new StringCodec(LettuceCharsets.UTF8).estimateSize(teststring)).isEqualTo(ByteBufUtil.utf8MaxBytes(teststring));\n// fix_end\n"}
{"INPUT": "// fix_start\n  DocumentMapper nestedMapper=createDocumentMapper((mapping(null)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Query parentFilter=parentObjectMapper != null ? parentObjectMapper.nestedTypeFilter() : Queries.newNonNestedFilter(context.getQueryShardContext().indexVersionCreated());\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new IllegalArgumentException(\"configured LDAP protocols are not all equal (ldaps://.. and ldap://..): [\" + Strings.arrayToCommaDelimitedString(ldapUrls) + \"]\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Lookup.getDefault().lookup(AttributeColumnsMergeStrategiesController.class).joinWithSeparatorMerge(table,columns,double[].class,columnTitle,SEPARATOR);\n// fix_end\n"}
{"INPUT": "// fix_start\n    logger.info(\"Send unicast message: \" + msg + \" to \"+ url.getAddress()+ \":\"+ mutilcastSocket.getLocalPort());\n// fix_end\n"}
{"INPUT": "// fix_start\n   try (XContentParser parser=JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY,DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\"{\" + nodesHeader + clusterName+ \"\\\"nodes\\\" : { \\\"id1\\\": { \\\"name\\\": \\\"a\\\"}, \\\"id2\\\": { \\\"name\\\": \\\"b\\\"}}}\")){\n// fix_end\n"}
{"INPUT": "// fix_start\n  this(System.getProperty(\"host\",\"0.0.0.0\"),8080,391,1 << 10,1 << 11,Integer.parseInt(System.getProperty(\"telemetry.port\",\"-1\")),\"tfb-database\",\"hello_world\",\"benchmarkdbuser\",\"benchmarkdbpass\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    AbstractSpan span=ContextManager.createEntrySpan(\"{\" + request.getMethod() + \"}\"+ toPath(request.getUri()),contextCarrier);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new FilterProcessor(createPredicate(routeContext),childProcessor);\n// fix_end\n"}
{"INPUT": "// fix_start\n    env.put(name,new BuiltinCallable(v,name,null));\n// fix_end\n"}
{"INPUT": "// fix_start\n    RestCodec.argsToRest(swaggerRestOperation.getOperationMeta().getSwaggerConsumerOperation().getArgumentsMapper().invocationArgumentToSwaggerArguments(invocation,invocation.getArguments()),swaggerRestOperation,restClientRequest);\n// fix_end\n"}
{"INPUT": "// fix_start\n      line((function != null ? function.getName() : \"unknown\") + \",\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  metaData=new ShardingMetaData(getDataSourceURLs(getDataSourceMap()),shardingRule,databaseType,executeEngine,new JDBCTableMetaDataConnectionManager(getDataSourceMap()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  ll.setPadding((int)getDimension(R.dimen.item_left_tv_padding),0,(int)getDimension(R.dimen.item_right_img_padding_right),0);\n// fix_end\n"}
{"INPUT": "// fix_start\n  WebvttCueParser.parseCueText(null,string,builder,Collections.emptyList());\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.displayName=modConfig.<String>getOptional(\"displayName\").orElse(this.modId);\n// fix_end\n"}
{"INPUT": "// fix_start\n    System.setProperty(\"https.cipherSuites\",Krb5AndCertsSslSocketConnector.KRB5_CIPHER_SUITES.get(0));\n// fix_end\n"}
{"INPUT": "// fix_start\n  _peersView.put(Long.valueOf(id),new QuorumServer(id,HOST,quorumPort,electionPort,LearnerType.PARTICIPANT));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new BootstrapAppModelResolver(MavenArtifactResolver.builder().setRepoHome(repoHome).setOffline(true).setWorkspaceDiscovery(false).setWorkspace(workspace).build());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return MockServerWebExchange.from(MockServerHttpRequest.method(method,\"http://localhost\" + path).header(\"Origin\",origin).header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD,\"GET\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  request.addHeader(Header.HTTP_PARENT_APPLICATION_TYPE.toString(),Short.toString(traceContext.getServerTypeCode()));\n// fix_end\n"}
{"INPUT": "// fix_start\n      @Override public void changed(      PackageLoader.Package pkg,      Ctx ctx){\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  this(node.getHostAndPort(),node.getHostAndPort(),config.getMaxSize(),type,config.getTier(),DEFAULT_PRIORITY);\n// fix_end\n"}
{"INPUT": "// fix_start\n  factory.setErrorPages(Collections.emptySet());\n// fix_end\n"}
{"INPUT": "// fix_start\n  FlinkRelBuilder relBuilder=FlinkRelBuilder.of(context.getCluster(),this.getRelOptSchema());\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(\"Missing header value in response: \" + HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS,Arrays.asList(new HttpMethod[]{HttpMethod.GET}),asHttpHeaders.getAccessControlAllowMethods());\n// fix_end\n"}
{"INPUT": "// fix_start\n  String message=IndexPopulationFailure.appendCauseOfFailure(String.format(\"Index %s entered a %s state. Please see database logs.\",index,state),cause);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(exception.getCause().getCause().getMessage(),equalTo(\"Unrecognized token\" + \" 'invalid': was expecting ('true', 'false' or 'null')\\n\" + \" at [Source: invalid json; line: 1, column: 8]\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n    try (StreamInput in=new NamedWriteableAwareStreamInput(output.bytes().streamInput(),provideNamedWritableRegistry())){\n// fix_end\n"}
{"INPUT": "// fix_start\n  GridView list=(GridView)getView().findViewById(android.R.id.list);\n// fix_end\n"}
{"INPUT": "// fix_start\n      m_consumerDRGateway.initialize(m_config.m_startAction != StartAction.CREATE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),R.layout.list_item,R.id.item_tv,mValues);\n// fix_end\n"}
{"INPUT": "// fix_start\n  String[] filteringAliases=indexNameExpressionResolver.filteringAliases(clusterService.state(),shard.index().getName(),request.indices());\n// fix_end\n"}
{"INPUT": "// fix_start\n    final World world=new World();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  RuleContext context=new RuleContext(kbuilder,pkg,packageModel.getExprIdGenerator(),queryDescr);\n// fix_end\n"}
{"INPUT": "// fix_start\nfinal FileChannel injection=new FileInputStream(new File(DebugPathManager.getFudHome() + \"/flex-injection/target/\" + injectionFileName)).getChannel();\n// fix_end\n"}
{"INPUT": "// fix_start\n    working=checkCmd(cmd);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertTransformedExpression(\"if(attribute(double_field),1+reduce(attribute(tensor_field_1),max,x),attribute(tensor_field_1))\",\"if(attribute(double_field),1 + max(attribute(tensor_field_1),x),attribute(tensor_field_1))\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    shard.applyIndexOperationOnPrimary(Versions.MATCH_ANY,VersionType.INTERNAL,new SourceToParse(shard.shardId().getIndexName(),\"_doc\",Integer.toString(i),new BytesArray(\"{}\"),XContentType.JSON),SequenceNumbers.UNASSIGNED_SEQ_NO,0,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Text text=new Text(unicode);\n// fix_end\n"}
{"INPUT": "// fix_start\n  setDefaultNameIfNone(StreamletNamePrefix.REMAP,stageNames);\n// fix_end\n"}
{"INPUT": "// fix_start\n    Log.e(TAG,\"Synchronizing \" + mAccount.name + \", file \"+ (mLocalFile != null ? mLocalFile.getRemotePath() : \"NULL\")+ \": \"+ result.getLogMessage(),result.getException());\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(read,both(greaterThanOrEqualTo(0)).and(lessThanOrEqualTo(1)));\n// fix_end\n"}
{"INPUT": "// fix_start\n      LIRKind lirKind=LIRKind.value(supportsAVX2(tool.target()) && (maxVectorSize < 0 || maxVectorSize >= 32) ? AMD64Kind.V256_BYTE : AMD64Kind.V128_BYTE);\n// fix_end\n"}
{"INPUT": "// fix_start\n      result=txnalPut(CONCURRENT_MAP_PUT_AND_UNLOCK,name,key,value,timeout,ttl,txnId);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(ClusterRerouteAction.NAME,transportService,clusterService,threadPool,actionFilters,null,indexNameExpressionResolver);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(objectMapper.getFactory(),JsonFactory.FORMAT_NAME_JSON,klass,validator,objectMapper,propertyPrefix);\n// fix_end\n"}
{"INPUT": "// fix_start\n  BAssertUtil.validateError(negativeResult,index++,\"invalid usage of 'object constructor expression' with \" + \"type '(DistinctFooA|DistinctFoo)'\",42,9);\n// fix_end\n"}
{"INPUT": "// fix_start\n  chain.setChain(Arrays.asList(new EchoingPrincipalResolver(),resolver));\n// fix_end\n"}
{"INPUT": "// fix_start\n  mRecyclerView.addItemDecoration(new FlexibleItemDecoration(getActivity()).withDefaultDivider());\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(0,TableDescriptor.COMPARATOR.compare(htd,confirmedHtd));\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (UIUtils.confirmAction(getShell(),MockDataMessages.tools_mockdata_wizard_title,MockDataMessages.tools_mockdata_confirm_delete_old_data_message)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  throw new UnsupportedOperationException(\"MeterRegistry implementations may still override this, but it is only \" + \"invoked by the overloaded form of newLongTaskTimer for backwards compatibility.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    return View.MeasureSpec.makeMeasureSpec(Math.max(0,View.MeasureSpec.getSize(spec) - startInset - endInset),mode);\n// fix_end\n"}
{"INPUT": "// fix_start\n  buildCuboid(cubeName,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n      request.add(Requests.indexRequest(\"test\").type(\"type1\").id(Integer.toString(counter)).source(source(Integer.toString(counter),\"test\" + counter)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (ClientConnectionManager)Proxy.newProxyInstance(ClientConnectionManagerFactory.class.getClassLoader(),interfaces,new Handler(orig));\n// fix_end\n"}
{"INPUT": "// fix_start\n  entitySqlDaoTransactionalJdbiWrapper=new EntitySqlDaoTransactionalJdbiWrapper(dbi,clock,cacheControllerDispatcher,nonEntityDao);\n// fix_end\n"}
{"INPUT": "// fix_start\nswitch (((MultiUserChatServiceImpl)mucService).getMUCDelegate().sendingInvitation(this,to,senderRole.getUserAddress(),reason)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    assertTrue(registered.contains(serviceUrl));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(workspace.runCommand(\"otool\",\"-L\",binaryOutput.toString()).getStdout().get(),(not(containsString(\"@rpath/libswiftCore.dylib\"))));\n// fix_end\n"}
{"INPUT": "// fix_start\n    expect(cluster.getServiceByConfigType(entry.getKey())).andReturn(null).anyTimes();\n// fix_end\n"}
{"INPUT": "// fix_start\n  stateIndexService.closeIndex(new MetaDataStateIndexService.Request(request.index()).timeout(request.timeout()).masterTimeout(request.masterNodeTimeout()),new MetaDataStateIndexService.Listener(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (obj instanceof NamingEntry) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (other == null || other.getClass() != getClass()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (responseStatus.reasonPhrase().toString().equals(reasonPhrase)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (appVariantContext.getAtlasExtension().getTBuildConfig().isIncremental() && (appVariantContext.getBuildType().getPatchConfig() == null || !appVariantContext.getBuildType().getPatchConfig().isCreateTPatch())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (nodeEngine.getClusterService().getThisAddress().equals(nodeEngine.getPartitionService().getPartitionOwner(i))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mDelKeyNames.getText(i).toString().equals(item.getTitle().toString())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (getCommitId().name().equals(change.getNewBlobIdent().revision))   return change.getNewBlobIdent().path;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((report == null || report.getIps().isEmpty()) && period.isLast()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!FileSystem.mkdirs(DONEDIR_FS,dir,new FsPermission(HISTORY_DIR_PERMISSION))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (DBSProcedure.class.isAssignableFrom(((DBSObjectReference)object).getObjectType().getTypeClass())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (SIGMA.match(field) && token == XContentParser.Token.VALUE_NUMBER) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (hi < 1) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (bean != null && bean != this) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (coordinator.getSupportedDeviceSpecificSettings(device) != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      while ((!main.isAccepted()) && (!main.isStop())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if ((message.getDestination() == null) || (destination != null && !destination.equals(message.getDestination()))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (anchor == block.getBeginNode() && OptEliminateGuards.getValue(activeGuards.graph().getOptions())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (readMethod != null && ClassUtils.isAssignable(writeMethod.getParameterTypes()[0],readMethod.getReturnType())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (holder.mModel.mExpiry != 0L) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (subModel.get(ENABLED).asBoolean() && context.isNormalServer()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!getClass().isAssignableFrom(obj.getClass()))   return false;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (parserContext.indexVersionCreated().before(Version.V_2_2_0)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (compileFunction == null && name instanceof FulledNameToken && compiler.getEnvironment().fetchFunction(realName) == null && compiler.findFunction(realName) == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (com.navercorp.pinpoint.common.util.ArrayUtils.isEmpty(javaTypeArray)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (ds != null && (ds.isProvided() || ds.isTemporary())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (m.isConcrete() || m.isNative() || m.isPhantom()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (biz.getBizState() != BizState.ACTIVATED && biz.getBizState() != BizState.DEACTIVATED) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.ATLEAST_OREO)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (list != null && !list.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!(other instanceof MethodParameter)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (result.ok()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (s.contains(\"@@\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if ((ns.kind == Namespace.KIND_PACKAGE) || (ns.kind == Namespace.KIND_PACKAGE_INTERNAL)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (PostgreSchema.isUtilitySchema(name) && !owner.getDataSource().getContainer().getNavigatorSettings().isShowUtilityObjects()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!e.awaitTermination(24,TimeUnit.HOURS))     logger_.error(\"Stream took more than 24H to complete; skipping\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (wordsRMIM.size() == wordsMIM.size() && wordsRMIM.equals(wordsMIM)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!this.loadManager.get().isCentralized() || pulsar.getLeaderElectionService().isLeader() || !isBrokerActive(pulsar.getLeaderElectionService().getCurrentLeader().getServiceUrl())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!method.declaringType.equals(declaringType)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((mAttrType == LayoutParams.TYPE_STATUS_BAR || mAttrType == LayoutParams.TYPE_NOTIFICATION_SHADE) && mWin.isVisibleByPolicy()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (checkCollectionMethods(methodName) || \"get\".equals(methodName) || \"listIterator\".equals(methodName)|| \"lastIndexOf\".equals(methodName)|| \"indexOf\".equals(methodName)|| \"subList\".equals(methodName)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!generatedFunction.info().hasFeature(FunctionInfo.Feature.COMPARISON_REPLACEMENT)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ProxySchemaContexts.getInstance().getSchemaContexts().isCircuitBreak()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if ((op.getParentOperators() == null) || (op.getParentOperators().isEmpty()) || (op.getParentOperators().size() > 1)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (actual.clazz.isPrimitive()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (packet.protocol == 6 || packet.protocol == 17 || packet.protocol == 1 || packet.protocol == 58) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if ((descriptor.isApplicableByDefault() && excludedTransformers != null && excludedTransformers.contains(descriptor.getId())) || (!descriptor.isApplicableByDefault() && includedTransformers != null && !includedTransformers.contains(descriptor.getId()))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((getProperty(\"Debug\") != null && getProperty(\"Debug\").equals(\"true\")) || getProperty(\"debug\") != null && getProperty(\"debug\").equals(\"true\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (link != null && link.entity != null && link.entity.power != null)     out.add(link);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (includeDir.isEmpty() || declaredIncludeDirs.contains(includeDir)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (context.includeInAll(includeInAll)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (uid == android.os.Process.ROOT_UID || uid == android.os.Process.SYSTEM_UID || uid == android.os.Process.PHONE_UID || uid == android.os.Process.NFC_UID || uid == android.os.Process.BLUETOOTH_UID) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (REPORT_CREATE_INSTANCE_BEFORE_FIELDS_ASSIGNED && instanceCreated && !instanceCreatedWarningGiven&& !getSuperclassName().equals(\"java.lang.Enum\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\nif (new Date().getTime() > getFirstStartTime() + USAGE_REPORTING_DIALOG_DELAY && getApi().getOptions().isUsageReportingAccepted()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (appVariantContext.getAtlasExtension().getTBuildConfig().isIncremental() && awbBundle.getBaseAwbDependencies() != null && awbBundle.getBaseAwbDependencies().size() > 1) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (database != null)   if (!database.isClosed() && !database.getTransaction().isActive() && database.getLocalCache() != null)   database.getLocalCache().clear();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (\"java\".equals(fileExtension) || \"class\".equals(fileExtension)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (state.nodes().getLocalNode().isMasterNode()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (loop.getLooptype() == DoStatement.LOOP_FOR && loop.getInitExprent() == null && loop.getIncExprent() == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!ConfigSections.HAZELCAST.getName().equals(rootNodeName)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (field.name().equals(path)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (result.isJavaLangObject() && a.isInterface() && b.isInterface()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (name.isEmpty() && (properties[i].getInjectableValueId() != null)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!(destination.block() instanceof CraterConveyor) && (entity.link != tile.pos() || !isStart(tile))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (spawnResult.status() != Status.SUCCESS) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (currentPrincipal.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mUseHeadsUp && mHeadsUpNotificationDecay > 0 && !mHeadsUpNotificationView.isInsistent()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((events == null) || events.isAccountAutoInvoiceOff()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!json.has(\"crosspost_parent_list\") || json.get(\"crosspost_parent_list\").get(0) == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((e.getButton() == MouseEvent.BUTTON3) || (prefs.getBoolean(\"ctrlClick\") && (e.getButton() == MouseEvent.BUTTON1) && e.isControlDown())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (child.isTextDirectionInherited()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (reporter.errorsOccurred()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.objectDepth == 0 && (this.arrayDepth == 0 || this.arrayDepth == 1) && (token == JsonToken.END_OBJECT || token.isScalarValue())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (request.isAsyncStarted()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!Table.isModelTable(tableName)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (getName().equalsIgnoreCase(\"LONG\") || getName().equalsIgnoreCase(\"NCLOB\") || getName().equalsIgnoreCase(\"BFILE\")|| getName().equalsIgnoreCase(\"ROWID\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (DEBUG && mTargetVector != null && (mTargetVector.x * dx < 0 || mTargetVector.y * dy < 0)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((_deser == null) && (_inputType != null) && (_creatorProps == null)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (processInstance.getActivity() == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (existingSub == null || existingSub.getRequestedQos().byteValue() < sub.getRequestedQos().byteValue()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (items != null && !items.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!errors.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (uri.startsWith(\"file:\") || uri.startsWith(\"/\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\nif (FeatureFlags.getInstance(mContext).isQsbOnFirstScreenEnabled() && !LauncherDbUtils.prepareScreenZeroToHostQsb(mContext,db)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (causeLevel.intValue() > level.intValue()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!FileUtil.exists(lastLocalVersionOnDisk)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (derived != null ? !Arrays.equals(derived,that.derived) : that.derived != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (getOpenOrders().isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"<!DOCTYPE html>\\n\" + \"<html>\\n\" + \"<head>\\n\"+ \"<meta charset=\\\"UTF-8\\\">\\n\"+ \"<title>sampleFile - OpenGrok cross reference\"+ \" for /sampleFile</title></head><body>\\n\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (intentCategories != null && intentCategories.contains(Intent.CATEGORY_LAUNCHER) && Intent.ACTION_MAIN.equals(intent.getAction()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return String.join(NacosConfigProperties.COMMAS,String.valueOf(dataId),String.valueOf(group));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return detailFragment != null && detailFragment.getCurrentNote() != null && detailFragment.getCurrentNote().get_id().equals(note.get_id());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return invoicePaymentModelDao == null ? null : new DefaultInvoicePayment(invoicePaymentModelDao);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new ApiInfoBuilder().title(\"OpenAPI Generator Online\").description(\"This is an online openapi generator server.  You can find out more at https://github.com/OpenAPITools/openapi-generator.\").license(\"Apache 2.0\").licenseUrl(\"http://www.apache.org/licenses/LICENSE-2.0.html\").termsOfServiceUrl(\"\").version(\"3.0.0\").contact(new Contact(\"\",\"\",\"\")).build();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return libFileName.startsWith(\"qtp\") || libFileName.startsWith(\"automation\") || libFileName.equals(\"flex.swc\")|| libFileName.equals(\"servicemonitor.swc\")|| libFileName.equals(\"utilities.swc\")|| libFileName.equals(\"core.swc\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (dbm + 113) / 2;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (fl & FLAG_FULLSCREEN) != 0 || (sysui & (SYSTEM_UI_FLAG_FULLSCREEN)) != 0;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return AuthUser.builder().rawUserInfo(object).uuid(object.getString(\"unionid\")).nickname(object.getString(\"nick\")).username(object.getString(\"nick\")).gender(AuthUserGender.UNKNOWN).source(source.toString()).token(token).build();\n// fix_end\n"}
{"INPUT": "// fix_start\n    return new ExportResult<>(e);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (completionCounter.get() == 0) {\n        childOperator.onCompleted();\n      }\n// fix_end\n// fix_start\n              _gps.subscribe(new Operator<T>(o){\n                @Override public void onCompleted(){\n                  o.onCompleted();\n                  completeInner();\n                }\n                @Override public void onError(                Throwable e){\n                  o.onError(e);\n                }\n                @Override public void onNext(                T t){\n                  o.onNext(t);\n                }\n              }\n);\n// fix_end\n"}
{"INPUT": "// fix_start\n      return productName;\n// fix_end\n// fix_start\n      return prettyProductName;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return SimpleEventBus.builder().messageMonitor(configuration.messageMonitor(EventStore.class,\"eventStore\")).build();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new AbstractSearchAsyncAction<SearchPhaseResult>(\"test\",null,null,null,Collections.singletonMap(\"foo\",new AliasFilter(new MatchAllQueryBuilder())),Collections.singletonMap(\"foo\",2.0f),null,request,null,new GroupShardsIterator<>(Collections.singletonList(new SearchShardIterator(null,null,Collections.emptyList(),null))),timeProvider,0,null,new InitialSearchPhase.ArraySearchPhaseResults<>(10),request.getMaxConcurrentShardRequests(),SearchResponse.Clusters.EMPTY){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return ((Array)oop).getLength();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return obtainRxBleConnection(connectionComponent).mergeWith(observeDisconnections(connectionComponent)).delaySubscription(enqueueConnectOperation(connectionComponent)).doOnSubscribe(new Consumer<Disposable>(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return String.format(\"HttpDestination@%x//%s:%d(%d/%d,%d,%d/%d)%n\",hashCode(),_address.getHost(),_address.getPort(),_connections.size(),_maxConnections,_idle.size(),_queue.size(),_maxQueueSize);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (\"{\" + completionItem.getInsertText() + \",\"+ completionItem.getDetail()+ \",\"+ completionItem.getLabel()+ additionalTextEdits+ \"}\").replace(\"\\r\\n\",\"\\n\").replace(\"\\\\r\\\\n\",\"\\\\n\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return s1.isPositive() && s2.isPositive() || s1.isStrictlyNegative() && s2.isStrictlyNegative();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return queryMethod.isNotSearchHitMethod() ? SearchHitSupport.unwrapSearchHits(result) : result;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return segmentSpanChars(openingMarker,\"open\") + segmentSpanChars(info,\"info\") + segmentSpan(content,\"content\")+ \" lines[\"+ lines+ \"]\"+ segmentSpanChars(closingMarker,\"close\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return super.toString() + ' ' + (isEnd ? \"end: \" + InsnUtils.formatOffset(startAddr) + '-'+ InsnUtils.formatOffset(endAddr) : \"active: \" + InsnUtils.formatOffset(startAddr));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"State{\" + \"mTargetPosition=\" + mTargetPosition + \", mData=\"+ mData+ \", mItemCount=\"+ mItemCount+ \", mIsMeasuring=\"+ mIsMeasuring+ \", mPreviousLayoutItemCount=\"+ mPreviousLayoutItemCount+ \", mDeletedInvisibleItemCountSincePreviousLayout=\"+ mDeletedInvisibleItemCountSincePreviousLayout+ \", mStructureChanged=\"+ mStructureChanged+ \", mInPreLayout=\"+ mInPreLayout+ \", mRunSimpleAnimations=\"+ mRunSimpleAnimations+ \", mRunPredictiveAnimations=\"+ mRunPredictiveAnimations+ '}';\n// fix_end\n"}
{"INPUT": "// fix_start\n    return DataImporter.DATE_TIME_FORMAT.get().parse(dateStr);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return player != null && (player.getPlaybackState() == ExoPlayer.STATE_READY || (player.getPlaybackState() == ExoPlayer.STATE_BUFFERING && player.getCurrentPosition() > 0));\n// fix_end\n"}
{"INPUT": "// fix_start\n    return solveSymbolAsValueInParentContext(name);\n// fix_end\n"}
{"INPUT": "// fix_start\n      return (T)contentMap[type.ordinal()].get(0);\n// fix_end\n"}
{"INPUT": "// fix_start\n      return Optional.empty();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return fieldVisibility.getFieldDefinitions(type).stream().filter(null).filter(null).map(null).filter(((Predicate<String>)null).negate()).collect(Collectors.toSet());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return msg.toLowerCase().contains(\"in prolog\") || msg.toLowerCase().contains(\"limit\") || msg.toLowerCase().contains(\"preceding the root element must be well-formed\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return super.isAllowed(osmProperties);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new SimpleJavaFileObject(new java.io.File(dir,filename).toURI(),JavaFileObject.Kind.SOURCE){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (remotePath + OCFile.PATH_SEPARATOR + subPath+ (fileName == null ? \"\" : fileName)).replaceAll(OCFile.PATH_SEPARATOR + \"+\",OCFile.PATH_SEPARATOR);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return new BasicStorageDocumentFile(null,context,treeUri);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (this.field + \" must \" + inverter+ this.getSentenceRepresentation()+ \" \"+ this.value);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return relationshipId != NO_SUCH_RELATIONSHIP && readRecord(relationshipId,CHECK).inUse();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return env.addSource(new StormFiniteSpoutWrapper<String>(new StormInMemorySpout(WordCountData.WORDS),true),TypeExtractor.getForClass(String.class)).setParallelism(1);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new PackageInstallerSession(null,null,mMockPackageManagerInternal,null,BackgroundThread.getHandler().getLooper(),null,sessionId,456,-1,InstallSource.create(\"testInstaller\",\"testInstaller\"),params,0L,mTmpDir,null,true,true,false,childSessionIds != null ? childSessionIds : new int[0],parentSessionId,staged ? true : false,false,false,PackageInstaller.SessionInfo.STAGED_SESSION_VERIFICATION_FAILED,\"some error\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"UpdateRecord[\" + mProvider + \" \"+ mReceiver.mIdentity.mPackageName+ \"(\"+ mReceiver.mIdentity.mUid+ (mIsForegroundUid ? \" foreground\" : \" background\")+ \")\"+ \" \"+ mRealRequest+ \" \"+ mReceiver.mWorkSource+ \"]\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  return b.toString();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new SourceValueFetcher(name(),mapperService){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (interfaces.length == 0 || (interfaces.length == 1 && SpringProxy.class == interfaces[0]));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new ClusterRoleBindingOperator(vertx,mockClient){\n    @Override protected long deleteTimeoutMs(){\n      return 100;\n    }\n  }\n;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Flowable.fromCallable(new Callable<Long>(){\n// fix_end\n// fix_start\n);\n// fix_end\n"}
{"INPUT": "// fix_start\n    private List<V> firstValues;\n// fix_end\n// fix_start\n        if (iterPos == 0 && firstValues == null) {\n          firstValues=res.getValues();\n        }\n else         if (res.getValues().equals(firstValues)) {\n          return false;\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new Object[][]{{\"serviceAnnotation1.json\",\"annotation\"},{\"serviceAnnotation2.json\",\"annotation\"},{\"resourceAnnotation1.json\",\"annotation\"}};\n// fix_end\n"}
{"INPUT": "// fix_start\n  return DropwizardResourceConfig.forTesting(new MetricRegistry()).register(new EmptyOptionalExceptionMapper()).register(OptionalLongReturnResource.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"Update{\" + \"updateId=\" + updateId + \", message=\"+ message+ \", inlineQuery=\"+ inlineQuery+ \", chosenInlineQuery=\"+ chosenInlineQuery+ \", callbackQuery=\"+ callbackQuery+ '}';\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new SourceValueFetcher(name(),mapperService,nullValue){\n// fix_end\n"}
{"INPUT": "// fix_start\n      @SuppressWarnings(\"unchecked\") SketchHolder other=((ObjectColumnSelector<SketchHolder>)selector).getObject();\n// fix_end\n// fix_start\n    @Nullable @Override public SketchHolder getObject(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Objects.equals(this.type,configFile.type) && Objects.equals(this.destFile,configFile.destFile) && Objects.equals(this.srcFile,configFile.srcFile)&& Objects.equals(this.properties,configFile.properties);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff) & 0xFFFFFFFFL;\n// fix_end\n"}
{"INPUT": "// fix_start\nreturn TypeDescription.createDecimal().withScale(decimalType.getScale()).withPrecision(decimalType.getPrecision());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (ReplicaQueryRule)schemaContexts.getDefaultMetaData().getRuleMetaData().getRules().iterator().next();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new ClusterRoleOperator(vertx,mockClient){\n    @Override protected long deleteTimeoutMs(){\n      return 100;\n    }\n  }\n;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return calendar.getTimeInMillis() / MILLISECONDS_PER_DAY + J1970;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (UnframedGrpcService)GrpcService.builder().addService(bindableService).setMaxInboundMessageSizeBytes(MAX_MESSAGE_BYTES).setMaxOutboundMessageSizeBytes(MAX_MESSAGE_BYTES).supportedSerializationFormats(GrpcSerializationFormats.values()).enableUnframedRequests(true).build();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"TxOutput{\" + \"\\n        txId=\" + txId + \",\\n        index=\"+ index+ \",\\n        value=\"+ value+ \",\\n        addresses=\"+ addresses+ \",\\n        scriptProgramBytes=\"+ Hex.toHexString(scriptProgramBytes)+ \"\\n\"+ \"     }\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  return org.elasticsearch.action.support.master.AcknowledgedResponse.of(randomBoolean());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Objects.equals(password,that.password) && Objects.equals(username,that.username);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return metadata.getVersion().createLongVersionString() + \" - Minecraft Version \" + versionId+ \" (\"+ recognisedVersionName+ \")\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"UidTraffic{mAppUid=\" + mAppUid + \", mRxBytes=\"+ mRxBytes+ \", mTxBytes=\"+ mTxBytes+ '}';\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"SegmentAnalysis{\" + \"id='\" + id + '\\''+ \", interval=\"+ interval+ \", columns=\"+ columns+ \", size=\"+ size+ \", numRows=\"+ numRows+ '}';\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Objects.equals(key,other.key) && Objects.equals(value,other.value);\n// fix_end\n"}
{"INPUT": "// fix_start\n    List<?> list=(List<?>)value;\n// fix_end\n"}
{"INPUT": "// fix_start\n          return BigInteger.valueOf(signed ? (byte)value : Byte.toUnsignedInt((byte)value));\n// fix_end\n"}
{"INPUT": "// fix_start\n        ((OLazyObjectSet)value).assignDatabase(this);\n// fix_end\n"}
{"INPUT": "// fix_start\n      builder.setColumn(i,((Number)_aggregationResultList.get(i)).longValue());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return SimpleXYChartUtils.formatBytes((long)(value * chartFactor));\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertEquals(0,((Collection<?>)noDeps.get(\"visibility\")).size());\n// fix_end\n"}
{"INPUT": "// fix_start\n  VectorizedParquetRecordReader reader=new VectorizedParquetRecordReader((InputSplit)null,new JobConf(conf));\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!mOptions.hasKey(\"doNotSave\") || !mOptions.getBoolean(\"doNotSave\")) {\n      String filePath=writeStreamToFile(imageStream);\n      File imageFile=new File(filePath);\n      String fileUri=Uri.fromFile(imageFile).toString();\n      response.putString(\"uri\",fileUri);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (nodeEngine.isRunning()) {\n      logger.fine(\"Could not retrieve ringbuffer service to destroy event journal \" + namespace,e);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Upgrading JobExecution status: \" + stepExecution);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!baseStr.startsWith(\"#\")) {\n    final Token token=Token.parse(baseStr);\n    if (token != null) {\n      return TextLiteralExpression.parseTextLiteral(token.getValue());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!mContext.getResources().getBoolean(com.android.internal.R.bool.config_sf_slowBlur)) {\n      mSimUnlockProgressDialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND,WindowManager.LayoutParams.FLAG_BLUR_BEHIND);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n else     if (Math.abs(m - mean) > 1e-6)     return false;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (event.getServletContext().getClass().getName().startsWith(\"io.undertow\")) {\n    Parameters.initialize((ServletContext)null);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (userManager.findUser(HugeAuthenticator.USER_ADMIN) == null) {\n    HugeUser admin=new HugeUser(HugeAuthenticator.USER_ADMIN);\n    admin.password(StringEncoding.hashPassword(inputPassword()));\n    admin.creator(HugeAuthenticator.USER_SYSTEM);\n    userManager.createUser(admin);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!handler.getDoc().isEmbedded()) {\n        ORID identity=handler.getDoc().getIdentity();\n        if (!alreadyDetached.containsKey(identity)) {\n          alreadyDetached.put(identity,o);\n        }\n else         if (returnNonProxiedInstance) {\n          return (T)alreadyDetached.get(identity);\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (window.isModal()) {\n      renderer.setWindowFocus(window);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!executorService.isShutdown()) {\n      executorService.submit(pumper);\n      started.set(true);\n      queue.add(true);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!\"/translations\".equals(request.getServletPath())) {\n    params.put(\"entityType\",entityType);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (DEBUG)   Log.w(TAG,\"Not showing message id \" + what + \", str=\"+ string);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (newItems != items) {\n    items.clear();\n    items.addAll(newItems);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n              if (cfs.metadata.hasStaticColumns())               indexWriter.nextUnfilteredCluster(partition.staticRow());\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (size.valueAt(i)) {\n      MessageBean msg=(MessageBean)adapter.getItem(position - 1);\n      if (!msg.getUser().getId().equals(currentUserId))       return false;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (BrowserUtil.isIE(getDesiredCapabilities())) {\n    testBench().disableWaitForVaadin();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (tag instanceof TagInternals) {\n    TagInternals tagi=tagi(tag);\n    TagData<?> tagData=tagi.tagData();\n    tagi.setHnd(getNewId(tagData));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (log.isWarnEnabled()) {\n        log.warn(\"SyncTimer {} timeouted waiting for users after: {}ms\",getName(),getTimeoutInMs());\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (null != driver) {\n    reset(driver,dataSource,connection);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!StringUtils.isEmpty(action)) {\n    if (action.equals(gitReceivePack)) {\n      if (!repository.isBare) {\n        logger.warn(\"Gitblit does not allow pushes to repositories with a working copy\");\n        return false;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n    compareValuesFiles(\"values-mcc004-mnc4-en-rUS-ldrtl-sw100dp-w200dp-h300dp\" + \"-xlarge-long-land-desk-night-xhdpi-finger-keyssoft-12key\" + \"-navhidden-dpad/strings.xml\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!HttpUtil.isTransferEncodingChunked(httpResponse)) {\n    httpResponse.headers().add(HttpHeaderNames.CONTENT_LENGTH,len);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (isNew)   tileLayerInfo.setEnabled(true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (config.isTraceSqlBindValue()) {\n    target.addScopedInterceptor(\"com.navercorp.pinpoint.bootstrap.plugin.jdbc.interceptor.PreparedStatementBindVariableInterceptor\",OracleConstants.ORACLE_SCOPE);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!line.isEmpty())       list.add(line);\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (ev.getX() < getWidth() - getScrollX()) {\n        return true;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!request.isAsyncStarted()) {\n        if (response instanceof HttpServletResponseImpl) {\n          responseImpl.closeStreamAndWriter();\n        }\n// fix_end\n// fix_start\n          try {\n            final PrintWriter writer=response.getWriter();\n            writer.flush();\n            writer.close();\n          }\n catch (          IllegalStateException e) {\n            final ServletOutputStream outputStream=response.getOutputStream();\n            outputStream.flush();\n            outputStream.close();\n          }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (Files.notExists(dir)) {\n      Files.createDirectories(dir);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (null != effectiveClusterVersion) {\n      executionCommand.getCommandParams().put(KeyNames.VERSION,effectiveClusterVersion.getRepositoryVersion().getVersion());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (check) {\n    this.completingThread=null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n          if (otherPackageName != pkg.packageName) {\n            throw new PackageManagerException(INSTALL_FAILED_CONFLICTING_PROVIDER,\"Can't install because provider name \" + names[j] + \" (in package \"+ pkg.applicationInfo.packageName+ \") is already used by \"+ otherPackageName);\n          }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (isActivated()) {\n    setCodeCommandsEnabled(false);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (null != zkServer) {\n    zkServer.shutdown();\n    zkServer=null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (properties.containsKey(CLUSTER_HANDLE_PROPERTY_ID)) {\n    String handle=(String)properties.get(CLUSTER_HANDLE_PROPERTY_ID);\n    if (handle != null) {\n      viewInstanceEntity.setClusterHandle(Long.valueOf(handle));\n    }\n// fix_end\n// fix_start\n      viewInstanceEntity.setClusterHandle(null);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!localMessage.isSet(Flag.SEEN)) {\n        l.synchronizeMailboxNewMessage(account,folder,localMessage);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (offsetY != 0) {\n    mScroller.startScroll(0,mHolder.mOffsetY,0,offsetY,duration);\n    invalidate();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (selectionManager.isDaySelected(day)) {\n        selectedDays.add(day);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (CAN_RECYCLE)     options.bitmapDecodeOptions.inMutable=false;\n// fix_end\n"}
{"INPUT": "// fix_start\n          if (allowMode == ALLOW_NON_FULL || isSameProfileGroup) {\n            builder.append(\" or \");\n            builder.append(INTERACT_ACROSS_USERS);\n          }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (count > 0) {\n    byte[] buf=new byte[4096];\n    int c=0;\n    while ((c=dis.read(buf)) > 0) {\n      baos.write(buf,0,c);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (null != exe) {\n    exe.shutdownNow();\n    exe=null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (logger.isTraceEnabled())       logger.trace(\"Leaking \" + leakedCount + \" ByteBuffer instances.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!async) {\n        writer.append(' ');\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (writer == null) {\n      nextBlock();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (hasComponent(\"spring-event\") == null) {\n      addComponent(\"spring-event\",new EventComponent(applicationContext));\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mCanvas != null) {\n      mIdleRunner.enable();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (range.getLength() > 1) {\n      list.add(new FoldingDescriptor(node,range));\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (docType.hasLocation()) {\n      if (!e.hasTemplateName()) {\n        e.setTemplateName(docType.getTemplateName());\n      }\n      if (!e.hasLineAndCol()) {\n        e.setLineAndCol(docType.getLine(),docType.getCol());\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n      for (      UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {\n        if (\"Nimbus\".equals(info.getName())) {\n          UIManager.setLookAndFeel(info.getClassName());\n          break;\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!request.breaking) {\n    removals.add(request);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (temporaryPersistenceContext.isLoadFinished()) {\n    temporaryPersistenceContext.clear();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!combinedValue.equals(currentValue)) {\n    writeInternal(combinedValue);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (isShowing > 0) {\n        isShowing++;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"writing chunk \" + chunkInfo.getChunkName() + \" blockID \"+ blockID+ \" length \"+ effectiveChunkSize);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (w > 0 && h > 0) {\n    setBackgroundCompat(w,h);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!(mIccFileHandler instanceof CdmaLteUiccFileHandler)) {\n      mIccFileHandler.setAid(getAid());\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ok) {\n    iter.advanceIfNeeded(BufferUtil.lowbits(minval));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n              if (d > 0.0) {\n                layers[i].setIDropout(new Dropout(d));\n              }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!K9.hideUserAgent()) {\n    message.setHeader(\"User-Agent\",getString(R.string.message_header_mua));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (!zkController.getCoreContainer().isShutDown()) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(),colName,cd.getCloudDescriptor().getParams(),null);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!persistenceManager.empty()) {\n    persistenceManager.pop();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (System.getProperty(\"log4j.configuration\") == null) {\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinTaskRunner.class,GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n         if (streamInput.getVersion().before(Version.V_8_0_0)) {\n          streamInput.readStringArray();\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (Wires.isData(header))         sequence+=1;\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (returnPath == null || path.toString().compareTo(returnPath.toString()) > 0) {\n          returnPath=path;\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n  res.add(CoreOptions.vmOptions(\"-Xbootclasspath/p:\" + checkALPNBoot.getAbsolutePath()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  JsonToken token=context.getCurrentToken();\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.providedDepAProvider=Preconditions.checkNotNull(providedDepAProvider,1);\n// fix_end\n"}
{"INPUT": "// fix_start\n    nextIndex=currentIndex - 1;\n// fix_end\n"}
{"INPUT": "// fix_start\n  FeatureResult result=info.unit.exec.result;\n// fix_end\n"}
{"INPUT": "// fix_start\n  AuthorizationCode authorizationCode=new AuthorizationCode(authorizationCodeAuthentication.getAuthorizationExchange().getAuthorizationResponse().getCode());\n// fix_end\n"}
{"INPUT": "// fix_start\n  StringSerializer.writeUTF8((CharSequence)string,session,session.tail);\n// fix_end\n"}
{"INPUT": "// fix_start\n    ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return tree.build();\n// fix_end\n"}
{"INPUT": "// fix_start\n      getMessageLog().logMessage(\"Could not close test socket to \" + socketAddr,e);\n// fix_end\n"}
{"INPUT": "// fix_start\n  CFArray o=(CFArray)CFType.Marshaler.toObject(CFArray.class,handle,flags);\n// fix_end\n"}
{"INPUT": "// fix_start\n    VoiceRouter.this.play(newCommand);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (addLineMode && !snapToRoadEnabled) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  resolver=new SamlServiceProviderResolver(Settings.EMPTY,index,new SamlServiceProviderFactory(serviceProviderDefaults));\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (message != null)   out.append(\" \").append(String.format(message,params));\n// fix_end\n"}
{"INPUT": "// fix_start\n    failEquals(message,Float.valueOf(actual));\n// fix_end\n"}
{"INPUT": "// fix_start\n    long totalSizeInBytes=merge.totalBytesSize();\n// fix_end\n"}
{"INPUT": "// fix_start\n    final PropagationContext propagationContext=pctxFactory.createPropagationContext(workingMemory.getNextPropagationIdCounter(),PropagationContext.Type.RULE_ADDITION,null,null,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (isDisabled() && style.imageDisabled != null)   image.setDrawable(style.imageDisabled);\n// fix_end\n"}
{"INPUT": "// fix_start\n  NSArray<NSDictionary<NSString,NSObject>> o=(NSArray<NSDictionary<NSString,NSObject>>)NSObject.Marshaler.toObject(NSArray.class,handle,flags);\n// fix_end\n"}
{"INPUT": "// fix_start\n  LOG.info(buf.toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((result.getFeatureMatrix() == null || result == new DataSet()) || (maxNumBatches > -1 && batchNum >= maxNumBatches)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    System.exit(1);\n// fix_end\n"}
{"INPUT": "// fix_start\n    selectorConditionDTO.setParamValue(contextPath + \"/**\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new BitfinexTrade(price,amount,timestamp / 1000,\"bitfinex\",tradeId,type);\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (diagnostic.diagnosticInfo().severity() == DiagnosticSeverity.WARNING) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    tsdb.getConfig().register(ConfigurationEntrySchema.newBuilder().setKey(getConfigKey(SKIP_META)).setDefaultValue(Maps.newHashMap()).setDescription(\"TODO\").setType(NAMESPACE_FILTERS).setSource(this.getClass().toString()).isDynamic().build());\n// fix_end\n"}
{"INPUT": "// fix_start\n    Realm oldRealm=this.realm;\n// fix_end\n"}
{"INPUT": "// fix_start\n  NSArray<NSString> o=(NSArray<NSString>)NSObject.Marshaler.toObject(NSArray.class,handle,flags);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (oldVal == null) {\n      numberOfAdds++;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!preferIPv4Stack) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  char nextByte=(char)(value & 0xFF);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ODatabaseRecordThreadLocal.instance().getIfDefined() != null)   dbSerializerName=((ODatabaseDocumentInternal)iRecord.getDatabase()).getSerializer().toString();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return mutableHeaders.asImmutable();\n// fix_end\n"}
{"INPUT": "// fix_start\n  request.put(MockRestRequest.REST_METHOD_KEY,restMethod.name());\n// fix_end\n"}
{"INPUT": "// fix_start\n  LOGGER.log(Level.FINE,\"Connected to Kubernetes {0} URL {1}\",new String[]{getDisplayName(),client.getMasterUrl().toString()});\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!schemaContext.getSchema().isComplete()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    String tabId=session.getContext().getUri().getQueryParameters().getFirst(org.keycloak.models.Constants.TAB_ID);\n// fix_end\n"}
{"INPUT": "// fix_start\n  JsonToken token=context.getCurrentToken();\n// fix_end\n"}
{"INPUT": "// fix_start\nthrow new IllegalStateException(\"Unexpected literal type: \" + literal.getKind());\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertFalse(((Object)info1).equals(this));\n// fix_end\n"}
{"INPUT": "// fix_start\n  context.set(JedisMethodInterceptor.KEY_OF_REDIS_HOSTS,redisConnInfo.toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n  sb.append(\"writer=\").append(writer.get()).append(\"\\n\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.threadedOperation=request.operationThreaded();\n// fix_end\n"}
{"INPUT": "// fix_start\n    ArrayList<MediaCodecInfo> eac3DecoderInfos=getDecoderInfosInternal(eac3Key,mediaCodecList,MimeTypes.AUDIO_E_AC3);\n// fix_end\n"}
{"INPUT": "// fix_start\n      job.updateTaskStatus(tip,(TaskStatus)report.clone(),myInstrumentation);\n// fix_end\n"}
{"INPUT": "// fix_start\n  StreamCreation serverStreamCreation=serverTransportListener.takeStreamOrFail(20 * TIMEOUT_MS,TimeUnit.MILLISECONDS);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assumeTrue(\"5.x behaves differently, so skip on non-6.x indices\",indexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_0_0_alpha1));\n// fix_end\n"}
{"INPUT": "// fix_start\n  JsonToken token=context.getCurrentToken();\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.authenticationData=cnx.getAuthenticationData();\n// fix_end\n"}
{"INPUT": "// fix_start\n        expected=callExtractFunction(SESSION.toConnectorSession(),millis,field);\n// fix_end\n"}
{"INPUT": "// fix_start\n          child.layout(childLeft,lp.topMargin,childLeft + childWidth,lp.topMargin + childHeight);\n// fix_end\n"}
{"INPUT": "// fix_start\n      log.debug(\"Shutdown finished: :\" + e.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n  AdHocChatRoom adHocChatRoom=createAdHocChatRoom(\"chat\" + new Date().getTime(),new Hashtable<String,Object>());\n// fix_end\n"}
{"INPUT": "// fix_start\n  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));\n// fix_end\n"}
{"INPUT": "// fix_start\n    pushFeed(FeedType.DYNAMIC_PARTITIONS,dp.values());\n// fix_end\n"}
{"INPUT": "// fix_start\n    int[] newArr=new int[endIndexPlusOne + 10];\n// fix_end\n"}
{"INPUT": "// fix_start\n      fix=SuggestedFix.replace(methodInvocationTree,state.getSourceForNode(lhs) + \".clear()\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  SDVariable ai=sd.math().exp(reshapedLogits);\n// fix_end\n"}
{"INPUT": "// fix_start\n    builder.field(PercentilesBucketParser.PERCENTS.getPreferredName(),(Object[])percents);\n// fix_end\n"}
{"INPUT": "// fix_start\n  root.setTrustResolver(this.trustResolver);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return object.getContainer().getSchema().getTableCache();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (stopping.compareAndSet(false,true) && !disposed.get()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return S.toString(PlatformNativeException.class,this,\"cause\",S.includeSensitive() ? cause : (cause == null ? \"null\" : cause.getClass().getSimpleName()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  ShortFieldMapper fieldMapper=new ShortFieldMapper(buildNames(context),precisionStep,fuzzyFactor,index,store,boost,omitNorms,indexOptions,nullValue,ignoreMalformed(context));\n// fix_end\n"}
{"INPUT": "// fix_start\n      currentField.add(token.trim());\n// fix_end\n"}
{"INPUT": "// fix_start\n  long freePhysRec=(appendOnly || Thread.currentThread().getStackTrace().length > 256) ? 0L : findFreePhysSlot(requiredSize);\n// fix_end\n"}
{"INPUT": "// fix_start\n    match=vol.isVisibleForRead(userId) || (includeInvisible && vol.getPath() != null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Vec result=origVec.masterVec().makeTransf(domMap,origVec._domain);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (path != null && !path.toLowerCase().endsWith(getPackageName())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  ODatabaseDocument db=ODatabaseRecordThreadLocal.instance().get();\n// fix_end\n"}
{"INPUT": "// fix_start\n        file=new File(uri.getPath());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return x_robots_tag.toLowerCase();\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean cast=castAlways || (!leftType.isSuperset(rightType) && (rightType.equals(VarType.VARTYPE_OBJECT) || leftType.type != CodeConstants.TYPE_OBJECT)) || (castNull && rightType.type == CodeConstants.TYPE_NULL && !UNDEFINED_TYPE_STRING.equals(getTypeName(leftType)))|| (isIntConstant(exprent) && VarType.VARTYPE_INT.isStrictSuperset(leftType));\n// fix_end\n"}
{"INPUT": "// fix_start\n      log.debug(\"Error freeing CLOB: \" + e.getClass().getName() + \": \"+ e.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertThat(result.getPullStatus()).isNull();\n// fix_end\n"}
{"INPUT": "// fix_start\n  BytesReference bytes=jsonBuilder.endObject().bytes();\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.proxyHttpHeaderRecorder=new ProxyHttpHeaderRecorder(traceContext.getProfilerConfig().isProxyHttpHeaderEnable());\n// fix_end\n"}
{"INPUT": "// fix_start\n  NSArray<NSDictionary<NSString,NSObject>> o=(NSArray<NSDictionary<NSString,NSObject>>)NSObject.Marshaler.toObject(NSArray.class,handle,flags);\n// fix_end\n"}
{"INPUT": "// fix_start\n  CFArray o=(CFArray)CFType.Marshaler.toObject(CFArray.class,handle,flags);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final String url=iURL.indexOf(\":\") > -1 ? iURL.substring(0,iURL.lastIndexOf(\":\")) : iURL;\n// fix_end\n"}
{"INPUT": "// fix_start\ndatabuf.appendChar(p.getExceptionIndex());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!conflicts.isEmpty() && new MergeReviewIntoCommentConfirmationDialog(basePanel.frame().getDialogService()).askUserForMerge(conflicts)) {\n// fix_end\n"}
{"INPUT": "// fix_start\ngetDeviceSession(channel,remoteAddress,id.substring(\"wli:\".length()));\n// fix_end\n"}
{"INPUT": "// fix_start\n  final FsRepository repository=new FsRepository(repositoryMetaData,createEnvironment(),xContentRegistry(),BlobStoreTestUtil.mockClusterService()){\n// fix_end\n"}
{"INPUT": "// fix_start\n      float offset=context.getResources().getIntArray(R.array.text_size_offset)[index == -1 ? 0 : index];\n// fix_end\n"}
{"INPUT": "// fix_start\n      addTo.add(jar.toURI().toURL());\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n      sb.append(\" JOIN\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    context.setReturnValues();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    contractEventTrigger.setTopicMap(ContractEventParser.parseTopics(contractEventTrigger,abiEntry));\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  LaneExport.writeLanes(process,xtw);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ctx.kernalContext().query().onCacheStop(ctx);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  jcVideoPlayer.setUp(URL,OBJECTS);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    for (    final Class<? extends ClassLoaderHandler> classLoaderHandler : scanSpec.extraClassLoaderHandlers) {\n      try {\n        classLoaderHandlers.add(classLoaderHandler.newInstance());\n      }\n catch (      InstantiationException|IllegalAccessException e) {\n        if (log != null) {\n          log.log(\"Could not instantiate \" + classLoaderHandler.getName(),e);\n        }\n      }\n    }\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  Graphics.shader();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw e;\n// fix_end\n"}
{"INPUT": "// fix_start\n      cancelGroupChildrenLocked(r,callingUid,callingPid,listenerName,REASON_GROUP_SUMMARY_CANCELED);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static final String getDefaultType(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  projectExplorer.waitProjectInitialization(PROJECT_NAME);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n      handshakeFuture.setFailure(e);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\npublic CreateTableStatement addPrimaryKeyColumn(String columnName,String columnType,String keyName,ColumnConstraint... constraints){\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  service.join();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (te instanceof DownloadTaskEntity) {\n      mQueue=DownloadTaskQueue.getInstance();\n    }\n else     if (te instanceof UploadTaskEntity) {\n      mQueue=UploadTaskQueue.getInstance();\n    }\n else     if (te instanceof DownloadGroupTaskEntity) {\n      mQueue=DownloadGroupTaskQueue.getInstance();\n    }\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  execute(\"insert into quotes (id, quote, date) values (?, ?, ?), (?, ?, ?)\",new Object[]{1,\"Don't panic\",1395874800000L,2,\"Now panic\",1395961200000L});\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  view_.setReplaceMode(false);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    checkLogRounding();\n// fix_end\n"}
{"INPUT": "// fix_start\n  canRun=true;\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  mRefWatcher=LeakCanary.install(this);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    tlaEditorAndPDFViewer.setActivePage(TLAEditorAndPDFViewer.PDFPage_ID);\n// fix_end\n"}
{"INPUT": "// fix_start\n    desc.init();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n      String plugin=InstanceEntityWrapper.getPlugin(instance);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (isNightTheme()) {\n    getDelegate().setLocalNightMode(AppCompatDelegate.MODE_NIGHT_YES);\n  }\n else {\n    getDelegate().setLocalNightMode(AppCompatDelegate.MODE_NIGHT_NO);\n  }\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  writer.putLine(\"\\\\makeatletter\");\n// fix_end\n"}
{"INPUT": "// fix_start\nif (attachRecords(configuration)) {\nrecord.attach(configuration);\n}\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  mRecentsView.setVisibility(allowRecentsFocusable ? View.VISIBLE : View.GONE);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  super.init(config);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  super.onSaveInstanceState(outState);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  Request.request().setEditSession(editSession);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    restoreReplaceRule(file);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n      partitioner.updatePartitionInfo(recordWriter.writeBatch(next));\n// fix_end\n"}
{"INPUT": "// fix_start\n  CloseHelper.close(fileChannel);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n      line=readHeader(buffer);\n// fix_end\n"}
{"INPUT": "// fix_start\n    this.appendResult(new StatusModel(exitCode,message));\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    outAttrs.locales=getTextLocales();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n      m=builder.apply(idWithCommonTags);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (member instanceof Field) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (returnBefore) {\n    result.append(\" RETURN BEFORE\");\n  }\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n      location=SystemPropertyUtils.resolvePlaceholders(location);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    entryToRemove=null;\n// fix_end\n"}
{"INPUT": "// fix_start\n    }\n    if (primaryKeyField == null) {\n      for (      Field field : fields) {\n        if (\"id\".equals(field.getName())) {\n          primaryKeyField=field;\n          break;\n// fix_end\n"}
{"INPUT": "// fix_start\n  providerUrl=ClusterUtils.mergeUrl(providerUrl,queryMap);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n      inst.addTransformer(client,true);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (geolocationHandler != null) {\n    pipeline.addLast(\"location\",geolocationHandler);\n  }\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  coloredTrack=new Line();\n// fix_end\n"}
{"INPUT": "// fix_start\n    env.setMaxParallelism(2 * PARALLELISM);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    s.removeAttribute(KEY);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  conf.configure(xml);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    IdentValue display=getIdent(CSSName.DISPLAY);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    next=new RemoveLambdaHiddenReferences(next);\n// fix_end\n"}
{"INPUT": "// fix_start\n          asyncSendPacket(new ShutdownInfo());\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  stepNames.put(appliedTransform,genStepName());\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    final int numItems=items.size();\n    for (int i=0; i < numItems; i++) {\n// fix_end\n// fix_start\n    for (int i=items.size() - 1; i >= 0; i--) {\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  shutdown();\n// fix_end\n"}
{"INPUT": "// fix_start\n    WebSockets.sendClose(new CloseMessage(CloseMessage.WRONG_CODE,e.getMessage()).toByteBuffer(),this,null);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    el=el.getParentElement();\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    List<Result> resList=new ArrayList<Result>();\n// fix_end\n"}
{"INPUT": "// fix_start\n    tf3=Typeface.createFromAsset(getAssets(),\"fonts/Gidole-Regular.ttf\");\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  setStatusBarTransparent();\n// fix_end\n"}
{"INPUT": "// fix_start\n        maxInDate=Math.max(maxInDate,m.getSortDate());\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    namingResources.addPropertyChangeListener(this);\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  super.onCreate(icicle);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  t1.onNext(1);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    log.debug(\"Initializing connector {} with config {}\",connName,config);\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n    stopLoadMore();\n// fix_end\n"}
{"INPUT": "// fix_start\n  remoteEndpointProtocolVersion=connected.getProtocolVersion();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\ncase XML:\n// fix_end\n"}
{"INPUT": "// fix_start\n// fix_end\n// fix_start\n  listView.setAdapter(adapter);\n// fix_end\n"}
{"INPUT": "// fix_start\n    final int limit=perThreadPool.getMaxThreadStates();\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n    mBlockWorker.requestSpace(request.getSessionId(),request.getBlockId(),request.getSpaceToReserve());\n    ctx.writeAndFlush(RPCProtoMessage.createOkResponse(null));\n  }\n else {\n// fix_end\n// fix_start\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (BrowserInfo.get().getWebkitVersion() > 0 || (BrowserInfo.get().isOpera11())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (messages.isValid() && messages.isLoaded()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    text=editorText == null || editorText.isEmpty() ? null : text;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mTopFullscreenOpaqueWindowState != null && mTopIsFullscreen && !mTopFullscreenOpaqueWindowState.isAnimatingLw() && mTopFullscreenOpaqueWindowState.getAttrs().rotationAnimation == ROTATION_ANIMATION_JUMPCUT) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (url.getPort() != 80 && url.getPort() != 443) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (position >= 0 && !playingQueue.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (connector.getConfig().isPingPassthrough() && serverInfo != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (newCount <= size || values.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (ph != null && allophones.containsKey(ph)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!state.centered && (state.positionX >= 0 || state.positionY >= 0)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (spanStart > 0 && isNotSpace(builder,spanStart - 1)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return !(null == intent || TextUtils.isEmpty(intent.getAction()) || null == intent.getData() || TextUtils.isEmpty(intent.getData().getSchemeSpecificPart()) || intent.getBooleanExtra(Intent.EXTRA_REPLACING,false));\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (str.charAt(i) == '_' || str.charAt(i) == ' ') {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (player == null || player.getPlaybackState() == 1)   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (operation instanceof CreateShareViaLinkOperation && result.isSuccess()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!config.mKeepRoot && FileOperation.getlist(destResDir) == 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (methodName.equals(m.getName()) && m.getParameterTypes().length == paramCount) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return plugged == BatteryManager.BATTERY_PLUGGED_AC || plugged == BatteryManager.BATTERY_PLUGGED_USB || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (paramNames.hasMoreElements() && queryBuilder.length() > 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (httpStatusSuccessful(response) && !requestHasAlreadyBeenHandled(request)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (rowsRet <= 0 || work.getLimit() == totalRows) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!result.isSuccess() && result.getCode() != ResultCode.CANCELLED) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mInterfaceType == TetheringManager.TETHERING_WIFI || mInterfaceType == TetheringManager.TETHERING_WIFI_P2P || mInterfaceType == TetheringManager.TETHERING_ETHERNET) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  mRightAffordanceView.setVisibility(!mDozing && state.isVisible ? View.VISIBLE : View.GONE);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!KernelFunctionLoader.getInstance().exists(op.name()) || op.x() instanceof IComplexNDArray) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (toCapture != null && slopCheck(toCapture,dx,dy) && tryCaptureViewForDrag(toCapture,pointerId)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if ((dir.getPath().length() > 0) && pth.startsWith(dir.getPath())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (nextInfo == null || nextInfo.directionInfo == null || nextInfo.directionInfo.distance == 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (data != null && data.getData() != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.pageSizeZero == null && pageSizeZero != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (host != null && patterns != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.objectType.isEvent() && this.expirationOffset >= 0 && this.expirationOffset != Long.MAX_VALUE) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (annotationInstance.target().kind() == Kind.CLASS && !Modifier.isInterface(annotationInstance.target().asClass().flags())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (mAdapter.getCount() > i && mAdapter.getItem(i) != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (libFolder != null && !importedLibraries.contains(libFolder)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (task.isProcessable() && task.process()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (session != null && keyName.length() > 0)     session.write(keyName);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (result == null && ioe != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (sendFragment == null || !sendFragment.isVisible() || !sendFragment.handleBackPress()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n else       if (character == ',' || character == '}') {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (executeKeywords != null && executeKeywords.length > 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (element.getKind().equals(ElementKind.CLASS) || element.getKind().equals(ElementKind.ENUM)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (jarName.endsWith(\".jar\") || jarName.endsWith(\".war\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (viewFor == VIEW_STRUCTURE_FOR_AUTOFILL || viewFor == VIEW_STRUCTURE_FOR_CONTENT_CAPTURE) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (type == TYPE_PUBLIC && !isVisible()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (resource.getParent() instanceof IProject && resource.equals(getDefaultRoot(resource.getProject()))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (currentSelectedItem != null && !currentSelectedItem.isEmpty() && users != null && !users.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (chainHeight != 0 && confidenceProto.hasAppearedAtHeight()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (sashSize.y > 0 && foldersSize.y > sashSize.y / 2 && sashSize.y > foldersSize.y) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if ((strCount == null) || strCount.equals(\"\"))     return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (t.getKind() == TypeKind.VOID || t.getKind() == TypeKind.NULL) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if ((frpManagementAgentUid != mInjector.binderGetCallingUid()) && (mContext.checkCallingPermission(permission.MASTER_CLEAR) != PackageManager.PERMISSION_GRANTED)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (type == null || type.equals(rootName) || mapperService.resolveDocumentType(type).equals(rootName)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (database.isClosed())   if (database.getStorage() instanceof OStorageMemory && !database.exists())   database.create();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (unaryExpr.expr.type.tag == TypeTags.ANY || unaryExpr.expr.type.tag == TypeTags.JSON) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (config.scouter_standalone || config.sbr_log_make) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (proverProcess != null && !proverProcess.isTerminated());\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (browser.isWebkit() || browser.isEdge()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (currentPath == null || currentPath.isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (entityAndParentsNames.contains(relToEntityName) && mappedByPropertyName != null && mappedByPropertyName.equals(fromPropertyName)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (!result || prevDot(myElement))     return false;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (\"100-Continue\".equalsIgnoreCase(expects) && streaming()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (optionListeners.get(i).isMouseOver() || i == highlightedIndex) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!_loadMonitorTaskRunner.awaitingPauseSampling() && _loadMonitorTaskRunner.compareAndSetState(LoadMonitorTaskRunner.LoadMonitorTaskRunnerState.RUNNING,LoadMonitorTaskRunner.LoadMonitorTaskRunnerState.SAMPLING)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n else     if (testClass.getTestName() != null && !testClass.getTestName().isEmpty()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    boolean exposedGuts=mNotificationGutsExposed != null && entry.row.getGuts() == mNotificationGutsExposed;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (tag.getColor() != null && tag.getColor().length() > 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (activeResultsTab != null && UIUtils.isUIThread()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return hashCode == other.hashCode && Objects.equals(a,other.a) && Objects.equals(b,other.b);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (pageContainer instanceof CTabFolder && !pageContainer.isDisposed()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (size > 0 && objects.get(0) instanceof Graph)   graph=(IndexableGraph)objects.get(0);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (key == null || size == 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (IndexMetadata.APIBlock.fromSetting(block) == IndexMetadata.APIBlock.READ_ONLY_ALLOW_DELETE || randomBoolean()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (path != null && path.startsWith(\"/UIDL\")) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (matched && matcher.groupCount() > 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (idx < 0 || originalViolations.get(idx).isLessSerious(v))     return true;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (id == android.R.id.copy || id == android.R.id.paste)     stopTextActionMode();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (inputAsBytes.length == 1 && (inputAsBytes[0] & 0xff) <= 0x80) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (resourceManager.updateRenderedMapNeeded(tilesRect,drawSettings) && !view.isScreenViewDetached()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (Character.isLetter(name.charAt(i)) && !Character.isUpperCase(name.charAt(i))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (field.firstSentenceTags().length != 1 && Arrays.stream(field.firstSentenceTags()).filter(null).count() != 1) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (bind != null && bind.getExplicitTemporalType() != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (stop != null && stop.length > 0 && Bytes.memcmp(row.getKey(),stop) >= 0 && Bytes.memcmp(start,stop) != 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n        boolean isDBObject=dbVal instanceof DBObject && !(dbVal instanceof BasicDBList);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (tokenReadings.isImmunized() || tokenReadings.isIgnoredBySpeller()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n          if ((call.getCallGroup() == null && otherCall.getCallGroup() == null) || (call.getCallGroup() != null || otherCall.getCallGroup() != null) && call.getCallGroup() != otherCall.getCallGroup())           putOnHold(otherCall);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Collections.<Module>singletonList(new SimpleModule(getClass().getSimpleName()).registerSubtypes(new NamedType(HadoopyStringInputRowParser.class,\"hadoopyString\")));\n// fix_end\n"}
{"INPUT": "// fix_start\n@SuppressLint({\"WrongConstant\",\"BanTargetApiAnnotation\"}) @TargetApi(Build.VERSION_CODES.M) private boolean needsMirroring(){\n// fix_end\n"}
{"INPUT": "// fix_start\n  String dataPath=new ClassPathResource(\"spark_word2vec_test.txt\").getFile().getAbsolutePath();\n// fix_end\n"}
{"INPUT": "// fix_start\n      final String filename=this.basenames[i] + '_' + locale;\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.addSymbol(JSON.DEFAULT_TYPE_KEY,0,JSON.DEFAULT_TYPE_KEY.length(),JSON.DEFAULT_TYPE_KEY.hashCode());\n// fix_end\n"}
{"INPUT": "// fix_start\n      FileInputStream fin=new FileInputStream(new File(System.getProperty(\"test.src\",\".\"),\"foo1.jar\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  TimelineArrowWindow popupWindow=new TimelineArrowWindow(mContext,mDatas.get(position),mAdapter,position,mUserNameTextView.getText().toString());\n// fix_end\n"}
{"INPUT": "// fix_start\n    response.sendError(HttpStatus.SC_FORBIDDEN,\"Access Denied for user [\" + request.getParameter(usernameParameter) + \"] from IP Address [\"+ request.getRemoteAddr()+ ']');\n// fix_end\n"}
{"INPUT": "// fix_start\n  System.out.print(string);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return super.onTouchEvent(event);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new ServiceException.NotFoundException(String.format(\"Remote server at %s responded with code 404.\",apiUrl));\n// fix_end\n"}
{"INPUT": "// fix_start\nreturn reader.afterMessageRead(GridDeploymentRequest.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  throw new Error(\"Implement me: \" + graph + \" \"+ state);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return JDBCUtils.generateTableDDL(monitor,this,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  final byte[] id=Arrays.copyOfRange(row_key,Const.SALT_WIDTH(),tsdb.metrics.width() + Const.SALT_WIDTH());\n// fix_end\n"}
{"INPUT": "// fix_start\n    addOneTokenToTLA(TLAConstants.KeyWords.VARIABLE + \" \");\n// fix_end\n"}
{"INPUT": "// fix_start\n    buff.append('\\\"');\n// fix_end\n"}
{"INPUT": "// fix_start\n    localJRubyContainer.runScriptlet(\"Dir.chdir(__internal_working_dir__) {\" + \"  Bundler.with_friendly_errors { Bundler::CLI.start(Array.new(__internal_argv_java__), debug: true) }\" + \"}\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Feed feed=new Feed(new PackagedFeed(TestConstants.CALTRAIN_GTFS));\n// fix_end\n"}
{"INPUT": "// fix_start\n    logger.debug(\"using keystore[{}], key_algorithm[{}], truststore[{}], truststore_algorithm[{}], tls_protocol[{}], \" + \"session_cache_size[{}], session_cache_timeout[{}]\",sslSettings.keyStorePath,sslSettings.keyStoreAlgorithm,sslSettings.trustStorePath,sslSettings.trustStoreAlgorithm,sslSettings.sslProtocol,sslSettings.sessionCacheSize,sslSettings.sessionCacheTimeout);\n// fix_end\n"}
{"INPUT": "// fix_start\n  auditor=new AnomalyDetectionAuditor(client(),clusterService);\n// fix_end\n"}
{"INPUT": "// fix_start\n    Log.e(TAG,\"No children found for \" + mComponentName);\n// fix_end\n"}
{"INPUT": "// fix_start\n        processRemoveConnection(cs.getInfo().getConnectionId(),-1);\n// fix_end\n"}
{"INPUT": "// fix_start\n  kafkaBridgeCluster.setGcLoggingEnabled(spec.getJvmOptions() == null ? DEFAULT_JVM_GC_LOGGING_ENABLED : spec.getJvmOptions().isGcLoggingEnabled());\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ToolUtil.isEmpty(dept.getPid()) || dept.getPid().equals(0)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      Log.w(LOG_TAG,\"MaterialButton manages its own background to control elevation, shape, color and\" + \" states. Consider using backgroundTint, shapeAppearance and other attributes\" + \" where available. A custom background will ignore these attributes and you\"+ \" should consider handling interaction states such as pressed, focused and\"+ \" disabled\");\n// fix_end\n"}
{"INPUT": "// fix_start\n        System.err.println(\"Unexpected close of image: remaining=\" + remaining);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return super.isContentAlwaysEmpty(msg);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new DefaultQueryOptions(consistency,values,false,new SpecificOptions(-1,null,serialConsistency,Long.MIN_VALUE),Server.VERSION_3);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new ParsingException(parser.getTokenLocation(),\"[wrapper] query malformed, expected `query` but was\" + fieldName);\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new BallerinaException(\"Retrieving result sets from stored procedures returning more than one result set, is not \" + \"supported\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new GroovyRuntimeException(\"replaceNode() can only be used to replace a single element, \" + \"but was applied to \" + self.getLength() + \" elements.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.nextValueAtIndex=1 << histogram.unitMagnitude;\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new HBaseIOException(\"Failed confirm OPEN of \" + regionNode + \" (remote log may yield more detail on why).\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  tomcat.getHost().setAppBase(appBase);\n// fix_end\n"}
{"INPUT": "// fix_start\n      scannerConfig.selectedPinger=Platform.WINDOWS ? \"pinger.windows\" : Platform.MAC_OS ? \"pinger.java\" : \"pinger.combined\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  ClusterManagementResult result=new ClusterManagementResult(ClusterManagementResult.StatusCode.UNAUTHENTICATED,authException.getMessage());\n// fix_end\n"}
{"INPUT": "// fix_start\n      receiving=in.available() > 0;\n// fix_end\n"}
{"INPUT": "// fix_start\n  BAssertUtil.validateError(negativeResult,13,\"cannot call 'push' on fixed length list(s) of type '([int,int][1]|[float,\" + \"float][1])'\",63,22);\n// fix_end\n"}
{"INPUT": "// fix_start\n  BindyCsvDataFormat camelDataFormat=new BindyCsvDataFormat(org.apache.camel.dataformat.bindy.model.simple.oneclass.Order.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  controller.setSlaveId(new Object().hashCode());\n// fix_end\n"}
{"INPUT": "// fix_start\nreturn reader.afterMessageRead(GridEventStorageMessage.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n      LOG.trace(\"Received exception while trying to access Hadoop Metrics classes via \" + \"reflection.\",ex);\n// fix_end\n"}
{"INPUT": "// fix_start\n    SimpleDateFormat sdf=new SimpleDateFormat(JsonParserUtils.JS_DATE_FORMAT);\n// fix_end\n"}
{"INPUT": "// fix_start\n  String lmWeightingsStr=args.get(Landmark.PREPARE + \"weightings\",\"\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(SslConfigSettings.SSL_HTTP_ENABLED.getKey(),true).put(SslConfigSettings.SSL_KEYSTORE_FILEPATH.getKey(),keyStoreFile.getAbsolutePath()).put(SslConfigSettings.SSL_TRUSTSTORE_FILEPATH.getKey(),trustStoreFile.getAbsolutePath()).put(SslConfigSettings.SSL_RESOURCE_POLL_INTERVAL.getKey(),\"2s\").build();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new InternalExtendedStats(name,0,0d,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,0d,sigma,formatter,pipelineAggregators(),metaData());\n// fix_end\n"}
{"INPUT": "// fix_start\n  setLocQualityIssueType(ITSIssueType.Duplication);\n// fix_end\n"}
{"INPUT": "// fix_start\n  String[] parts=text.split(File.pathSeparator);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (nodeIndex >= getNodes())   throw new IllegalStateException(\"node \" + nodeIndex + \" is invalid. Not in [0,\"+ getNodes()+ \")\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  outputFileText=UIUtils.createLabelText(outputGroup,MySQLMessages.tools_db_export_wizard_page_settings_label_out_text,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n    return FutureUtils.getFailedFuture(new IllegalStateException(clientName + \" is already shut down.\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  mMainHandler.sendMessage(obtainMessage(null,AccessibilityManagerService.this,box(mAccessibilityFocusedWindowId)));\n// fix_end\n"}
{"INPUT": "// fix_start\n      cache=configuration.getDefaultSymbolCacheFlag();\n// fix_end\n"}
{"INPUT": "// fix_start\n    org.apache.flink.core.fs.FSDataOutputStream outputStream=fs.create(file,FileSystem.WriteMode.OVERWRITE);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override @SuppressWarnings({\"unchecked\",\"rawtypes\"}) public int compareTo(ControlData cd){\n// fix_end\n"}
{"INPUT": "// fix_start\n  DS_DOMAIN_TRUSTS[] domainTrusts=(DS_DOMAIN_TRUSTS[])domainTrustRefs.toArray(new DS_DOMAIN_TRUSTS[domainTrustCount.getValue()]);\n// fix_end\n"}
{"INPUT": "// fix_start\n  int typeParamStart=type.indexOf('<');\n// fix_end\n"}
{"INPUT": "// fix_start\n    throw new IllegalStateException(TAG + \" must be attached to a SherlockFragmentActivity.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  client.taskTopic(DEFAULT_TOPIC_NAME,DEFAULT_PARTITION_ID).newTaskSubscription().taskType(\"another\" + TASK_TYPE).handler(null).lockTime(10000L).lockOwner(\"test\").open();\n// fix_end\n"}
{"INPUT": "// fix_start\n    actionState.getExitActionList().add(createEvaluateAction(CasWebflowConstants.ACTION_ID_CLEAR_WEBFLOW_CREDENTIALS));\n// fix_end\n"}
{"INPUT": "// fix_start\n        for (; i > leftover.size(); --i) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      diskAttribute.addContent(((MemoryAttribute)attribute).getChannelBuffer(),last);\n// fix_end\n"}
{"INPUT": "// fix_start\n while (!myServerSocket.isClosed());\n// fix_end\n"}
{"INPUT": "// fix_start\n  expectedException.expectMessage(\"Unknown function: (doc.users.friends['id'] = 5),\" + \" no overload found for matching argument types: (bigint_array, integer).\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  RankingProcess rankedCache=new RankingProcess(query,order,SearchEvent.max_results_preparation,2);\n// fix_end\n"}
{"INPUT": "// fix_start\n  this(nameId,iconId,locale,mode,extraValue,isAuxiliary,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n      FileWriter fileWriter=new FileWriter(dumpFilename);\n// fix_end\n"}
{"INPUT": "// fix_start\nreturn reader.afterMessageRead(GridDhtAtomicUpdateRequest.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n  config.setProviderName(getProperty(environment,\"jasypt.encryptor.providerName\",null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  long interval=(long)60000 * Globals.prefs.getInt(JabRefPreferences.AUTO_SAVE_INTERVAL);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Bean(BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR) @ConditionalOnProperty(prefix=StarterConstants.SEATA_PREFIX,name={\"enableAutoDataSourceProxy\",\"enable-auto-data-source-proxy\"},havingValue=\"true\",matchIfMissing=true) @ConditionalOnMissingBean(SeataDataSourceBeanPostProcessor.class) public SeataDataSourceBeanPostProcessor seataDataSourceBeanPostProcessor(SeataProperties seataProperties){\n// fix_end\n"}
{"INPUT": "// fix_start\n  canvas.save();\n// fix_end\n"}
{"INPUT": "// fix_start\n  jobConfigProvider.updateJob(jobId,update,null,ActionListener.wrap(null,null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(settings,client);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new SortMergeJoinOperator(1024 * 1024,type,leftIsSmaller,new GeneratedJoinCondition(\"\",\"\",new Object[0]){\n// fix_end\n"}
{"INPUT": "// fix_start\n        ((RuleAgendaItem)activation).getRuleExecutor().reEvaluateNetwork(wm,null);\n// fix_end\n"}
{"INPUT": "// fix_start\n    Configuration.unset(PropertyKey.SITE_CONF_DIR);\n// fix_end\n"}
{"INPUT": "// fix_start\n  pn=new PicoNetwork(networkChannel);\n// fix_end\n"}
{"INPUT": "// fix_start\n  mDefaultConfig=VideoCapture.DEFAULT_CONFIG.getConfig();\n// fix_end\n"}
{"INPUT": "// fix_start\n  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_MAXS);\n// fix_end\n"}
{"INPUT": "// fix_start\nbridge.outputLine(manager.res.getString(R.string.terminal_failed));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new ParallelIndexSupervisorTask(null,null,null,ingestionSpec,Collections.emptyMap());\n// fix_end\n"}
{"INPUT": "// fix_start\n      treeControl.refresh();\n// fix_end\n"}
{"INPUT": "// fix_start\n  recvmsg=LLVMAMD64PosixCallNodeGen.create(\"recvmsg\",\"(SINT32,UINT64,SINT32):SINT64\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  setDefaultTimeout(getFirstUri().getTimeout());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new Field(names.indexName(),value);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Map<GridComputeJob,GridNode> map=new HashMap<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n  try (FileIO fileIO=fileIOFactory.create(file)){\n// fix_end\n"}
{"INPUT": "// fix_start\n    mConditionProviders.addSystemProvider(new EventConditionProvider());\n// fix_end\n"}
{"INPUT": "// fix_start\n  hostnameFetcher=new HostnameFetcher();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Set<Class<? extends CoreAnnotation>> requirements=new HashSet<>(Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,NaturalLogicAnnotations.PolarityAnnotation.class,SemanticGraphCoreAnnotations.EnhancedPlusPlusDependenciesAnnotation.class));\n// fix_end\n"}
{"INPUT": "// fix_start\n  values=indexFieldData.load(context).getBytesValues();\n// fix_end\n"}
{"INPUT": "// fix_start\n  httpClient=new NettyHttpClient(new MockServerLogger(),clientEventLoopGroup,null,false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  RoutingAllocation routingAllocation=new RoutingAllocation(allocationDeciders,routingNodes,current,ClusterInfo.EMPTY,System.nanoTime());\n// fix_end\n"}
{"INPUT": "// fix_start\n  BytesReference pbr=new PagedBytesReference(ba1,length);\n// fix_end\n"}
{"INPUT": "// fix_start\n  BuildTarget sandboxTarget=BuildTargetFactory.newInstance(\"//:rule\").withFlavors(DefaultCxxPlatforms.FLAVOR);\n// fix_end\n"}
{"INPUT": "// fix_start\n  table=Table.read().csv(CsvReadOptions.builder(\"../data/bush.csv\").minimizeColumnSizes());\n// fix_end\n"}
{"INPUT": "// fix_start\n  return CompatibilityResult.requiresMigration();\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(indexSettings,settings);\n// fix_end\n"}
{"INPUT": "// fix_start\n  IntrospectionSupport.setProperties(config,componentProperties);\n// fix_end\n"}
{"INPUT": "// fix_start\n  channel=ManagedChannelBuilder.forAddress(\"127.0.0.1\",port()).directExecutor().usePlaintext().build();\n// fix_end\n"}
{"INPUT": "// fix_start\n  when(queryShardContext.lookup()).thenReturn(new SearchLookup(null,null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return createStatefulSet(getVolumes(isOpenShift),getVolumeClaims(),getMergedAffinity(),getInitContainers(),getContainers());\n// fix_end\n"}
{"INPUT": "// fix_start\n  sideArrayAdapter=new SideArrayAdapter(this,copy,UserSubscriptions.getAllSubreddits(this));\n// fix_end\n"}
{"INPUT": "// fix_start\n  Bootstrap app=new Bootstrap(new TestingNodeModule(),new TestingHttpServerModule(),new JsonModule(),new JaxrsModule(),null,null,override(new HttpBackupModule()).with(new TestingModule()));\n// fix_end\n"}
{"INPUT": "// fix_start\nvalue=jedisCluster.smembers(key);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertModel(MODEL).query(\"select * from zips where state > 'CA' and state < 'AZ' and state = 'OK'\").runs().queryContains(mongoChecker());\n// fix_end\n"}
{"INPUT": "// fix_start\n    writes[i]=LLVMForeignWriteNodeGen.create(PointerType.VOID);\n// fix_end\n"}
{"INPUT": "// fix_start\n  return from(params.getCell(),OwnersReport.builder(params.getCell(),params.getParser(),params.getBuckEventBus()),parserState,executor,new TargetPatternEvaluator(params.getCell(),params.getBuckConfig(),params.getParser(),params.getBuckEventBus(),enableProfiling));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new XMLRenderer();\n// fix_end\n"}
{"INPUT": "// fix_start\n        socketReader=new SocketClientMessageReader(connection);\n// fix_end\n"}
{"INPUT": "// fix_start\n  EnvironmentTestUtils.addEnvironment(this.context,\"datasource.one.url=jdbc:hsqldb:mem:/one\",\"datasource.two.url=jdbc:hsqldb:mem:/two\");\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (SecurityUtils.getUser() != null || !IssueQuery.parse(project,each,true).needsLogin()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  mGroup.setHideSensitiveForIntrinsicHeight(true);\n// fix_end\n"}
{"INPUT": "// fix_start\n    DataSize sessionMaxQueryMemory=getQueryMaxMemory(query.getSession());\n// fix_end\n"}
{"INPUT": "// fix_start\n  Task<DDLWork> addConstraintsTask=TaskFactory.get(new DDLWork(readEntitySet,writeEntitySet,addConstraintsDesc));\n// fix_end\n"}
{"INPUT": "// fix_start\n      final ActivityStack stack=mSupervisor.moveTaskToStackUncheckedLocked(mInTask,stackId,ON_TOP,!FORCE_FOCUS,\"inTaskToFront\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.oContext=context.newOperatorContext(writer);\n// fix_end\n"}
{"INPUT": "// fix_start\n      dispatcher.dispatchBadRequest(channel,threadContext,badRequestCause);\n// fix_end\n"}
{"INPUT": "// fix_start\n  GraqlSession session=new GraqlSession(jettySesssion,factory,\"json\",false);\n// fix_end\n"}
{"INPUT": "// fix_start\n  factory=new SelectQueryRunnerFactory(new SelectQueryQueryToolChest(JSON_MAPPER,QueryBenchmarkUtil.NoopIntervalChunkingQueryRunnerDecorator(),selectConfigSupplier),new SelectQueryEngine(),QueryBenchmarkUtil.NOOP_QUERYWATCHER);\n// fix_end\n"}
{"INPUT": "// fix_start\n    llapDaemons[i]=new LlapDaemon(conf,numExecutorsPerService,execBytesPerService,llapIoEnabled,ioIsDirect,ioBytesPerService,localDirs,rpcPort,mngPort,shufflePort,webPort,clusterNameTrimmed);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(jobId,phaseId,functionImplementation.info().ident().name(),routing,RowGranularity.DOC,outputs,projections,where,DistributionInfo.DEFAULT_BROADCAST);\n// fix_end\n"}
{"INPUT": "// fix_start\n  when(ctx.getClusterInfo()).thenReturn(new ClusterInfo(Resource.newInstance(10240,1)));\n// fix_end\n"}
{"INPUT": "// fix_start\n  String plannedName=FileUtil.createFileNameFromPattern(databaseContext.getDatabase(),entry,Globals.prefs.get(JabRefPreferences.IMPORT_FILENAMEPATTERN));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return \"MultiModelLoader{\" + \"modelLoaders=\" + Arrays.toString(modelLoaders.toArray()) + '}';\n// fix_end\n"}
{"INPUT": "// fix_start\n  TabularImportingParserBase.readTable(project,job,dataReader,limit,options,exceptions);\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(ConnectorInsertTableHandle.class,new InsertTableHandleJsonTypeIdResolver(handleResolver));\n// fix_end\n"}
{"INPUT": "// fix_start\n    long txid=this.wal.appendData(this.getRegionInfo(),walKey,walEdit);\n// fix_end\n"}
{"INPUT": "// fix_start\n  File outputDirectory=generate(\"/schema/description/description.json\",\"com.example\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    ddlAssertEngine=new DDLAssertEngine(sqlCaseId,path,integrateTestCaseAssertion,dataSourceMap);\n// fix_end\n"}
{"INPUT": "// fix_start\n    profile.setId(ProfileHelper.sanitizeIdentifier(JsonHelper.getElement(json,\"sub\")));\n// fix_end\n"}
{"INPUT": "// fix_start\n  QueryNode new_node=factory.newNode(CONTEXT,(QueryNodeConfig)expression_config);\n// fix_end\n"}
{"INPUT": "// fix_start\n  CommandFormat cf=new CommandFormat(1,Integer.MAX_VALUE,\"R\");\n// fix_end\n"}
{"INPUT": "// fix_start\n    return issueUpdater.saveIssueAndPreloadSearchResponseData(session,issue,context,true);\n// fix_end\n"}
{"INPUT": "// fix_start\n  eventListAdapter=new EventsListAdapter(events);\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertOpenEventually(\"responseLatch\",responseLatch);\n// fix_end\n"}
{"INPUT": "// fix_start\n  ReferenceCountedTrigger postAnimationTrigger=new ReferenceCountedTrigger(mRv.getContext());\n// fix_end\n"}
{"INPUT": "// fix_start\n        currentListAdapter.updateChooserCounts(ri.activityInfo.packageName,targetIntent.getAction());\n// fix_end\n"}
{"INPUT": "// fix_start\n  builder.disableServiceConfigLookUp();\n// fix_end\n"}
{"INPUT": "// fix_start\n    writer=new OutputStreamWriter(Files.newOutputStream(self),Charset.defaultCharset());\n// fix_end\n"}
{"INPUT": "// fix_start\n  final StringBuilder args=new StringBuilder();\n// fix_end\n"}
{"INPUT": "// fix_start\n      builder.startObject(entry.getKey());\n// fix_end\n"}
{"INPUT": "// fix_start\n    IndexReader.open(dir);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Link<Void> link=new BookmarkablePageLink<Void>(\"title\",PullRequestActivitiesPage.class,PullRequestActivitiesPage.paramsOf(request));\n// fix_end\n"}
{"INPUT": "// fix_start\n      final NonReusingKeyGroupedIterator<T> keyIter=new NonReusingKeyGroupedIterator<T>(sorter.getIterator(),this.groupingComparator);\n// fix_end\n"}
{"INPUT": "// fix_start\n  String ls=System.lineSeparator();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return builder.build(applicationComponents,applicationMappings,applicationMetrics,callerReferenceMetric,calleeReferenceMetric,startSecondTimeBucket,endSecondTimeBucket);\n// fix_end\n"}
{"INPUT": "// fix_start\n    long txid=this.wal.appendData(this.getRegionInfo(),walKey,walEdit);\n// fix_end\n"}
{"INPUT": "// fix_start\n  sendto=LLVMAMD64PosixCallNodeGen.create(\"sendto\",\"(SINT32,UINT64,UINT64,SINT32,UINT64,SINT32):SINT64\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  final GetResult getResult=indexShard.getService().get(request.type(),request.id(),new String[]{RoutingFieldMapper.NAME,ParentFieldMapper.NAME,TTLFieldMapper.NAME,TimestampFieldMapper.NAME},true,request.version(),request.versionType(),FetchSourceContext.FETCH_SOURCE);\n// fix_end\n"}
{"INPUT": "// fix_start\n    cols.add(new ColumnInfo(metaData.getTableName(i),metaData.getColumnName(i),metaData.getColumnTypeName(i),metaData.getColumnDisplaySize(i)));\n// fix_end\n"}
{"INPUT": "// fix_start\n        Size resolution=useCase.getAttachedSurfaceResolution();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new WriteXMLResult(schema,getSchemaAccessWriter(schema),out,prettyPrint,nullSuppressionEnum,arrayWrappingEnum,arrayTagName,rootTagName,recordTagName,charSet,getDateFormat().orElse(null),getTimeFormat().orElse(null),getTimestampFormat().orElse(null));\n// fix_end\n"}
{"INPUT": "// fix_start\n  channel=new ManagedChannelImpl(builder,mockTransportFactory,new FakeBackoffPolicyProvider(),oobExecutorPool,timer.getStopwatchSupplier(),Collections.<ClientInterceptor>emptyList(),CallTracer.getDefaultFactory());\n// fix_end\n"}
{"INPUT": "// fix_start\n  super(settings,version,threadPool,pageCacheRecycler,circuitBreakerService,namedWriteableRegistry,networkService);\n// fix_end\n"}
{"INPUT": "// fix_start\n      final ODocument document=new ODocument(\"SQLSelectCompositeIndexDirectSearchTestClass\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Aria.upload(HttpUploadActivity.this).load(FILE_PATH).setUploadUrl(\"http://lib-test.xzxyun.com:8042/Api/upload?data={\\\"type\\\":\\\"1\\\",\\\"fileType\\\":\\\".apk\\\"}\").asPost().start();\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new DTest(params.appendExtraDeps(ImmutableList.of(binaryRule)),new SourcePathResolver(buildRuleResolver),binaryRule,args.contacts.get(),args.labels.get(),args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs));\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      handleFailedJob(e);\n    }\n catch (    Exception fe) {\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    if (roundEnv.processingOver()) {\n      return true;\n    }\n    Set<? extends Element> elements=roundEnv.getElementsAnnotatedWith(XmlRootElement.class);\n    for (    Element element : elements) {\n      if (element instanceof TypeElement) {\n        processModelClass(roundEnv,(TypeElement)element);\n      }\n    }\n// fix_end\n// fix_start\n catch (  Throwable e) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    assertMetadata(actualColumns,actualIndexes,expected.findMetadata(tableName));\n  }\n catch (  final AssertionError ex) {\n    System.out.println(String.format(\"[ERROR] SQL::%s, Parameter::[%s], Expect::%s\",getOriginalSQL(),getAssertion().getParameters(),getAssertion().getExpectedDataFile()));\n    throw ex;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    BValue[] testParseTypes=executeTestFuncInBalx(typeBinary,cpBinary);\n    Assert.assertEquals(testParseTypes[0].stringValue(),source,\"Unable to recover type info from \" + Arrays.toString(typeBinary));\n  }\n catch (  Exception e) {\n    throw new AssertionError(\"Error deserializeing\" + Arrays.toString(typeBinary),e);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        deferredResult.setResult(\"\");\n      }\n catch (      Exception e) {\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n        try {\n          tag.setField(entry.getKey(),entry.getValue());\n        }\n catch (        NumberFormatException e) {\n          tag.deleteField(entry.getKey());\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      return anno.toAnnotationType(cl2,cp);\n    }\n catch (    ClassNotFoundException e2) {\n      try {\n        Class<?> clazz=cp.get(anno.getTypeName()).toClass();\n        return javassist.bytecode.annotation.AnnotationImpl.make(clazz.getClassLoader(),clazz,cp,anno);\n      }\n catch (      Throwable e3) {\n        throw new ClassNotFoundException(anno.getTypeName());\n      }\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    unregisterReceiver(mBrdRcvStopWaitingView);\n  }\n catch (  Exception e) {\n    Log.e(LOG_TAG,\"## onPause() : unregisterReceiver fails \" + e.getMessage());\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    if (chLocal == 'F') {\n      return Float.parseFloat(numberString());\n    }\n    if (chLocal == 'D') {\n      return Double.parseDouble(numberString());\n    }\n    if (decimal) {\n      return decimalValue();\n    }\n else {\n      return doubleValue();\n    }\n// fix_end\n// fix_start\n catch (  NumberFormatException ex) {\n    throw new JSONException(ex.getMessage() + \", \" + info());\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      save(OMetadata.CLUSTER_INTERNAL_NAME);\n    }\n catch (    Exception e) {\n      if (document.getIdentity().getClusterPosition().isPersistent()) {\n        document.getIdentity().reset();\n        save(OMetadata.CLUSTER_INTERNAL_NAME);\n      }\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    return String.valueOf(o);\n  }\n catch (  RuntimeException e) {\n    return \"Exception thrown from implementation: \" + e.getClass();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    userDao.insert(user);\n    UserEntity searchUser=userDao.searchUserById(user.getId());\n    System.out.println(searchUser.getName());\n    System.out.println(searchUser.getMis());\n    System.out.println(searchUser.getEmail());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      context.serialize(UnsafeProvider.getInstance().getObject(obj,offset),codedOut);\n    }\n catch (    SerializationException.NoCodecException e) {\n      e.addTrail(this.type);\n      throw e;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    if (instrumentInfo != null) {\n      instrumentInfo.reset();\n      for (      InstrumentClient client : clients) {\n        client.destroy();\n      }\n// fix_end\n// fix_start\n catch (  Exception e) {\n    logger.error(\"\",\"destroy error\",e);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        Runtime.getRuntime().removeShutdownHook(hook);\n      }\n catch (      IllegalStateException e) {\n        log.warn(\"Cannot remove shutdown hook, already shutting down\");\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    final JSONObject ret=new JSONObject(res);\n    ret.put(\"totalTime\",(stop - start));\n    return ret;\n  }\n catch (  JSONException e) {\n    LOGGER.warn(\"Failed to parse response \\\"{}\\\" as JSON\",res);\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      String response=readResponse(client);\n      Assert.assertThat(response,Matchers.containsString(\"HTTP/1.1 431 \"));\n    }\n catch (    Exception e) {\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    final Coin coin=Coin.parseCoin(input);\n    if (Restrictions.isAboveDust(coin))     return new ValidationResult(true);\n else     return new ValidationResult(false,Res.get(\"validation.btc.amountBelowDust\"));\n  }\n catch (  Throwable t) {\n    return new ValidationResult(false,Res.get(\"validation.invalidInput\",t.getMessage()));\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      doWork();\n    }\n catch (    KeeperException.ConnectionLossException e) {\n      if (!autoRequeue.get()) {\n        throw e;\n      }\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n        try {\n          firstVisibleItems=((StaggeredGridLayoutManager)rv.getLayoutManager()).findFirstVisibleItemPositions(firstVisibleItems);\n        }\n catch (        Exception e) {\n          firstVisibleItems=new int[]{0,1};\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      t.start(this,Items.currentlyUpdatingByXml());\n    }\n catch (    Throwable e) {\n      LOGGER.log(Level.WARNING,\"could not start trigger while loading project '\" + getFullName() + \"'\",e);\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    return super.call(method,args);\n  }\n catch (  InvocationTargetException e) {\n    if (e.getCause() instanceof SecurityException) {\n      return null;\n    }\n    throw e;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    InodeTree.ResolveResult<FileSystem> res=fsState.resolve(getUriPath(f),true);\n    return res.targetFileSystem.getServerDefaults(res.remainingPath);\n  }\n catch (  FileNotFoundException e) {\n    throw new NotInMountpointException(f,\"getServerDefaults\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      sendMessage(targetChannel,message,onRequestSent,false);\n    }\n catch (    IOException ex) {\n      if (nodeConnected(node)) {\n        throw ex;\n      }\n else {\n        throw new NodeNotConnectedException(node,\"Node not connected\");\n      }\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        return comparable.compareTo(right);\n      }\n catch (      ClassCastException cce) {\n        if (!equalityCheckOnly)         throw cce;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n            try {\n              view=mOriginLayoutInflater.createView(name,prefix,attrs);\n              if (view != null) {\n                sSuccessClassNamePrefixMap.put(name,prefix);\n                break;\n              }\n            }\n catch (            Exception ignored) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      Authorization dockerConfigAuthorization=dockerConfigCredentialRetriever.retrieve();\n      if (dockerConfigAuthorization != null) {\n        buildConfiguration.getBuildLogger().info(\"Using credentials from Docker config for \" + registry);\n        return dockerConfigAuthorization;\n      }\n    }\n catch (    IOException ex) {\n      buildConfiguration.getBuildLogger().info(\"Unable to parse Docker config\");\n// fix_end\n"}
{"INPUT": "// fix_start\n        try {\n          installedContext=contextFactory.createContext(config);\n          break;\n        }\n catch (        SecurityContextInitializeException e) {\n          LOG.error(\"Cannot instantiate security context with: \" + contextFactoryClass,e);\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    editor.waitMarkerInPosition(INFO,23);\n  }\n catch (  TimeoutException ex) {\n    fail(\"Known issue: https://github.com/eclipse/che/issues/10789\",ex);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        callbacks.get(i).run();\n      }\n catch (      Throwable t) {\n        Log.wtf(TAG,\"Exception in SystemProperties change callback\",t);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        apkParentSession.addChildSessionId(apkChildSession.sessionId);\n      }\n catch (      RemoteException e) {\n        Slog.e(TAG,\"Failed to add a child session for installing the APK files\",e);\n        return false;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    try {\n      ManagementService.unregister(factory);\n    }\n catch (    Throwable e) {\n      e.printStackTrace();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    this.value=Long.parseLong(val);\n  }\n catch (  NumberFormatException e) {\n    throw new NumberFormatException(\"Passed value does not contain a parsable long value\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    char[][] words=dictionary.getWords();\n    if (words != null && words.length > 0) {\n      mWords.add(words);\n    }\n    Logger.d(\"WordListDictionaryListener\",\"onDictionaryLoadingDone got words with length %d\",(words == null ? 0 : words.length));\n// fix_end\n// fix_start\n catch (  Exception e) {\n    Logger.w(\"WordListDictionaryListener\",e,\"onDictionaryLoadingDone got exception from dictionary.\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  try {\n    shortcutManager.requestPinShortcut(info,null);\n  }\n catch (  Exception e) {\n    UIUtils.showThemedToast(this,getString(R.string.create_shortcut_error,e.getLocalizedMessage()),false);\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n      try {\n        cancelBlockWriter();\n      }\n catch (      IOException ee) {\n        LOG.error(\"Failed to cancel block writer:\",ee);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void log(String tag,String message,Throwable exception){\n// fix_end\n"}
{"INPUT": "// fix_start\n  Class<?> clazz=getClass().getClassLoader().loadClass(\"org.netbeans.modules.editor.lib.KitsTracker\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  Map<byte[],String> info=mAndrolib.mResUnknownFiles.getUnknownFiles();\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  Throwable e) {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void createTable(final IDBI dbi,final String tableName,final Iterable<String> sql){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static DocumentationStringNode createDocumentationStringNode(NodeList<Node> documentationLines){\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<ManagedBean> loadedMbeans=new ArrayList<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n  Enumeration<?> names=properties.propertyNames();\n// fix_end\n"}
{"INPUT": "// fix_start\n      Iterator<Message> historyIter=history.iterator();\n// fix_end\n"}
{"INPUT": "// fix_start\npublic SourceSimpleFragmentsBuilder(FieldMapper mapper,SearchContext searchContext,FetchSubPhase.HitContext hitContext,String[] preTags,String[] postTags,BoundaryScanner boundaryScanner){\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<Object> result=ingestDocument.getFieldValue(\"values\",List.class);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override protected void handleResponse(Response response,Request<Void> request){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic DefaultProjectGenerationController(InitializrMetadataProvider metadataProvider,ProjectGenerationInvoker<ProjectRequest> projectGenerationInvoker){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic SStore(PathMetadata metadata){\n// fix_end\n"}
{"INPUT": "// fix_start\n  Object orgId=s.save(jboss);\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public boolean shouldReplicate(FieldMetadata<?,?> field,boolean initial,boolean toOwner){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static void parseField(FieldMapper.Builder builder,String name,Map<String,Object> fieldNode,Mapper.TypeParser.ParserContext parserContext){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic SqmCaseSearched(SqmExpressable<R> inherentType,NodeBuilder nodeBuilder){\n// fix_end\n"}
{"INPUT": "// fix_start\nCombinedFutureRunningState(ImmutableCollection<? extends ListenableFuture<?>> futures,boolean allMustSucceed,CombinedFutureInterruptibleTask task){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  Throwable e) {\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions,int staticOperation,String path){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic GithubRepository(GHRepoEx ghRepository,StandardUsernamePasswordCredentials credentials,Reachable parent){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic AsExternalTypeDeserializer(JavaType bt,TypeIdResolver idRes,String typePropertyName,boolean typeIdVisible,JavaType defaultImpl){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void startScan(BleScanCallback<T> callback,long scanPeriod){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic void registerThrowable(RetryContext context,Throwable throwable){\n// fix_end\n"}
{"INPUT": "// fix_start\n  NSDictionary<?,?> data=a.getUserInfo();\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public BaseFunction repositoryRule(BaseFunction implementation,Object attrs,Boolean local,SkylarkList<?> environ,Boolean configure,String doc,FuncallExpression ast,StarlarkThread funcallThread) throws EvalException {\n// fix_end\n"}
{"INPUT": "// fix_start\n    DuplexConnectionPool connectionPool=destination.getConnectionPool();\n// fix_end\n"}
{"INPUT": "// fix_start\npublic VoltTable[] run(int a,long b,long c,long d,long e,long f,long g){\n// fix_end\n"}
{"INPUT": "// fix_start\n  final var cause=new Exception();\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override @Deprecated public void setAttributes(BMap<BString,?> attributes){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static String[] setTypesWithPrevious(String... types){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic AbstractMapQueryPartitionIterator(IMap<K,V> map,int fetchSize,int partitionId,Predicate<K,V> predicate,Projection<? super Entry<K,V>,R> projection){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public Store<String,String> newStoreWithExpiry(Expiry<? super String,? super String> expiry,TimeSource timeSource){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  Throwable ex) {\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public Object doWork(Object... values) throws IOException {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static void main(String[] argv){\n// fix_end\n"}
{"INPUT": "// fix_start\n    final long waitTime=2;\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (    Exception e) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    final long newStoreId=storeSequence.next();\n// fix_end\n"}
{"INPUT": "// fix_start\ncatch (  Throwable ex) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  final PrioritizedExecutorService innerExecutorService=PrioritizedExecutorService.create(getLifecycle(),getConfigFactory().buildWithReplacements(ExecutorServiceConfig.class,ImmutableMap.of(\"base_path\",\"druid.processing\")));\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (    IOException ex) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  HttpChannel channel=baseRequest.getHttpChannel();\n// fix_end\n"}
{"INPUT": "// fix_start\nprotected PersistenceManagerFactory newPersistenceManagerFactory(Map<?,?> props){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public int choosePartition(Message<?> msg,TopicMetadata topicMetadata){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Verified public void onUserLastSeen(int uid,int date,long updateDate){\n// fix_end\n"}
{"INPUT": "// fix_start\ncatch (  Throwable ex) {\n// fix_end\n"}
{"INPUT": "// fix_start\n@NotImplemented(\"netServiceBrowser:didNotSearch:\") public void didNotSearch(NSNetServiceBrowser aNetServiceBrowser,NSDictionary errorDict){\n// fix_end\n"}
{"INPUT": "// fix_start\n@BuildStep @Record(RUNTIME_INIT) public void startPersistenceUnits(HibernateOrmRecorder recorder,BeanContainerBuildItem beanContainer,List<JdbcDataSourceBuildItem> dataSourcesConfigured,JpaEntitiesBuildItem jpaEntities,List<NonJpaModelBuildItem> nonJpaModels,List<HibernateOrmIntegrationRuntimeConfiguredBuildItem> integrationsRuntimeConfigured,List<JdbcDataSourceSchemaReadyBuildItem> schemaReadyBuildItem) throws Exception {\n// fix_end\n"}
{"INPUT": "// fix_start\n  Map<String,String> meta=new HashMap<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void onFailure(Exception e){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  WebDriverException e) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  Map<String,String> items=new HashMap<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<KEY> allKeysInOldLeftAndOldRight=new ArrayList<>();\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void init(int availableSpace,float intrinsicIconSize,boolean rtl){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic RuleAssert(Metadata metadata,StatsCalculator statsCalculator,CostCalculator costCalculator,Session session,Rule<?> rule,TransactionManager transactionManager,AccessControl accessControl){\n// fix_end\n"}
{"INPUT": "// fix_start\nvoid gatherAffectedRegions(HashSet<InternalRegion> regionSet,boolean includePrimaryRegions,boolean includeRedundantRegions) throws UnsupportedOperationInTransactionException ;\n// fix_end\n"}
{"INPUT": "// fix_start\n    for (    long id : ids.getIDs()) {\n// fix_end\n"}
{"INPUT": "// fix_start\ndefault FieldDeclaration addField(Type type,String name,Modifier... modifiers){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  OutOfCapacityException e) {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic LegacyReaderContext(ShardSearchContextId id,IndexService indexService,IndexShard indexShard,Engine.SearcherSupplier reader,ShardSearchRequest shardSearchRequest,long keepAliveInMillis){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public CRParseResult parseContent(String pluginId,Map<String,String> content){\n// fix_end\n"}
{"INPUT": "// fix_start\n  List<LeafReaderContext> leaves=termContext.topReaderContext.leaves();\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static SqlParserPos sum(List<? extends SqlNode> nodes){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  Throwable e) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    for (    final ReferenceType name : n.getThrows()) {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic TopologyAgentUpdateEvent(SortedMap<String,TopologyCluster> clusters,String hash,UpdateEventType eventType){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic final E create(String id,int naturalOrder,ExecutableElement methodMetadata,AnnotationMirror mirror,TypeMirror returnType,List<VariableElement> parameterTypes){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  IOException|RuntimeException e) {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic ComparableTemplate(Class<T> type,Template template,ImmutableList<?> args){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public int read(byte[] b,int off,int len) throws IOException {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic DefineFontInfo2Tag(SWF swf,byte[] data,int version,long pos) throws IOException {\n// fix_end\n"}
{"INPUT": "// fix_start\n  final Map<String,Literal> properties=new HashMap<>(statement.getProperties());\n// fix_end\n"}
{"INPUT": "// fix_start\n      Class<?> fileMgr=Class.forName(\"com.apple.eio.FileManager\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  var that=(LotteryTicketId)o;\n// fix_end\n"}
{"INPUT": "// fix_start\n    Class<?> cls=Class.forName(controlType);\n// fix_end\n"}
{"INPUT": "// fix_start\n  Collection<String> treePath=Arrays.asList(new String[]{\"1\",\"2\",\"3\",\"4\"});\n// fix_end\n"}
{"INPUT": "// fix_start\npublic CallableStatementCreator newCallableStatementCreator(Map<String,?> params){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic IQProviderInfo(String elementName,String namespace,IQProvider<IQ> iqProvider){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic PopupListKeyboard(@NonNull AddOn keyboardAddOn,Context askContext,KeyboardDimens keyboardDimens,String[] keysNames,String[] keyValues,CharSequence name){\n// fix_end\n"}
{"INPUT": "// fix_start\n catch (  Throwable e) {\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static PieBuilder builder(CategoricalColumn<?> labels,Column<? extends Number> values){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void visit(Operation<?> o){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public CxxPreprocessorInput getCxxPreprocessorInput(CxxPlatform cxxPlatform,HeaderVisibility headerVisibility){\n// fix_end\n"}
{"INPUT": "// fix_start\npublic <K>T ajax(String url,Map<String,?> params,Class<K> type,Object handler,String callback){\n// fix_end\n"}
{"INPUT": "// fix_start\n  RemoteIterator<FileStatus> pathsItor=fc1.listStatus(qualifiedPath(\"test\",fc1));\n// fix_end\n"}
{"INPUT": "// fix_start\n  final Stream<E> distinct=Stream.of(elements).distinct();\n// fix_end\n"}
{"INPUT": "// fix_start\npublic static InputStream openResource(Class<?> testClass,String subPath){\n// fix_end\n"}
{"INPUT": "// fix_start\n@Override public void translate(Stack<GraphTargetItem> stack,List<GraphTargetItem> output,HashMap<Integer,String> regNames,HashMap<String,GraphTargetItem> variables,HashMap<String,GraphTargetItem> functions,int staticOperation,String path){\n// fix_end\n"}
{"INPUT": "// fix_start\n    final var actionState=createActionState(flow,\"basicAuthenticationCheck\",createEvaluateAction(\"basicAuthenticationAction\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (index == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (value == null) {\n      return null;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (binaryContent == null) {\n      return null;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ctx == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (s == null) {\n    return false;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (defBackground == null) {\n      return;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (entity.previous == null)   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (gs == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (app == null) {\n      return false;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (event == null) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (outboundStreamObserver == null) {\n      return;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (basePlayerImpl == null)   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (frames == null) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (parent == null) {\n      return false;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (drawableResource == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (targetClass == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mapLayers.getLocationLayer() == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (CommandContextUtil.getTaskServiceConfiguration() == null) {\n    return false;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (sVar == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (filetype == null)   return false;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (thr == null)   return null;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (manager == null)   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (cacheConfig == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (msg == null) {\n    return null;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (tracks == null)   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (assignee == null) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (regionResources == null) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  return !expression && (el == null) && !namedAttribute;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return handles.length > declaration.getPattern().getOffset() ? handles[declaration.getPattern().getOffset()] : null;\n// fix_end\n"}
{"INPUT": "// fix_start\n  return clusterId != -1 && clusterPosition < -1;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (channel != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (globalLeaseId != 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (p < weight / (double)count) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (ttlMillis > 0 && System.currentTimeMillis() - replicatedRecord.getUpdateTime() >= ttlMillis) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return totalStartedProfilingCount.incrementAndGet() <= task.getMaxSamplingCount();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS && tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    while (engineData.getIndexId() >= indexEngines.size()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (socket != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (this.mWidth != this.mBaseWidth || this.mHeight != this.mBaseHeight) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return compare(leftValue,rightValue) >= 0;\n// fix_end\n"}
{"INPUT": "// fix_start\n  while (waiters.get() > 0 && bagEntry.getState() == STATE_NOT_IN_USE && !handoffQueue.offer(bagEntry)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mOrientation != HORIZONTAL) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  boolean regularNode=node.getMethodId() != 0 && !node.isFilteredNode();\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (index < 0 || index >= mItemDecorations.size()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  for (int i=start; i < endValue; i++) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (BLOCK_LOCK_ID >= 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if ((currentTimeNanos - previousTimeNanos) >= SPANS[index + 1]) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (start == -1 || end > text.length()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (sourceImg.getWidth() < 500 || sourceImg.getHeight() < 500) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return mSqlTableMap.get(getMapTableName(tableName1,tableName2)) != null;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (user.getGroupIds() == null || user.getGroupIds().size() == 0)   return Collections.EMPTY_SET;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (interceptor == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (desc.indexOf('[') == -1 && desc.indexOf('L') == -1)   return;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (StringUtils.equals(endPosition.getJournalName(),logfilename) && endPosition.getPosition() <= logfileoffset) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!database.isAuthenticated() && (userName != null || password != null)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (size() > maximumCacheSize) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  assertTrue(WinspoolUtil.getPrinterInfo1().length >= 0);\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (vertexInputs[0].getType() == InputType.Type.CNNFlat) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (payload_length <= 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (values == null)       continue;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (dependent == null) {\n      continue;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (spec == null) {\n      continue;\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (indexConstraintFieldStats == null) {\n          continue;\n        }\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (data == null) {\n        continue;\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (item != null && item.getRecid() == recid && (oldValue == expectedOldValue || oldValue.equals(expectedOldValue))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (rawText.indexOf(\"MEMORY\") < 0 || rawText.indexOf(\"\\r\\n\") < 0) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return useSUTime;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (type == TypeTags.STRUCT_TAG || type == TypeTags.JSON_TAG || type == TypeTags.XML_TAG || type == TypeTags.STRING_TAG) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (value instanceof Number || value instanceof Boolean) ? value : \"'\" + value + \"'\";\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (c.getName().startsWith(\"java.lang.invoke.\"));\n// fix_end\n"}
{"INPUT": "// fix_start\n  return typeDecl != null && (typeDecl.getKind() == TypeDeclaration.Kind.TRAIT || typeDecl.getTypeClassDef().isTraitable() || typeDecl.getTypeClass().getAnnotation(Traitable.class) != null) || Thing.class.isAssignableFrom(cls) || TraitableBean.class.isAssignableFrom(cls);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (framework instanceof AtmosphereFramework) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!result.isSuccess() && (result.getCode() == ResultCode.UNAUTHORIZED || (result.isException() && result.getException() instanceof AuthenticatorException))) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (health <= 0 && !dead) {\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (Build.VERSION.SDK_INT < 28) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (Desktop.getFrame().isCocoa() && switchToProject_ != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!descriptionEdit.getText().toString().isEmpty() || descriptionEdit.hasFocus()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return new ParamDescriptor(param.name(),defaultExpr,type,generic,noneable,param.named(),param.positional(),getType(type,generic,param.allowedTypes(),noneable),disabledByFlag);\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (isAsync()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (segmentMetadata.getStarTreeV2MetadataList() != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (_state == __STARTED || _state == __STARTING)       return;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (version < 1) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (includeServiceType(fromServiceCode,ServiceType.USER)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n else   if (EmbeddableRecord.class.isAssignableFrom(field.getType()))   return new FlatteningIterator<E>(it){\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (level == Level.DEFAULT) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (returnValue == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (layerIdsList != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  this.hasJdk=filename.contains(\"no-jdk\") == false;\n// fix_end\n"}
{"INPUT": "// fix_start\n                if (cqStats != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (BookUtil.fileByBook(book).getPhysicalFile() != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (!tx().isRemovedRelation(super.longId())) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (typeInference.getTypedArguments().isPresent()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return (ClassUtils.isUserLevelMethod(method) ? this.transactionAttribute : null);\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mAttachInfo.mHardwareRenderer == null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n  return file.getName().endsWith(\".apk\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (viewFor == VIEW_STRUCTURE_FOR_AUTOFILL) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (info.launchedActivity.launchedFromPackage != null) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    boolean isNull=data == null;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (flushComment) {\n// fix_end\n"}
{"INPUT": "// fix_start\n    return review != null && review.getResult() != null && review.getResult().isApproved();\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (master.getStyle().isAlternateFlow()) {\n// fix_end\n"}
{"INPUT": "// fix_start\n      return;\n// fix_end\n"}
{"INPUT": "// fix_start\nreturn true;\n// fix_end\n"}
{"INPUT": "// fix_start\n    return;\n// fix_end\n"}
{"INPUT": "// fix_start\n        return true;\n// fix_end\n"}
{"INPUT": "// fix_start\n    return false;\n// fix_end\n"}
{"INPUT": "// fix_start\n      return (T)oldValue;\n// fix_end\n"}
{"INPUT": "// fix_start\n    return analyzer;\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (mesh == null) {\n    return;\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n    return builder.build();\n// fix_end\n"}
{"INPUT": "// fix_start\nreturn true;\n// fix_end\n"}
{"INPUT": "// fix_start\n    if (results == null) {\n      results=new Bundle();\n    }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (text == null) {\n    text=\"null\";\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (processDefinitionName == null) {\n    processDefinitionName=processDefinition.getKey();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (error == null) {\n    error=getPlaceholderDrawable();\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (text == null)   text=\"\";\n// fix_end\n"}
{"INPUT": "// fix_start\n        if (schemaName == null)         schemaName=\"\";\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (typeCategory == null)       typeCategory=new String[]{\"Uncategorized\"};\n// fix_end\n"}
{"INPUT": "// fix_start\n      if (selectedObject instanceof InjectedElement) {\n        ((IntellijJavaField)((InjectedElement)selectedObject).getField()).getPsiField().navigate(true);\n      }\n// fix_end\n"}
{"INPUT": "// fix_start\n  }\n  if (brokers == null) {\n    throw new IllegalArgumentException(\"URL to the Kafka brokers must be configured with the brokers option on either the component or endpoint.\");\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (toDelete == null) {\n    throw new IllegalArgumentException(\"Cannot find segment '\" + segmentName + \"'\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  if (activity == null) {\n    throw new IllegalArgumentException(\"activity cannot be null\");\n  }\n// fix_end\n"}
{"INPUT": "// fix_start\n  bitrateToBufferFunctionSlope=(maxBufferUs - hysteresisBufferUs - minBufferUs) / Math.log((double)maxBitrate / minBitrate);\n// fix_end\n"}
